#![no_main]
use libfuzzer_sys::fuzz_target;
use arbitrary::Arbitrary;
use ttf_parser::{Face, FaceParsingError, GlyphId};
use std::io::Cursor;

struct Builder;

impl ttf_parser::OutlineBuilder for Builder {
    fn move_to(&mut self, _x: f32, _y: f32) {}
    fn line_to(&mut self, _x: f32, _y: f32) {}
    fn quad_to(&mut self, _x1: f32, _y1: f32, _x: f32, _y: f32) {}
    fn curve_to(&mut self, _x1: f32, _y1: f32, _x2: f32, _y2: f32, _x: f32, _y: f32) {}
    fn close(&mut self) {}
}

#[derive(Arbitrary, Debug)]
struct FuzzInput<'a> {
    data: &'a [u8],
    index: u32,
}

fuzz_target!(|input: FuzzInput| {
    if let Ok(face) = Face::from_slice(input.data, input.index) {
        let _ = face.outline_glyph(GlyphId(0), &mut Builder);
    }
});// 
//  
//  Metadata
// Function Info: 
//  - Macro: false 
//  - Crate: ttf_parser 
//  - Crate Link: None 
//  - Crate Version: 0.13.2 
//  - From Crate: crate_batch_6 
//  - From Crate Link: unknown_website 
//  - Module Path: ttf_parser::(Struct)Face 
//  - Use Statement: None 
//  - Function Name: from_slice 
//  - Function Usage: fn run_5() {
//     println!("run 5");
//     // ! crashing input for line 208
//     // let data = b"\x00\x01\x00\x00\x00\x0f\x00\x10\x00PTT-W\x002h\xd7\x81x\x00\
//     // \x00\x00?L\xbaN\x00c\x9a\x9e\x8f\x96\xe3\xfeu\xff\x00\xb2\x00@\x03\x00\xb8\
//     // cvt 5:\x00\x00\x00\xb5\xf8\x01\x00\x03\x9ckEr\x92\xd7\xe6\x98M\xdc\x00\x00\
//     // \x03\xe0\x00\x00\x00dglyf\"\t\x15`\x00\x00\x03\xe0\x00\x00\x00dglyf\"\t\x15\
//     // `\x00\x00\x00 \x00\x00\x00\xfc\x97\x9fmx\x87\xc9\xc8\xfe\x00\x00\xbad\xff\
//     // \xff\xf1\xc8head\xc7\x17\xce[\x00\x00\x00\xfc\x00\x00\x006hhea\x03\xc6\x05\
//     // \xe4\x00\x00\x014\x00\x00\x00$hmtx\xc9\xfdq\xed\x00\x00\xb5\xf8\x01\x00\x03\
//     // \x9ckEr\x92\xd7\xe6\xdch\x00\x00\xc9d\x00\x00\x04 loca\x00M\x82\x11\x00\x00\
//     // \x00\x06\x00\x00\x00\xa0maxp\x17\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00 name\
//     // \xf4\xd6\xfe\xad\x00OTTO\x00\x02gpost5;5\xe1\x00\x00\xb0P\x00\x00\x01\xf0perp%\
//     // \xb0{\x04\x93D\x00\x00\x00\x00\x01\x00\x00\x00\x01\x00\x00\x01\x00\x00\xe1!yf%1\
//     // \x08\x95\x00\x00\x00\x00\x00\xaa\x06\x80fmtx\x02\x00\x00\x00\x00\x00\x00\x00\
//     // \x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\
//     // \x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00a\xcc\xff\
//     // \xce\x03CCCCCCCCC\x00\x00\x00\x00\x00C\x00\x00\x00\x00\xb5\xf8\x01\x00\x00\x9c";
// 
//     // ! crashing input for line 209
//     // let data = b"OTTO\x00\t\x00\x80\x00\x03\x00\x10CFF \xba\x8a\xb3\xe3\x00\x00\x03\
//     // \xf0\x00\x00\x00[OS/2T\xe9R\xb6\x00\x00\x01\x00\x00\x00\x00`cmap\x00{\x01\xa6\
//     // \x00\x00\x038\x00\x00\x00\x98head\xf0\xfal[\x00\x00\x00\x9c\x00\x00\x006hhea\x068\
//     // \x02M\x00\x00\x00\xd4\x00\x00\x00$hmtx\x07)\x00\x00\x00\x00\x04L\x00\x00\x00\x0cmaxp\
//     // \x00\x03P\x00\x00\x00\x00\xf8\x00\x00\x00\x06name\xf1+\xeb\xf6\x00\x00\x01`\x00\
//     // \x00\x01\xd7post\xff\xb8\x002\x00\x00\x03\xd0\x00\x00\x00 \x00\x01\x00\x00\x00\
//     // \x01\x00&\xe8xq\xb3_\x0f<\xf5\x00\x03\x03\xe8\x00\x00\x00\x00\xc7R\x94\x89\x00\
//     // \x00\x00\x00\xc7R\x94\x89\x00\x00\x00\xf3\x03?\x01v\x00\x00\x00\x03\x00\x02\x00\
//     // \x00\x00\x00\x00\x00\x00\x01\x00\x00\x02\xee\xff\x06\x00\t\x03A\x00\x00\x00\x02\
//     // \x03?\x00\x01\x00\x00\x00\x00\x00\x00\x00\x00\x00\x03\x00\x00\x00\x00\x00\x00\
//     // \x00\x00P\x00\x00\x03\x00\x00\x00\x02\x02c\x01\x90\x00\x05\x00\x00\x02\xbc\x02\
//     // \x8a\x00\x00\x00\x8c\x02\xbc\x02\x8a\x00\x00\x01\xdd\x002\x00\xfa\x00\x00\x00\
//     // \x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x01\x00\x00\x00\x00\x00\x00\x00\
//     // \x00\x00\x00\x00\x00FHD\x00\x00@\x00 \x00-\x02\xee\xff\x06\x00\x00\x02\xf5\x00\
//     // \xf3\x00\x00\x00\x01\x00\x00\x00\x00\x01\xf4\x02\xbc\x00\x00\x00 \x00\x00\x00\
//     // \x00\x00\x10\x00\xc6\x00\x01\x00\x00\x00\x00\x00\x00\x00<\x00\x00\x00\x00\t\x00\
//     // \x00\x00\x00\xf9\xff\xfd\xff\xc3\xff\xfe\xff\x00\x00\x00\x00\x02\x00\x07\x00>\
//     // \x00\x00\x01\x00\x00\x00\x00\x03\x00\x11\x00E\x00\x01\x00\x00\x00\x00\x00\x04\
//     // \x00\x02\x00<\x00\x01\x00\x00\x00\x00\x00\x05\x00\x05\x00V\x00\x01\x00\x00\x00\
//     // \x00\x00\x06\x00\x02\x00<\x00\x01\x00\x00\x00\x00\x00\x10\x00\x02\x00<\x00\x01\
//     // \x00\x00\x00\x00\x00\x11\x00\x07\x00>\x00\x03\x00\x01\x04\t\x00\x00\x00x\x00[\
//     // \x00\x03\x00\x01\x04\t\x00\x01\x00\x04\x00\xd3\x00\x03\x00\x01\x04\t\x00\x02\x00\
//     // \x0e\x00\xd7\x00\x03\x00\x01\x04\t\x00\x03\x00\"\x00\xe5\x00\x03\x00\x01\x04\t\
//     // \x00\x1d\x00\x04\x00\xd3\x00\x03\x00\x01\x04\t\x00\x05\x00\n\x01\x07\x00\x03\x00\
//     // \x01\x04\t\x00\x06\x00\x04\x00\xd3Generated in 2009 by FontLab Studio. Copyright info pending.PIRegularFONTLAB:OTFEXPORT1.000\
//     // \x00G\x00e\x00n\x00e\x00r\x00a\x00t\x00e\x00d\x00 \x00i\x00n\x00 \x002\x000\x000\
//     // \x009\x00 \x00b\x00y\x00 \x00F\x00o\x00n\x00t\x00L\x00a\x00b\x00 \x00S\x00t\x00u\
//     // \x00d\x00i\x00o\x00.\x00 \x00C\x00o\x00p\x00y\x00r\x00i\x00g\x00h\x00t\x00 \x00i\
//     // \x00n\x00f\x00o\x00 \x00p\x00e\x00n\x00d\x00i\x00n\x00g\x00.\x00P\x00I\x00R\x00e\
//     // \x00g\x00u\x00l\x00a\x00r\x00F\x00O\x00N\x00T\x00L\x00A\x00B\x00:\x00O\x00T\x00F\
//     // \x00E\x00X\x00P\x00O\x00R\x00T\x001\x00.\x000\x000\x000\x00\x00\x00\x00\x03\x00\
//     // \x00\x00\x03\x00\x00\x00p\x00\x01\x00\x00\x00\x00\x00\x1c\x00\x03\x00\x01\x00\
//     // \x00\x00p\x00\x06\x00T\x00\x00\x00\t\x00%\x00\x02\x00\x00\x00\x00\x00\x00\x00\
//     // \x02\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\
//     // \x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x02\x00\
//     // \x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\
//     // \x00\x00\x00\x00\x01\x00\x04\x00(\x00\x00\x00\x06\x00\x04\x00\x01\x00\x02\x00 \
//     // \x00-\xff\xff\x00\x00\x00 \x00-\xff\xff\xff\xe2\xff\xd4\x00\x01\x00\x00\x00\x00\
//     // \x00\x03\x00\x00\x00\x00\x00\x00\x00\x00\xff\xb5\x002\x00\x00\x00\x00\x00\x00\
//     // \x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x01\x00\x04\x01\x00\x01\
//     // \x01\x01\x03PI\x00\x01\x01\x01\x1c\xf8\x10\x00\xf8\x1b\x02\xf8\x1b\x03\xf8\x18\
//     // \x04\x8b\xf7\x87\xf9\xbf\x05\xf8\x0f\xd3\n\xc4\x11\x8e\xe3\x12\x00\x01\x01\x01\
//     // \x03PI\x00\x00\x00\x00\x0e\x00\x01\x00\x03\x01\x04\x16\x01\x19\xf8\x88\xf0\x87\
//     // \xf7\x17\x01\xf7\x87\x04\xf9\xd3\xf7\x17\xed\xf0\x0e\xd3\xf8\x88\x0e\x8b\x8b\x00\
//     // \xf4\x06\x00\x01\x00\x03A\x00\x00\x01\xf4\x00\x00";
// 
//     let data = b"\x00\x01\x00\x00\x00\x0f\x00\x10\x00PTT-W\x002h\xd7\x81x\x00\"";
//     match ttf_parser::Face::from_slice(data, 0) {
//         Ok(face) => {
//             let _ = face.outline_glyph(ttf_parser::GlyphId(0), &mut Builder);
//         }
//         Err(e) => eprintln!("Error parsing font: {:?}", e),
//     }
// } 
//  - Parameters: initial function signature:{
//   type_name: fn(&'a [u8], u32) -> Result<Face<'a>, FaceParsingError>,
//   type_fields: [ttf_parser::Face, ttf_parser::FaceParsingError] 
// }
// Struct construction metadata: {
//   type_name: fn(&'a [u8], u32) -> Result<Face<'a>, FaceParsingError>,
//   type_fields: [ttf_parser::Face, ttf_parser::FaceParsingError] 
// }
// Struct construction metadata: {
//   type_name: ttf_parser::Face,
//   type_fields: [&'a [u8], ttf_parser::LazyArray16, ttf_parser::FaceTables, ttf_parser::VarCoords] 
// }
// Struct construction metadata: {
//   type_name: ttf_parser::LazyArray16,
//   type_fields: [&'a [u8], core::PhantomData] 
// }
// Struct construction metadata: {
//   type_name: ttf_parser::FaceTables,
//   type_fields: [ttf_parser::Table, ttf_parser::Table, ttf_parser::Table, core::Option, core::Option, core::Option, core::Option, core::Option, core::Option, core::Option, core::Option, core::Option, core::Option, core::Option, core::Option, core::Option, core::Option, core::Option, core::Option, core::Option, core::Option, core::Option, core::Option, core::Option, core::Option, core::Option, core::Option] 
// }
// Struct construction metadata: {
//   type_name: ttf_parser::Table,
//   type_fields: [u16, ttf_parser::Rect, ttf_parser::IndexToLocationFormat] 
// }
// Struct construction metadata: {
//   type_name: ttf_parser::Rect,
//   type_fields: [i16, i16, i16, i16] 
// }
// Struct construction metadata: {
//   type_name: ttf_parser::IndexToLocationFormat,
//   type_fields: [Short, Long] 
// }
// Struct construction metadata: {
//   type_name: core::Option,
//   type_fields: [None, Some(T)] 
// }
// Struct construction metadata: {
//   type_name: ttf_parser::VarCoords,
//   type_fields: [[NormalizedCoordinate; MAX_VAR_COORDS], u8] 
// }
// Struct construction metadata: {
//   type_name: [NormalizedCoordinate; MAX_VAR_COORDS],
//   type_fields: [ttf_parser::NormalizedCoordinate] 
// }
// Struct construction metadata: {
//   type_name: ttf_parser::NormalizedCoordinate,
//   type_fields: [i16] 
// }
// Struct construction metadata: {
//   type_name: ttf_parser::FaceParsingError,
//   type_fields: [MalformedFont, UnknownMagic, FaceIndexOutOfBounds, NoHeadTable, NoHheaTable, NoMaxpTable] 
// }

