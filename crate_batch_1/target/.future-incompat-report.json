{"version":0,"next_id":2,"reports":[{"id":1,"suggestion_message":"to solve this problem, you can try the following approaches:\n\n- update to a newer version to see if the issue has been fixed\n  - nom v1.2.4 has the following newer versions available: 2.0.0, 2.0.1, 2.1.0, 2.2.0, 2.2.1, 3.0.0, 3.1.0, 3.2.0, 3.2.1, 4.0.0-alpha1, 4.0.0-alpha2, 4.0.0-beta1, 4.0.0-beta2, 4.0.0-beta3, 4.0.0, 4.1.0, 4.1.1, 4.2.0, 4.2.1, 4.2.2, 4.2.3, 5.0.0-alpha1, 5.0.0-alpha2, 5.0.0-beta1, 5.0.0-beta2, 5.0.0-beta3, 5.0.0, 5.0.1, 5.1.0, 5.1.1, 5.1.2, 5.1.3, 6.0.0-alpha1, 6.0.0-alpha2, 6.0.0-alpha3, 6.0.0-beta1, 6.0.0-beta2, 6.0.0-beta3, 6.0.0-beta4, 6.0.0-beta5, 6.0.0, 6.0.1, 6.1.0, 6.1.1, 6.1.2, 6.2.0, 6.2.1, 6.2.2, 7.0.0-alpha1, 7.0.0-alpha2, 7.0.0-alpha3, 7.0.0, 7.1.0, 7.1.1, 7.1.2, 7.1.3, 8.0.0-alpha1, 8.0.0-alpha2, 8.0.0-beta.1, 8.0.0\n  - nom v2.2.1 has the following newer versions available: 3.0.0, 3.1.0, 3.2.0, 3.2.1, 4.0.0-alpha1, 4.0.0-alpha2, 4.0.0-beta1, 4.0.0-beta2, 4.0.0-beta3, 4.0.0, 4.1.0, 4.1.1, 4.2.0, 4.2.1, 4.2.2, 4.2.3, 5.0.0-alpha1, 5.0.0-alpha2, 5.0.0-beta1, 5.0.0-beta2, 5.0.0-beta3, 5.0.0, 5.0.1, 5.1.0, 5.1.1, 5.1.2, 5.1.3, 6.0.0-alpha1, 6.0.0-alpha2, 6.0.0-alpha3, 6.0.0-beta1, 6.0.0-beta2, 6.0.0-beta3, 6.0.0-beta4, 6.0.0-beta5, 6.0.0, 6.0.1, 6.1.0, 6.1.1, 6.1.2, 6.2.0, 6.2.1, 6.2.2, 7.0.0-alpha1, 7.0.0-alpha2, 7.0.0-alpha3, 7.0.0, 7.1.0, 7.1.1, 7.1.2, 7.1.3, 8.0.0-alpha1, 8.0.0-alpha2, 8.0.0-beta.1, 8.0.0\n\n- ensure the maintainers know of this problem (e.g. creating a bug report if needed)\nor even helping with a fix (e.g. by creating a pull request)\n  - bson@0.12.0\n  - repository: <not found>\n  - detailed warning command: `cargo report future-incompatibilities --id 1 --package bson@0.12.0`\n\n  - bson@0.13.0\n  - repository: <not found>\n  - detailed warning command: `cargo report future-incompatibilities --id 1 --package bson@0.13.0`\n\n  - bson@1.2.0\n  - repository: <not found>\n  - detailed warning command: `cargo report future-incompatibilities --id 1 --package bson@1.2.0`\n\n  - flac@0.5.0\n  - repository: https://github.com/sourrust/flac\n  - detailed warning command: `cargo report future-incompatibilities --id 1 --package flac@0.5.0`\n\n  - nom@1.2.4\n  - repository: https://github.com/Geal/nom\n  - detailed warning command: `cargo report future-incompatibilities --id 1 --package nom@1.2.4`\n\n  - nom@2.2.1\n  - repository: https://github.com/Geal/nom\n  - detailed warning command: `cargo report future-incompatibilities --id 1 --package nom@2.2.1`\n\n- use your own version of the dependency with the `[patch]` section in `Cargo.toml`\nFor more information, see:\nhttps://doc.rust-lang.org/cargo/reference/overriding-dependencies.html#the-patch-section\n","per_package":{"bson@0.12.0":"The package `bson v0.12.0 (https://github.com/mongodb/bson-rust?rev=60745f1#60745f1b)` currently triggers the following future incompatibility lints:\n> \u001b[1m\u001b[33mwarning\u001b[0m\u001b[1m: trailing semicolon in macro used in expression position\u001b[0m\n>    \u001b[1m\u001b[94m--> \u001b[0m/home/yzzhao3/.cargo/git/checkouts/bson-rust-41325b3affb37132/60745f1/src/macros.rs:213:46\n>     \u001b[1m\u001b[94m|\u001b[0m\n> \u001b[1m\u001b[94m213\u001b[0m \u001b[1m\u001b[94m|\u001b[0m           $crate::Bson::Document(doc!{$($tt)+});\n>     \u001b[1m\u001b[94m|\u001b[0m                                                \u001b[1m\u001b[33m^\u001b[0m\n>     \u001b[1m\u001b[94m|\u001b[0m\n>    \u001b[1m\u001b[94m::: \u001b[0m/home/yzzhao3/.cargo/git/checkouts/bson-rust-41325b3affb37132/60745f1/src/bson.rs:424:17\n>     \u001b[1m\u001b[94m|\u001b[0m\n> \u001b[1m\u001b[94m424\u001b[0m \u001b[1m\u001b[94m|\u001b[0m \u001b[1m\u001b[94m/\u001b[0m                 doc! {\n> \u001b[1m\u001b[94m425\u001b[0m \u001b[1m\u001b[94m|\u001b[0m \u001b[1m\u001b[94m|\u001b[0m                     \"$date\": {\n> \u001b[1m\u001b[94m426\u001b[0m \u001b[1m\u001b[94m|\u001b[0m \u001b[1m\u001b[94m|\u001b[0m                         \"$numberLong\" => (v.timestamp() * 1000) + v.nanosecond() as i64 / 1000000,\n> \u001b[1m\u001b[94m427\u001b[0m \u001b[1m\u001b[94m|\u001b[0m \u001b[1m\u001b[94m|\u001b[0m                     }\n> \u001b[1m\u001b[94m428\u001b[0m \u001b[1m\u001b[94m|\u001b[0m \u001b[1m\u001b[94m|\u001b[0m                 }\n>     \u001b[1m\u001b[94m|\u001b[0m \u001b[1m\u001b[94m|_________________-\u001b[0m \u001b[1m\u001b[94min this macro invocation\u001b[0m\n>     \u001b[1m\u001b[94m|\u001b[0m\n>     \u001b[1m\u001b[94m= \u001b[0m\u001b[1mwarning\u001b[0m: this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release!\n>     \u001b[1m\u001b[94m= \u001b[0m\u001b[1mnote\u001b[0m: for more information, see issue #79813 <https://github.com/rust-lang/rust/issues/79813>\n>     \u001b[1m\u001b[94m= \u001b[0m\u001b[1mnote\u001b[0m: this warning originates in the macro `bson` which comes from the expansion of the macro `doc` (in Nightly builds, run with -Z macro-backtrace for more info)\n> \n","bson@0.13.0":"The package `bson v0.13.0 (https://github.com/mongodb/bson-rust?rev=aff67d1#aff67d15)` currently triggers the following future incompatibility lints:\n> \u001b[1m\u001b[33mwarning\u001b[0m\u001b[1m: trailing semicolon in macro used in expression position\u001b[0m\n>    \u001b[1m\u001b[94m--> \u001b[0m/home/yzzhao3/.cargo/git/checkouts/bson-rust-41325b3affb37132/aff67d1/src/macros.rs:213:46\n>     \u001b[1m\u001b[94m|\u001b[0m\n> \u001b[1m\u001b[94m213\u001b[0m \u001b[1m\u001b[94m|\u001b[0m           $crate::Bson::Document(doc!{$($tt)+});\n>     \u001b[1m\u001b[94m|\u001b[0m                                                \u001b[1m\u001b[33m^\u001b[0m\n>     \u001b[1m\u001b[94m|\u001b[0m\n>    \u001b[1m\u001b[94m::: \u001b[0m/home/yzzhao3/.cargo/git/checkouts/bson-rust-41325b3affb37132/aff67d1/src/bson.rs:421:17\n>     \u001b[1m\u001b[94m|\u001b[0m\n> \u001b[1m\u001b[94m421\u001b[0m \u001b[1m\u001b[94m|\u001b[0m \u001b[1m\u001b[94m/\u001b[0m                 doc! {\n> \u001b[1m\u001b[94m422\u001b[0m \u001b[1m\u001b[94m|\u001b[0m \u001b[1m\u001b[94m|\u001b[0m                     \"$date\": {\n> \u001b[1m\u001b[94m423\u001b[0m \u001b[1m\u001b[94m|\u001b[0m \u001b[1m\u001b[94m|\u001b[0m                         \"$numberLong\" => (v.timestamp() * 1000) + v.nanosecond() as i64 / 1000000,\n> \u001b[1m\u001b[94m424\u001b[0m \u001b[1m\u001b[94m|\u001b[0m \u001b[1m\u001b[94m|\u001b[0m                     }\n> \u001b[1m\u001b[94m425\u001b[0m \u001b[1m\u001b[94m|\u001b[0m \u001b[1m\u001b[94m|\u001b[0m                 }\n>     \u001b[1m\u001b[94m|\u001b[0m \u001b[1m\u001b[94m|_________________-\u001b[0m \u001b[1m\u001b[94min this macro invocation\u001b[0m\n>     \u001b[1m\u001b[94m|\u001b[0m\n>     \u001b[1m\u001b[94m= \u001b[0m\u001b[1mwarning\u001b[0m: this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release!\n>     \u001b[1m\u001b[94m= \u001b[0m\u001b[1mnote\u001b[0m: for more information, see issue #79813 <https://github.com/rust-lang/rust/issues/79813>\n>     \u001b[1m\u001b[94m= \u001b[0m\u001b[1mnote\u001b[0m: this warning originates in the macro `bson` which comes from the expansion of the macro `doc` (in Nightly builds, run with -Z macro-backtrace for more info)\n> \n","bson@1.2.0":"The package `bson v1.2.0 (https://github.com/mongodb/bson-rust?rev=b069ef5#b069ef51)` currently triggers the following future incompatibility lints:\n> \u001b[1m\u001b[33mwarning\u001b[0m\u001b[1m: trailing semicolon in macro used in expression position\u001b[0m\n>    \u001b[1m\u001b[94m--> \u001b[0m/home/yzzhao3/.cargo/git/checkouts/bson-rust-41325b3affb37132/b069ef5/src/macros.rs:178:54\n>     \u001b[1m\u001b[94m|\u001b[0m\n> \u001b[1m\u001b[94m178\u001b[0m \u001b[1m\u001b[94m|\u001b[0m           $crate::Bson::Document($crate::doc!{$($tt)+});\n>     \u001b[1m\u001b[94m|\u001b[0m                                                        \u001b[1m\u001b[33m^\u001b[0m\n>     \u001b[1m\u001b[94m|\u001b[0m\n>    \u001b[1m\u001b[94m::: \u001b[0m/home/yzzhao3/.cargo/git/checkouts/bson-rust-41325b3affb37132/b069ef5/src/bson.rs:499:17\n>     \u001b[1m\u001b[94m|\u001b[0m\n> \u001b[1m\u001b[94m499\u001b[0m \u001b[1m\u001b[94m|\u001b[0m \u001b[1m\u001b[94m/\u001b[0m                 doc! {\n> \u001b[1m\u001b[94m500\u001b[0m \u001b[1m\u001b[94m|\u001b[0m \u001b[1m\u001b[94m|\u001b[0m                     \"$regularExpression\": {\n> \u001b[1m\u001b[94m501\u001b[0m \u001b[1m\u001b[94m|\u001b[0m \u001b[1m\u001b[94m|\u001b[0m                         \"pattern\": pattern.clone(),\n> \u001b[1m\u001b[94m502\u001b[0m \u001b[1m\u001b[94m|\u001b[0m \u001b[1m\u001b[94m|\u001b[0m                         \"options\": options,\n> \u001b[1m\u001b[94m503\u001b[0m \u001b[1m\u001b[94m|\u001b[0m \u001b[1m\u001b[94m|\u001b[0m                     }\n> \u001b[1m\u001b[94m504\u001b[0m \u001b[1m\u001b[94m|\u001b[0m \u001b[1m\u001b[94m|\u001b[0m                 }\n>     \u001b[1m\u001b[94m|\u001b[0m \u001b[1m\u001b[94m|_________________-\u001b[0m \u001b[1m\u001b[94min this macro invocation\u001b[0m\n>     \u001b[1m\u001b[94m|\u001b[0m\n>     \u001b[1m\u001b[94m= \u001b[0m\u001b[1mwarning\u001b[0m: this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release!\n>     \u001b[1m\u001b[94m= \u001b[0m\u001b[1mnote\u001b[0m: for more information, see issue #79813 <https://github.com/rust-lang/rust/issues/79813>\n>     \u001b[1m\u001b[94m= \u001b[0m\u001b[1mnote\u001b[0m: this warning originates in the macro `$crate::bson` which comes from the expansion of the macro `doc` (in Nightly builds, run with -Z macro-backtrace for more info)\n> \n> \u001b[1m\u001b[33mwarning\u001b[0m\u001b[1m: trailing semicolon in macro used in expression position\u001b[0m\n>    \u001b[1m\u001b[94m--> \u001b[0m/home/yzzhao3/.cargo/git/checkouts/bson-rust-41325b3affb37132/b069ef5/src/macros.rs:178:54\n>     \u001b[1m\u001b[94m|\u001b[0m\n> \u001b[1m\u001b[94m178\u001b[0m \u001b[1m\u001b[94m|\u001b[0m           $crate::Bson::Document($crate::doc!{$($tt)+});\n>     \u001b[1m\u001b[94m|\u001b[0m                                                        \u001b[1m\u001b[33m^\u001b[0m\n>     \u001b[1m\u001b[94m|\u001b[0m\n>    \u001b[1m\u001b[94m::: \u001b[0m/home/yzzhao3/.cargo/git/checkouts/bson-rust-41325b3affb37132/b069ef5/src/bson.rs:521:17\n>     \u001b[1m\u001b[94m|\u001b[0m\n> \u001b[1m\u001b[94m521\u001b[0m \u001b[1m\u001b[94m|\u001b[0m \u001b[1m\u001b[94m/\u001b[0m                 doc! {\n> \u001b[1m\u001b[94m522\u001b[0m \u001b[1m\u001b[94m|\u001b[0m \u001b[1m\u001b[94m|\u001b[0m                     \"$timestamp\": {\n> \u001b[1m\u001b[94m523\u001b[0m \u001b[1m\u001b[94m|\u001b[0m \u001b[1m\u001b[94m|\u001b[0m                         \"t\": time,\n> \u001b[1m\u001b[94m524\u001b[0m \u001b[1m\u001b[94m|\u001b[0m \u001b[1m\u001b[94m|\u001b[0m                         \"i\": increment,\n> \u001b[1m\u001b[94m525\u001b[0m \u001b[1m\u001b[94m|\u001b[0m \u001b[1m\u001b[94m|\u001b[0m                     }\n> \u001b[1m\u001b[94m526\u001b[0m \u001b[1m\u001b[94m|\u001b[0m \u001b[1m\u001b[94m|\u001b[0m                 }\n>     \u001b[1m\u001b[94m|\u001b[0m \u001b[1m\u001b[94m|_________________-\u001b[0m \u001b[1m\u001b[94min this macro invocation\u001b[0m\n>     \u001b[1m\u001b[94m|\u001b[0m\n>     \u001b[1m\u001b[94m= \u001b[0m\u001b[1mwarning\u001b[0m: this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release!\n>     \u001b[1m\u001b[94m= \u001b[0m\u001b[1mnote\u001b[0m: for more information, see issue #79813 <https://github.com/rust-lang/rust/issues/79813>\n>     \u001b[1m\u001b[94m= \u001b[0m\u001b[1mnote\u001b[0m: this warning originates in the macro `$crate::bson` which comes from the expansion of the macro `doc` (in Nightly builds, run with -Z macro-backtrace for more info)\n> \n> \u001b[1m\u001b[33mwarning\u001b[0m\u001b[1m: trailing semicolon in macro used in expression position\u001b[0m\n>    \u001b[1m\u001b[94m--> \u001b[0m/home/yzzhao3/.cargo/git/checkouts/bson-rust-41325b3affb37132/b069ef5/src/macros.rs:178:54\n>     \u001b[1m\u001b[94m|\u001b[0m\n> \u001b[1m\u001b[94m178\u001b[0m \u001b[1m\u001b[94m|\u001b[0m           $crate::Bson::Document($crate::doc!{$($tt)+});\n>     \u001b[1m\u001b[94m|\u001b[0m                                                        \u001b[1m\u001b[33m^\u001b[0m\n>     \u001b[1m\u001b[94m|\u001b[0m\n>    \u001b[1m\u001b[94m::: \u001b[0m/home/yzzhao3/.cargo/git/checkouts/bson-rust-41325b3affb37132/b069ef5/src/bson.rs:530:17\n>     \u001b[1m\u001b[94m|\u001b[0m\n> \u001b[1m\u001b[94m530\u001b[0m \u001b[1m\u001b[94m|\u001b[0m \u001b[1m\u001b[94m/\u001b[0m                 doc! {\n> \u001b[1m\u001b[94m531\u001b[0m \u001b[1m\u001b[94m|\u001b[0m \u001b[1m\u001b[94m|\u001b[0m                     \"$binary\": {\n> \u001b[1m\u001b[94m532\u001b[0m \u001b[1m\u001b[94m|\u001b[0m \u001b[1m\u001b[94m|\u001b[0m                         \"base64\": base64::encode(bytes),\n> \u001b[1m\u001b[94m533\u001b[0m \u001b[1m\u001b[94m|\u001b[0m \u001b[1m\u001b[94m|\u001b[0m                         \"subType\": hex::encode([tval]),\n> \u001b[1m\u001b[94m534\u001b[0m \u001b[1m\u001b[94m|\u001b[0m \u001b[1m\u001b[94m|\u001b[0m                     }\n> \u001b[1m\u001b[94m535\u001b[0m \u001b[1m\u001b[94m|\u001b[0m \u001b[1m\u001b[94m|\u001b[0m                 }\n>     \u001b[1m\u001b[94m|\u001b[0m \u001b[1m\u001b[94m|_________________-\u001b[0m \u001b[1m\u001b[94min this macro invocation\u001b[0m\n>     \u001b[1m\u001b[94m|\u001b[0m\n>     \u001b[1m\u001b[94m= \u001b[0m\u001b[1mwarning\u001b[0m: this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release!\n>     \u001b[1m\u001b[94m= \u001b[0m\u001b[1mnote\u001b[0m: for more information, see issue #79813 <https://github.com/rust-lang/rust/issues/79813>\n>     \u001b[1m\u001b[94m= \u001b[0m\u001b[1mnote\u001b[0m: this warning originates in the macro `$crate::bson` which comes from the expansion of the macro `doc` (in Nightly builds, run with -Z macro-backtrace for more info)\n> \n> \u001b[1m\u001b[33mwarning\u001b[0m\u001b[1m: trailing semicolon in macro used in expression position\u001b[0m\n>    \u001b[1m\u001b[94m--> \u001b[0m/home/yzzhao3/.cargo/git/checkouts/bson-rust-41325b3affb37132/b069ef5/src/macros.rs:178:54\n>     \u001b[1m\u001b[94m|\u001b[0m\n> \u001b[1m\u001b[94m178\u001b[0m \u001b[1m\u001b[94m|\u001b[0m           $crate::Bson::Document($crate::doc!{$($tt)+});\n>     \u001b[1m\u001b[94m|\u001b[0m                                                        \u001b[1m\u001b[33m^\u001b[0m\n>     \u001b[1m\u001b[94m|\u001b[0m\n>    \u001b[1m\u001b[94m::: \u001b[0m/home/yzzhao3/.cargo/git/checkouts/bson-rust-41325b3affb37132/b069ef5/src/bson.rs:553:34\n>     \u001b[1m\u001b[94m|\u001b[0m\n> \u001b[1m\u001b[94m553\u001b[0m \u001b[1m\u001b[94m|\u001b[0m               Bson::DateTime(v) => doc! {\n>     \u001b[1m\u001b[94m|\u001b[0m \u001b[1m\u001b[94m __________________________________-\u001b[0m\n> \u001b[1m\u001b[94m554\u001b[0m \u001b[1m\u001b[94m|\u001b[0m \u001b[1m\u001b[94m|\u001b[0m                 \"$date\": { \"$numberLong\": v.timestamp_millis().to_string() },\n> \u001b[1m\u001b[94m555\u001b[0m \u001b[1m\u001b[94m|\u001b[0m \u001b[1m\u001b[94m|\u001b[0m             },\n>     \u001b[1m\u001b[94m|\u001b[0m \u001b[1m\u001b[94m|_____________-\u001b[0m \u001b[1m\u001b[94min this macro invocation\u001b[0m\n>     \u001b[1m\u001b[94m|\u001b[0m\n>     \u001b[1m\u001b[94m= \u001b[0m\u001b[1mwarning\u001b[0m: this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release!\n>     \u001b[1m\u001b[94m= \u001b[0m\u001b[1mnote\u001b[0m: for more information, see issue #79813 <https://github.com/rust-lang/rust/issues/79813>\n>     \u001b[1m\u001b[94m= \u001b[0m\u001b[1mnote\u001b[0m: this warning originates in the macro `$crate::bson` which comes from the expansion of the macro `doc` (in Nightly builds, run with -Z macro-backtrace for more info)\n> \n> \u001b[1m\u001b[33mwarning\u001b[0m\u001b[1m: trailing semicolon in macro used in expression position\u001b[0m\n>    \u001b[1m\u001b[94m--> \u001b[0m/home/yzzhao3/.cargo/git/checkouts/bson-rust-41325b3affb37132/b069ef5/src/macros.rs:178:54\n>     \u001b[1m\u001b[94m|\u001b[0m\n> \u001b[1m\u001b[94m178\u001b[0m \u001b[1m\u001b[94m|\u001b[0m           $crate::Bson::Document($crate::doc!{$($tt)+});\n>     \u001b[1m\u001b[94m|\u001b[0m                                                        \u001b[1m\u001b[33m^\u001b[0m\n>     \u001b[1m\u001b[94m|\u001b[0m\n>    \u001b[1m\u001b[94m::: \u001b[0m/home/yzzhao3/.cargo/git/checkouts/bson-rust-41325b3affb37132/b069ef5/src/bson.rs:586:17\n>     \u001b[1m\u001b[94m|\u001b[0m\n> \u001b[1m\u001b[94m586\u001b[0m \u001b[1m\u001b[94m|\u001b[0m \u001b[1m\u001b[94m/\u001b[0m                 doc! {\n> \u001b[1m\u001b[94m587\u001b[0m \u001b[1m\u001b[94m|\u001b[0m \u001b[1m\u001b[94m|\u001b[0m                     \"$dbPointer\": {\n> \u001b[1m\u001b[94m588\u001b[0m \u001b[1m\u001b[94m|\u001b[0m \u001b[1m\u001b[94m|\u001b[0m                         \"$ref\": namespace,\n> \u001b[1m\u001b[94m589\u001b[0m \u001b[1m\u001b[94m|\u001b[0m \u001b[1m\u001b[94m|\u001b[0m                         \"$id\": {\n> \u001b[1m\u001b[94m...\u001b[0m   \u001b[1m\u001b[94m|\u001b[0m\n> \u001b[1m\u001b[94m593\u001b[0m \u001b[1m\u001b[94m|\u001b[0m \u001b[1m\u001b[94m|\u001b[0m                 }\n>     \u001b[1m\u001b[94m|\u001b[0m \u001b[1m\u001b[94m|_________________-\u001b[0m \u001b[1m\u001b[94min this macro invocation\u001b[0m\n>     \u001b[1m\u001b[94m|\u001b[0m\n>     \u001b[1m\u001b[94m= \u001b[0m\u001b[1mwarning\u001b[0m: this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release!\n>     \u001b[1m\u001b[94m= \u001b[0m\u001b[1mnote\u001b[0m: for more information, see issue #79813 <https://github.com/rust-lang/rust/issues/79813>\n>     \u001b[1m\u001b[94m= \u001b[0m\u001b[1mnote\u001b[0m: this warning originates in the macro `$crate::bson` which comes from the expansion of the macro `doc` (in Nightly builds, run with -Z macro-backtrace for more info)\n> \n> \u001b[1m\u001b[33mwarning\u001b[0m\u001b[1m: trailing semicolon in macro used in expression position\u001b[0m\n>    \u001b[1m\u001b[94m--> \u001b[0m/home/yzzhao3/.cargo/git/checkouts/bson-rust-41325b3affb37132/b069ef5/src/macros.rs:178:54\n>     \u001b[1m\u001b[94m|\u001b[0m\n> \u001b[1m\u001b[94m178\u001b[0m \u001b[1m\u001b[94m|\u001b[0m           $crate::Bson::Document($crate::doc!{$($tt)+});\n>     \u001b[1m\u001b[94m|\u001b[0m                                                        \u001b[1m\u001b[33m^\u001b[0m\n>     \u001b[1m\u001b[94m|\u001b[0m\n>    \u001b[1m\u001b[94m::: \u001b[0m/home/yzzhao3/.cargo/git/checkouts/bson-rust-41325b3affb37132/b069ef5/src/bson.rs:586:17\n>     \u001b[1m\u001b[94m|\u001b[0m\n> \u001b[1m\u001b[94m586\u001b[0m \u001b[1m\u001b[94m|\u001b[0m \u001b[1m\u001b[94m/\u001b[0m                 doc! {\n> \u001b[1m\u001b[94m587\u001b[0m \u001b[1m\u001b[94m|\u001b[0m \u001b[1m\u001b[94m|\u001b[0m                     \"$dbPointer\": {\n> \u001b[1m\u001b[94m588\u001b[0m \u001b[1m\u001b[94m|\u001b[0m \u001b[1m\u001b[94m|\u001b[0m                         \"$ref\": namespace,\n> \u001b[1m\u001b[94m589\u001b[0m \u001b[1m\u001b[94m|\u001b[0m \u001b[1m\u001b[94m|\u001b[0m                         \"$id\": {\n> \u001b[1m\u001b[94m...\u001b[0m   \u001b[1m\u001b[94m|\u001b[0m\n> \u001b[1m\u001b[94m593\u001b[0m \u001b[1m\u001b[94m|\u001b[0m \u001b[1m\u001b[94m|\u001b[0m                 }\n>     \u001b[1m\u001b[94m|\u001b[0m \u001b[1m\u001b[94m|_________________-\u001b[0m \u001b[1m\u001b[94min this macro invocation\u001b[0m\n>     \u001b[1m\u001b[94m|\u001b[0m\n>     \u001b[1m\u001b[94m= \u001b[0m\u001b[1mwarning\u001b[0m: this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release!\n>     \u001b[1m\u001b[94m= \u001b[0m\u001b[1mnote\u001b[0m: for more information, see issue #79813 <https://github.com/rust-lang/rust/issues/79813>\n>     \u001b[1m\u001b[94m= \u001b[0m\u001b[1mnote\u001b[0m: this warning originates in the macro `$crate::bson` which comes from the expansion of the macro `doc` (in Nightly builds, run with -Z macro-backtrace for more info)\n> \n","flac@0.5.0":"The package `flac v0.5.0` currently triggers the following future incompatibility lints:\n> \u001b[1m\u001b[33mwarning\u001b[0m\u001b[1m: trailing semicolon in macro used in expression position\u001b[0m\n>    \u001b[1m\u001b[94m--> \u001b[0m/home/yzzhao3/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/flac-0.5.0/src/utility/macros.rs:95:53\n>     \u001b[1m\u001b[94m|\u001b[0m\n>  \u001b[1m\u001b[94m95\u001b[0m \u001b[1m\u001b[94m|\u001b[0m     to_custom_error!($input, call!($f), $error_type);\n>     \u001b[1m\u001b[94m|\u001b[0m                                                     \u001b[1m\u001b[33m^\u001b[0m\n>     \u001b[1m\u001b[94m|\u001b[0m\n>    \u001b[1m\u001b[94m::: \u001b[0m/home/yzzhao3/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/flac-0.5.0/src/frame/parser.rs:105:5\n>     \u001b[1m\u001b[94m|\u001b[0m\n> \u001b[1m\u001b[94m105\u001b[0m \u001b[1m\u001b[94m|\u001b[0m     to_custom_error!(input, be_u8, BlockingStrategyParser)\n>     \u001b[1m\u001b[94m|\u001b[0m     \u001b[1m\u001b[94m------------------------------------------------------\u001b[0m \u001b[1m\u001b[94min this macro invocation\u001b[0m\n>     \u001b[1m\u001b[94m|\u001b[0m\n>     \u001b[1m\u001b[94m= \u001b[0m\u001b[1mwarning\u001b[0m: this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release!\n>     \u001b[1m\u001b[94m= \u001b[0m\u001b[1mnote\u001b[0m: for more information, see issue #79813 <https://github.com/rust-lang/rust/issues/79813>\n>     \u001b[1m\u001b[94m= \u001b[0m\u001b[1mnote\u001b[0m: this warning originates in the macro `to_custom_error` (in Nightly builds, run with -Z macro-backtrace for more info)\n> \n> \u001b[1m\u001b[33mwarning\u001b[0m\u001b[1m: trailing semicolon in macro used in expression position\u001b[0m\n>    \u001b[1m\u001b[94m--> \u001b[0m/home/yzzhao3/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/flac-0.5.0/src/utility/macros.rs:95:53\n>     \u001b[1m\u001b[94m|\u001b[0m\n>  \u001b[1m\u001b[94m95\u001b[0m \u001b[1m\u001b[94m|\u001b[0m     to_custom_error!($input, call!($f), $error_type);\n>     \u001b[1m\u001b[94m|\u001b[0m                                                     \u001b[1m\u001b[33m^\u001b[0m\n>     \u001b[1m\u001b[94m|\u001b[0m\n>    \u001b[1m\u001b[94m::: \u001b[0m/home/yzzhao3/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/flac-0.5.0/src/frame/parser.rs:129:5\n>     \u001b[1m\u001b[94m|\u001b[0m\n> \u001b[1m\u001b[94m129\u001b[0m \u001b[1m\u001b[94m|\u001b[0m     to_custom_error!(input, be_u8, ChannelBitsParser)\n>     \u001b[1m\u001b[94m|\u001b[0m     \u001b[1m\u001b[94m-------------------------------------------------\u001b[0m \u001b[1m\u001b[94min this macro invocation\u001b[0m\n>     \u001b[1m\u001b[94m|\u001b[0m\n>     \u001b[1m\u001b[94m= \u001b[0m\u001b[1mwarning\u001b[0m: this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release!\n>     \u001b[1m\u001b[94m= \u001b[0m\u001b[1mnote\u001b[0m: for more information, see issue #79813 <https://github.com/rust-lang/rust/issues/79813>\n>     \u001b[1m\u001b[94m= \u001b[0m\u001b[1mnote\u001b[0m: this warning originates in the macro `to_custom_error` (in Nightly builds, run with -Z macro-backtrace for more info)\n> \n> \u001b[1m\u001b[33mwarning\u001b[0m\u001b[1m: trailing semicolon in macro used in expression position\u001b[0m\n>    \u001b[1m\u001b[94m--> \u001b[0m/home/yzzhao3/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/flac-0.5.0/src/utility/macros.rs:95:53\n>     \u001b[1m\u001b[94m|\u001b[0m\n>  \u001b[1m\u001b[94m95\u001b[0m \u001b[1m\u001b[94m|\u001b[0m       to_custom_error!($input, call!($f), $error_type);\n>     \u001b[1m\u001b[94m|\u001b[0m                                                       \u001b[1m\u001b[33m^\u001b[0m\n>     \u001b[1m\u001b[94m|\u001b[0m\n>    \u001b[1m\u001b[94m::: \u001b[0m/home/yzzhao3/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/flac-0.5.0/src/frame/parser.rs:241:16\n>     \u001b[1m\u001b[94m|\u001b[0m\n> \u001b[1m\u001b[94m241\u001b[0m \u001b[1m\u001b[94m|\u001b[0m     let result = chain!(input,\n>     \u001b[1m\u001b[94m|\u001b[0m \u001b[1m\u001b[94m ________________-\u001b[0m\n> \u001b[1m\u001b[94m242\u001b[0m \u001b[1m\u001b[94m|\u001b[0m \u001b[1m\u001b[94m|\u001b[0m     is_variable_block_size: blocking_strategy ~\n> \u001b[1m\u001b[94m243\u001b[0m \u001b[1m\u001b[94m|\u001b[0m \u001b[1m\u001b[94m|\u001b[0m     tuple0: block_sample ~\n> \u001b[1m\u001b[94m244\u001b[0m \u001b[1m\u001b[94m|\u001b[0m \u001b[1m\u001b[94m|\u001b[0m     tuple1: channel_bits ~\n> \u001b[1m\u001b[94m...\u001b[0m   \u001b[1m\u001b[94m|\u001b[0m\n> \u001b[1m\u001b[94m302\u001b[0m \u001b[1m\u001b[94m|\u001b[0m \u001b[1m\u001b[94m|\u001b[0m   );\n>     \u001b[1m\u001b[94m|\u001b[0m \u001b[1m\u001b[94m|___-\u001b[0m \u001b[1m\u001b[94min this macro invocation\u001b[0m\n>     \u001b[1m\u001b[94m|\u001b[0m\n>     \u001b[1m\u001b[94m= \u001b[0m\u001b[1mwarning\u001b[0m: this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release!\n>     \u001b[1m\u001b[94m= \u001b[0m\u001b[1mnote\u001b[0m: for more information, see issue #79813 <https://github.com/rust-lang/rust/issues/79813>\n>     \u001b[1m\u001b[94m= \u001b[0m\u001b[1mnote\u001b[0m: macro invocations at the end of a block are treated as expressions\n>     \u001b[1m\u001b[94m= \u001b[0m\u001b[1mnote\u001b[0m: to ignore the value produced by the macro, add a semicolon after the invocation of `to_custom_error`\n>     \u001b[1m\u001b[94m= \u001b[0m\u001b[1mnote\u001b[0m: this warning originates in the macro `to_custom_error` which comes from the expansion of the macro `chain` (in Nightly builds, run with -Z macro-backtrace for more info)\n> \n> \u001b[1m\u001b[33mwarning\u001b[0m\u001b[1m: trailing semicolon in macro used in expression position\u001b[0m\n>    \u001b[1m\u001b[94m--> \u001b[0m/home/yzzhao3/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/flac-0.5.0/src/utility/macros.rs:95:53\n>     \u001b[1m\u001b[94m|\u001b[0m\n>  \u001b[1m\u001b[94m95\u001b[0m \u001b[1m\u001b[94m|\u001b[0m       to_custom_error!($input, call!($f), $error_type);\n>     \u001b[1m\u001b[94m|\u001b[0m                                                       \u001b[1m\u001b[33m^\u001b[0m\n>     \u001b[1m\u001b[94m|\u001b[0m\n>    \u001b[1m\u001b[94m::: \u001b[0m/home/yzzhao3/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/flac-0.5.0/src/subframe/parser.rs:94:3\n>     \u001b[1m\u001b[94m|\u001b[0m\n>  \u001b[1m\u001b[94m94\u001b[0m \u001b[1m\u001b[94m|\u001b[0m \u001b[1m\u001b[94m/\u001b[0m   chain!(input,\n>  \u001b[1m\u001b[94m95\u001b[0m \u001b[1m\u001b[94m|\u001b[0m \u001b[1m\u001b[94m|\u001b[0m     subframe_header: header ~\n>  \u001b[1m\u001b[94m96\u001b[0m \u001b[1m\u001b[94m|\u001b[0m \u001b[1m\u001b[94m|\u001b[0m     wasted_bits: map!(\n>  \u001b[1m\u001b[94m97\u001b[0m \u001b[1m\u001b[94m|\u001b[0m \u001b[1m\u001b[94m|\u001b[0m       cond!(subframe_header.1,\n> \u001b[1m\u001b[94m...\u001b[0m   \u001b[1m\u001b[94m|\u001b[0m\n> \u001b[1m\u001b[94m115\u001b[0m \u001b[1m\u001b[94m|\u001b[0m \u001b[1m\u001b[94m|\u001b[0m   )\n>     \u001b[1m\u001b[94m|\u001b[0m \u001b[1m\u001b[94m|___-\u001b[0m \u001b[1m\u001b[94min this macro invocation\u001b[0m\n>     \u001b[1m\u001b[94m|\u001b[0m\n>     \u001b[1m\u001b[94m= \u001b[0m\u001b[1mwarning\u001b[0m: this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release!\n>     \u001b[1m\u001b[94m= \u001b[0m\u001b[1mnote\u001b[0m: for more information, see issue #79813 <https://github.com/rust-lang/rust/issues/79813>\n>     \u001b[1m\u001b[94m= \u001b[0m\u001b[1mnote\u001b[0m: macro invocations at the end of a block are treated as expressions\n>     \u001b[1m\u001b[94m= \u001b[0m\u001b[1mnote\u001b[0m: to ignore the value produced by the macro, add a semicolon after the invocation of `to_custom_error`\n>     \u001b[1m\u001b[94m= \u001b[0m\u001b[1mnote\u001b[0m: this warning originates in the macro `to_custom_error` which comes from the expansion of the macro `chain` (in Nightly builds, run with -Z macro-backtrace for more info)\n> \n> \u001b[1m\u001b[33mwarning\u001b[0m\u001b[1m: trailing semicolon in macro used in expression position\u001b[0m\n>    \u001b[1m\u001b[94m--> \u001b[0m/home/yzzhao3/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/flac-0.5.0/src/utility/macros.rs:83:43\n>     \u001b[1m\u001b[94m|\u001b[0m\n>  \u001b[1m\u001b[94m83\u001b[0m \u001b[1m\u001b[94m|\u001b[0m       take_signed_bits!($input, i32, $count);\n>     \u001b[1m\u001b[94m|\u001b[0m                                             \u001b[1m\u001b[33m^\u001b[0m\n>     \u001b[1m\u001b[94m|\u001b[0m\n>    \u001b[1m\u001b[94m::: \u001b[0m/home/yzzhao3/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/flac-0.5.0/src/subframe/parser.rs:162:3\n>     \u001b[1m\u001b[94m|\u001b[0m\n> \u001b[1m\u001b[94m162\u001b[0m \u001b[1m\u001b[94m|\u001b[0m \u001b[1m\u001b[94m/\u001b[0m   to_custom_error!(input,\n> \u001b[1m\u001b[94m163\u001b[0m \u001b[1m\u001b[94m|\u001b[0m \u001b[1m\u001b[94m|\u001b[0m     map!(take_signed_bits!(bits_per_sample), subframe::Data::Constant),\n> \u001b[1m\u001b[94m164\u001b[0m \u001b[1m\u001b[94m|\u001b[0m \u001b[1m\u001b[94m|\u001b[0m     ConstantParser)\n>     \u001b[1m\u001b[94m|\u001b[0m \u001b[1m\u001b[94m|___________________-\u001b[0m \u001b[1m\u001b[94min this macro invocation\u001b[0m\n>     \u001b[1m\u001b[94m|\u001b[0m\n>     \u001b[1m\u001b[94m= \u001b[0m\u001b[1mwarning\u001b[0m: this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release!\n>     \u001b[1m\u001b[94m= \u001b[0m\u001b[1mnote\u001b[0m: for more information, see issue #79813 <https://github.com/rust-lang/rust/issues/79813>\n>     \u001b[1m\u001b[94m= \u001b[0m\u001b[1mnote\u001b[0m: macro invocations at the end of a block are treated as expressions\n>     \u001b[1m\u001b[94m= \u001b[0m\u001b[1mnote\u001b[0m: to ignore the value produced by the macro, add a semicolon after the invocation of `take_signed_bits`\n>     \u001b[1m\u001b[94m= \u001b[0m\u001b[1mnote\u001b[0m: this warning originates in the macro `take_signed_bits` which comes from the expansion of the macro `to_custom_error` (in Nightly builds, run with -Z macro-backtrace for more info)\n> \n> \u001b[1m\u001b[33mwarning\u001b[0m\u001b[1m: trailing semicolon in macro used in expression position\u001b[0m\n>    \u001b[1m\u001b[94m--> \u001b[0m/home/yzzhao3/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/flac-0.5.0/src/utility/macros.rs:80:7\n>     \u001b[1m\u001b[94m|\u001b[0m\n>  \u001b[1m\u001b[94m80\u001b[0m \u001b[1m\u001b[94m|\u001b[0m       });\n>     \u001b[1m\u001b[94m|\u001b[0m         \u001b[1m\u001b[33m^\u001b[0m\n>     \u001b[1m\u001b[94m|\u001b[0m\n>    \u001b[1m\u001b[94m::: \u001b[0m/home/yzzhao3/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/flac-0.5.0/src/subframe/parser.rs:162:3\n>     \u001b[1m\u001b[94m|\u001b[0m\n> \u001b[1m\u001b[94m162\u001b[0m \u001b[1m\u001b[94m|\u001b[0m \u001b[1m\u001b[94m/\u001b[0m   to_custom_error!(input,\n> \u001b[1m\u001b[94m163\u001b[0m \u001b[1m\u001b[94m|\u001b[0m \u001b[1m\u001b[94m|\u001b[0m     map!(take_signed_bits!(bits_per_sample), subframe::Data::Constant),\n> \u001b[1m\u001b[94m164\u001b[0m \u001b[1m\u001b[94m|\u001b[0m \u001b[1m\u001b[94m|\u001b[0m     ConstantParser)\n>     \u001b[1m\u001b[94m|\u001b[0m \u001b[1m\u001b[94m|___________________-\u001b[0m \u001b[1m\u001b[94min this macro invocation\u001b[0m\n>     \u001b[1m\u001b[94m|\u001b[0m\n>     \u001b[1m\u001b[94m= \u001b[0m\u001b[1mwarning\u001b[0m: this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release!\n>     \u001b[1m\u001b[94m= \u001b[0m\u001b[1mnote\u001b[0m: for more information, see issue #79813 <https://github.com/rust-lang/rust/issues/79813>\n>     \u001b[1m\u001b[94m= \u001b[0m\u001b[1mnote\u001b[0m: macro invocations at the end of a block are treated as expressions\n>     \u001b[1m\u001b[94m= \u001b[0m\u001b[1mnote\u001b[0m: to ignore the value produced by the macro, add a semicolon after the invocation of `take_signed_bits`\n>     \u001b[1m\u001b[94m= \u001b[0m\u001b[1mnote\u001b[0m: this warning originates in the macro `take_signed_bits` which comes from the expansion of the macro `to_custom_error` (in Nightly builds, run with -Z macro-backtrace for more info)\n> \n> \u001b[1m\u001b[33mwarning\u001b[0m\u001b[1m: trailing semicolon in macro used in expression position\u001b[0m\n>    \u001b[1m\u001b[94m--> \u001b[0m/home/yzzhao3/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/flac-0.5.0/src/utility/macros.rs:83:43\n>     \u001b[1m\u001b[94m|\u001b[0m\n>  \u001b[1m\u001b[94m83\u001b[0m \u001b[1m\u001b[94m|\u001b[0m       take_signed_bits!($input, i32, $count);\n>     \u001b[1m\u001b[94m|\u001b[0m                                             \u001b[1m\u001b[33m^\u001b[0m\n>     \u001b[1m\u001b[94m|\u001b[0m\n>    \u001b[1m\u001b[94m::: \u001b[0m/home/yzzhao3/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/flac-0.5.0/src/subframe/parser.rs:176:3\n>     \u001b[1m\u001b[94m|\u001b[0m\n> \u001b[1m\u001b[94m176\u001b[0m \u001b[1m\u001b[94m|\u001b[0m \u001b[1m\u001b[94m/\u001b[0m   to_custom_error!(input,\n> \u001b[1m\u001b[94m177\u001b[0m \u001b[1m\u001b[94m|\u001b[0m \u001b[1m\u001b[94m|\u001b[0m     chain!(\n> \u001b[1m\u001b[94m178\u001b[0m \u001b[1m\u001b[94m|\u001b[0m \u001b[1m\u001b[94m|\u001b[0m       count_slice!(take_signed_bits!(bits_per_sample),\n> \u001b[1m\u001b[94m179\u001b[0m \u001b[1m\u001b[94m|\u001b[0m \u001b[1m\u001b[94m|\u001b[0m                    &mut warmup[0..order]) ~\n> \u001b[1m\u001b[94m...\u001b[0m   \u001b[1m\u001b[94m|\u001b[0m\n> \u001b[1m\u001b[94m189\u001b[0m \u001b[1m\u001b[94m|\u001b[0m \u001b[1m\u001b[94m|\u001b[0m     ),\n> \u001b[1m\u001b[94m190\u001b[0m \u001b[1m\u001b[94m|\u001b[0m \u001b[1m\u001b[94m|\u001b[0m     FixedParser)\n>     \u001b[1m\u001b[94m|\u001b[0m \u001b[1m\u001b[94m|________________-\u001b[0m \u001b[1m\u001b[94min this macro invocation\u001b[0m\n>     \u001b[1m\u001b[94m|\u001b[0m\n>     \u001b[1m\u001b[94m= \u001b[0m\u001b[1mwarning\u001b[0m: this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release!\n>     \u001b[1m\u001b[94m= \u001b[0m\u001b[1mnote\u001b[0m: for more information, see issue #79813 <https://github.com/rust-lang/rust/issues/79813>\n>     \u001b[1m\u001b[94m= \u001b[0m\u001b[1mnote\u001b[0m: macro invocations at the end of a block are treated as expressions\n>     \u001b[1m\u001b[94m= \u001b[0m\u001b[1mnote\u001b[0m: to ignore the value produced by the macro, add a semicolon after the invocation of `take_signed_bits`\n>     \u001b[1m\u001b[94m= \u001b[0m\u001b[1mnote\u001b[0m: this warning originates in the macro `take_signed_bits` which comes from the expansion of the macro `to_custom_error` (in Nightly builds, run with -Z macro-backtrace for more info)\n> \n> \u001b[1m\u001b[33mwarning\u001b[0m\u001b[1m: trailing semicolon in macro used in expression position\u001b[0m\n>    \u001b[1m\u001b[94m--> \u001b[0m/home/yzzhao3/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/flac-0.5.0/src/utility/macros.rs:80:7\n>     \u001b[1m\u001b[94m|\u001b[0m\n>  \u001b[1m\u001b[94m80\u001b[0m \u001b[1m\u001b[94m|\u001b[0m       });\n>     \u001b[1m\u001b[94m|\u001b[0m         \u001b[1m\u001b[33m^\u001b[0m\n>     \u001b[1m\u001b[94m|\u001b[0m\n>    \u001b[1m\u001b[94m::: \u001b[0m/home/yzzhao3/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/flac-0.5.0/src/subframe/parser.rs:176:3\n>     \u001b[1m\u001b[94m|\u001b[0m\n> \u001b[1m\u001b[94m176\u001b[0m \u001b[1m\u001b[94m|\u001b[0m \u001b[1m\u001b[94m/\u001b[0m   to_custom_error!(input,\n> \u001b[1m\u001b[94m177\u001b[0m \u001b[1m\u001b[94m|\u001b[0m \u001b[1m\u001b[94m|\u001b[0m     chain!(\n> \u001b[1m\u001b[94m178\u001b[0m \u001b[1m\u001b[94m|\u001b[0m \u001b[1m\u001b[94m|\u001b[0m       count_slice!(take_signed_bits!(bits_per_sample),\n> \u001b[1m\u001b[94m179\u001b[0m \u001b[1m\u001b[94m|\u001b[0m \u001b[1m\u001b[94m|\u001b[0m                    &mut warmup[0..order]) ~\n> \u001b[1m\u001b[94m...\u001b[0m   \u001b[1m\u001b[94m|\u001b[0m\n> \u001b[1m\u001b[94m189\u001b[0m \u001b[1m\u001b[94m|\u001b[0m \u001b[1m\u001b[94m|\u001b[0m     ),\n> \u001b[1m\u001b[94m190\u001b[0m \u001b[1m\u001b[94m|\u001b[0m \u001b[1m\u001b[94m|\u001b[0m     FixedParser)\n>     \u001b[1m\u001b[94m|\u001b[0m \u001b[1m\u001b[94m|________________-\u001b[0m \u001b[1m\u001b[94min this macro invocation\u001b[0m\n>     \u001b[1m\u001b[94m|\u001b[0m\n>     \u001b[1m\u001b[94m= \u001b[0m\u001b[1mwarning\u001b[0m: this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release!\n>     \u001b[1m\u001b[94m= \u001b[0m\u001b[1mnote\u001b[0m: for more information, see issue #79813 <https://github.com/rust-lang/rust/issues/79813>\n>     \u001b[1m\u001b[94m= \u001b[0m\u001b[1mnote\u001b[0m: macro invocations at the end of a block are treated as expressions\n>     \u001b[1m\u001b[94m= \u001b[0m\u001b[1mnote\u001b[0m: to ignore the value produced by the macro, add a semicolon after the invocation of `take_signed_bits`\n>     \u001b[1m\u001b[94m= \u001b[0m\u001b[1mnote\u001b[0m: this warning originates in the macro `take_signed_bits` which comes from the expansion of the macro `to_custom_error` (in Nightly builds, run with -Z macro-backtrace for more info)\n> \n> \u001b[1m\u001b[33mwarning\u001b[0m\u001b[1m: trailing semicolon in macro used in expression position\u001b[0m\n>    \u001b[1m\u001b[94m--> \u001b[0m/home/yzzhao3/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/flac-0.5.0/src/utility/macros.rs:83:43\n>     \u001b[1m\u001b[94m|\u001b[0m\n>  \u001b[1m\u001b[94m83\u001b[0m \u001b[1m\u001b[94m|\u001b[0m       take_signed_bits!($input, i32, $count);\n>     \u001b[1m\u001b[94m|\u001b[0m                                             \u001b[1m\u001b[33m^\u001b[0m\n>     \u001b[1m\u001b[94m|\u001b[0m\n>    \u001b[1m\u001b[94m::: \u001b[0m/home/yzzhao3/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/flac-0.5.0/src/subframe/parser.rs:216:3\n>     \u001b[1m\u001b[94m|\u001b[0m\n> \u001b[1m\u001b[94m216\u001b[0m \u001b[1m\u001b[94m|\u001b[0m \u001b[1m\u001b[94m/\u001b[0m   to_custom_error!(input,\n> \u001b[1m\u001b[94m217\u001b[0m \u001b[1m\u001b[94m|\u001b[0m \u001b[1m\u001b[94m|\u001b[0m     chain!(\n> \u001b[1m\u001b[94m218\u001b[0m \u001b[1m\u001b[94m|\u001b[0m \u001b[1m\u001b[94m|\u001b[0m       count_slice!(take_signed_bits!(bits_per_sample),\n> \u001b[1m\u001b[94m219\u001b[0m \u001b[1m\u001b[94m|\u001b[0m \u001b[1m\u001b[94m|\u001b[0m                    &mut warmup[0..order]) ~\n> \u001b[1m\u001b[94m...\u001b[0m   \u001b[1m\u001b[94m|\u001b[0m\n> \u001b[1m\u001b[94m238\u001b[0m \u001b[1m\u001b[94m|\u001b[0m \u001b[1m\u001b[94m|\u001b[0m     ),\n> \u001b[1m\u001b[94m239\u001b[0m \u001b[1m\u001b[94m|\u001b[0m \u001b[1m\u001b[94m|\u001b[0m     LPCParser)\n>     \u001b[1m\u001b[94m|\u001b[0m \u001b[1m\u001b[94m|______________-\u001b[0m \u001b[1m\u001b[94min this macro invocation\u001b[0m\n>     \u001b[1m\u001b[94m|\u001b[0m\n>     \u001b[1m\u001b[94m= \u001b[0m\u001b[1mwarning\u001b[0m: this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release!\n>     \u001b[1m\u001b[94m= \u001b[0m\u001b[1mnote\u001b[0m: for more information, see issue #79813 <https://github.com/rust-lang/rust/issues/79813>\n>     \u001b[1m\u001b[94m= \u001b[0m\u001b[1mnote\u001b[0m: macro invocations at the end of a block are treated as expressions\n>     \u001b[1m\u001b[94m= \u001b[0m\u001b[1mnote\u001b[0m: to ignore the value produced by the macro, add a semicolon after the invocation of `take_signed_bits`\n>     \u001b[1m\u001b[94m= \u001b[0m\u001b[1mnote\u001b[0m: this warning originates in the macro `take_signed_bits` which comes from the expansion of the macro `to_custom_error` (in Nightly builds, run with -Z macro-backtrace for more info)\n> \n> \u001b[1m\u001b[33mwarning\u001b[0m\u001b[1m: trailing semicolon in macro used in expression position\u001b[0m\n>    \u001b[1m\u001b[94m--> \u001b[0m/home/yzzhao3/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/flac-0.5.0/src/utility/macros.rs:80:7\n>     \u001b[1m\u001b[94m|\u001b[0m\n>  \u001b[1m\u001b[94m80\u001b[0m \u001b[1m\u001b[94m|\u001b[0m       });\n>     \u001b[1m\u001b[94m|\u001b[0m         \u001b[1m\u001b[33m^\u001b[0m\n>     \u001b[1m\u001b[94m|\u001b[0m\n>    \u001b[1m\u001b[94m::: \u001b[0m/home/yzzhao3/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/flac-0.5.0/src/subframe/parser.rs:216:3\n>     \u001b[1m\u001b[94m|\u001b[0m\n> \u001b[1m\u001b[94m216\u001b[0m \u001b[1m\u001b[94m|\u001b[0m \u001b[1m\u001b[94m/\u001b[0m   to_custom_error!(input,\n> \u001b[1m\u001b[94m217\u001b[0m \u001b[1m\u001b[94m|\u001b[0m \u001b[1m\u001b[94m|\u001b[0m     chain!(\n> \u001b[1m\u001b[94m218\u001b[0m \u001b[1m\u001b[94m|\u001b[0m \u001b[1m\u001b[94m|\u001b[0m       count_slice!(take_signed_bits!(bits_per_sample),\n> \u001b[1m\u001b[94m219\u001b[0m \u001b[1m\u001b[94m|\u001b[0m \u001b[1m\u001b[94m|\u001b[0m                    &mut warmup[0..order]) ~\n> \u001b[1m\u001b[94m...\u001b[0m   \u001b[1m\u001b[94m|\u001b[0m\n> \u001b[1m\u001b[94m238\u001b[0m \u001b[1m\u001b[94m|\u001b[0m \u001b[1m\u001b[94m|\u001b[0m     ),\n> \u001b[1m\u001b[94m239\u001b[0m \u001b[1m\u001b[94m|\u001b[0m \u001b[1m\u001b[94m|\u001b[0m     LPCParser)\n>     \u001b[1m\u001b[94m|\u001b[0m \u001b[1m\u001b[94m|______________-\u001b[0m \u001b[1m\u001b[94min this macro invocation\u001b[0m\n>     \u001b[1m\u001b[94m|\u001b[0m\n>     \u001b[1m\u001b[94m= \u001b[0m\u001b[1mwarning\u001b[0m: this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release!\n>     \u001b[1m\u001b[94m= \u001b[0m\u001b[1mnote\u001b[0m: for more information, see issue #79813 <https://github.com/rust-lang/rust/issues/79813>\n>     \u001b[1m\u001b[94m= \u001b[0m\u001b[1mnote\u001b[0m: macro invocations at the end of a block are treated as expressions\n>     \u001b[1m\u001b[94m= \u001b[0m\u001b[1mnote\u001b[0m: to ignore the value produced by the macro, add a semicolon after the invocation of `take_signed_bits`\n>     \u001b[1m\u001b[94m= \u001b[0m\u001b[1mnote\u001b[0m: this warning originates in the macro `take_signed_bits` which comes from the expansion of the macro `to_custom_error` (in Nightly builds, run with -Z macro-backtrace for more info)\n> \n> \u001b[1m\u001b[33mwarning\u001b[0m\u001b[1m: trailing semicolon in macro used in expression position\u001b[0m\n>    \u001b[1m\u001b[94m--> \u001b[0m/home/yzzhao3/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/flac-0.5.0/src/utility/macros.rs:80:7\n>     \u001b[1m\u001b[94m|\u001b[0m\n>  \u001b[1m\u001b[94m80\u001b[0m \u001b[1m\u001b[94m|\u001b[0m       });\n>     \u001b[1m\u001b[94m|\u001b[0m         \u001b[1m\u001b[33m^\u001b[0m\n>     \u001b[1m\u001b[94m|\u001b[0m\n>    \u001b[1m\u001b[94m::: \u001b[0m/home/yzzhao3/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/flac-0.5.0/src/subframe/parser.rs:216:3\n>     \u001b[1m\u001b[94m|\u001b[0m\n> \u001b[1m\u001b[94m216\u001b[0m \u001b[1m\u001b[94m|\u001b[0m \u001b[1m\u001b[94m/\u001b[0m   to_custom_error!(input,\n> \u001b[1m\u001b[94m217\u001b[0m \u001b[1m\u001b[94m|\u001b[0m \u001b[1m\u001b[94m|\u001b[0m     chain!(\n> \u001b[1m\u001b[94m218\u001b[0m \u001b[1m\u001b[94m|\u001b[0m \u001b[1m\u001b[94m|\u001b[0m       count_slice!(take_signed_bits!(bits_per_sample),\n> \u001b[1m\u001b[94m219\u001b[0m \u001b[1m\u001b[94m|\u001b[0m \u001b[1m\u001b[94m|\u001b[0m                    &mut warmup[0..order]) ~\n> \u001b[1m\u001b[94m...\u001b[0m   \u001b[1m\u001b[94m|\u001b[0m\n> \u001b[1m\u001b[94m238\u001b[0m \u001b[1m\u001b[94m|\u001b[0m \u001b[1m\u001b[94m|\u001b[0m     ),\n> \u001b[1m\u001b[94m239\u001b[0m \u001b[1m\u001b[94m|\u001b[0m \u001b[1m\u001b[94m|\u001b[0m     LPCParser)\n>     \u001b[1m\u001b[94m|\u001b[0m \u001b[1m\u001b[94m|______________-\u001b[0m \u001b[1m\u001b[94min this macro invocation\u001b[0m\n>     \u001b[1m\u001b[94m|\u001b[0m\n>     \u001b[1m\u001b[94m= \u001b[0m\u001b[1mwarning\u001b[0m: this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release!\n>     \u001b[1m\u001b[94m= \u001b[0m\u001b[1mnote\u001b[0m: for more information, see issue #79813 <https://github.com/rust-lang/rust/issues/79813>\n>     \u001b[1m\u001b[94m= \u001b[0m\u001b[1mnote\u001b[0m: macro invocations at the end of a block are treated as expressions\n>     \u001b[1m\u001b[94m= \u001b[0m\u001b[1mnote\u001b[0m: to ignore the value produced by the macro, add a semicolon after the invocation of `take_signed_bits`\n>     \u001b[1m\u001b[94m= \u001b[0m\u001b[1mnote\u001b[0m: this warning originates in the macro `take_signed_bits` which comes from the expansion of the macro `to_custom_error` (in Nightly builds, run with -Z macro-backtrace for more info)\n> \n> \u001b[1m\u001b[33mwarning\u001b[0m\u001b[1m: trailing semicolon in macro used in expression position\u001b[0m\n>    \u001b[1m\u001b[94m--> \u001b[0m/home/yzzhao3/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/flac-0.5.0/src/utility/macros.rs:83:43\n>     \u001b[1m\u001b[94m|\u001b[0m\n>  \u001b[1m\u001b[94m83\u001b[0m \u001b[1m\u001b[94m|\u001b[0m       take_signed_bits!($input, i32, $count);\n>     \u001b[1m\u001b[94m|\u001b[0m                                             \u001b[1m\u001b[33m^\u001b[0m\n>     \u001b[1m\u001b[94m|\u001b[0m\n>    \u001b[1m\u001b[94m::: \u001b[0m/home/yzzhao3/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/flac-0.5.0/src/subframe/parser.rs:216:3\n>     \u001b[1m\u001b[94m|\u001b[0m\n> \u001b[1m\u001b[94m216\u001b[0m \u001b[1m\u001b[94m|\u001b[0m \u001b[1m\u001b[94m/\u001b[0m   to_custom_error!(input,\n> \u001b[1m\u001b[94m217\u001b[0m \u001b[1m\u001b[94m|\u001b[0m \u001b[1m\u001b[94m|\u001b[0m     chain!(\n> \u001b[1m\u001b[94m218\u001b[0m \u001b[1m\u001b[94m|\u001b[0m \u001b[1m\u001b[94m|\u001b[0m       count_slice!(take_signed_bits!(bits_per_sample),\n> \u001b[1m\u001b[94m219\u001b[0m \u001b[1m\u001b[94m|\u001b[0m \u001b[1m\u001b[94m|\u001b[0m                    &mut warmup[0..order]) ~\n> \u001b[1m\u001b[94m...\u001b[0m   \u001b[1m\u001b[94m|\u001b[0m\n> \u001b[1m\u001b[94m238\u001b[0m \u001b[1m\u001b[94m|\u001b[0m \u001b[1m\u001b[94m|\u001b[0m     ),\n> \u001b[1m\u001b[94m239\u001b[0m \u001b[1m\u001b[94m|\u001b[0m \u001b[1m\u001b[94m|\u001b[0m     LPCParser)\n>     \u001b[1m\u001b[94m|\u001b[0m \u001b[1m\u001b[94m|______________-\u001b[0m \u001b[1m\u001b[94min this macro invocation\u001b[0m\n>     \u001b[1m\u001b[94m|\u001b[0m\n>     \u001b[1m\u001b[94m= \u001b[0m\u001b[1mwarning\u001b[0m: this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release!\n>     \u001b[1m\u001b[94m= \u001b[0m\u001b[1mnote\u001b[0m: for more information, see issue #79813 <https://github.com/rust-lang/rust/issues/79813>\n>     \u001b[1m\u001b[94m= \u001b[0m\u001b[1mnote\u001b[0m: macro invocations at the end of a block are treated as expressions\n>     \u001b[1m\u001b[94m= \u001b[0m\u001b[1mnote\u001b[0m: to ignore the value produced by the macro, add a semicolon after the invocation of `take_signed_bits`\n>     \u001b[1m\u001b[94m= \u001b[0m\u001b[1mnote\u001b[0m: this warning originates in the macro `take_signed_bits` which comes from the expansion of the macro `to_custom_error` (in Nightly builds, run with -Z macro-backtrace for more info)\n> \n> \u001b[1m\u001b[33mwarning\u001b[0m\u001b[1m: trailing semicolon in macro used in expression position\u001b[0m\n>    \u001b[1m\u001b[94m--> \u001b[0m/home/yzzhao3/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/flac-0.5.0/src/utility/macros.rs:80:7\n>     \u001b[1m\u001b[94m|\u001b[0m\n>  \u001b[1m\u001b[94m80\u001b[0m \u001b[1m\u001b[94m|\u001b[0m       });\n>     \u001b[1m\u001b[94m|\u001b[0m         \u001b[1m\u001b[33m^\u001b[0m\n>     \u001b[1m\u001b[94m|\u001b[0m\n>    \u001b[1m\u001b[94m::: \u001b[0m/home/yzzhao3/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/flac-0.5.0/src/subframe/parser.rs:216:3\n>     \u001b[1m\u001b[94m|\u001b[0m\n> \u001b[1m\u001b[94m216\u001b[0m \u001b[1m\u001b[94m|\u001b[0m \u001b[1m\u001b[94m/\u001b[0m   to_custom_error!(input,\n> \u001b[1m\u001b[94m217\u001b[0m \u001b[1m\u001b[94m|\u001b[0m \u001b[1m\u001b[94m|\u001b[0m     chain!(\n> \u001b[1m\u001b[94m218\u001b[0m \u001b[1m\u001b[94m|\u001b[0m \u001b[1m\u001b[94m|\u001b[0m       count_slice!(take_signed_bits!(bits_per_sample),\n> \u001b[1m\u001b[94m219\u001b[0m \u001b[1m\u001b[94m|\u001b[0m \u001b[1m\u001b[94m|\u001b[0m                    &mut warmup[0..order]) ~\n> \u001b[1m\u001b[94m...\u001b[0m   \u001b[1m\u001b[94m|\u001b[0m\n> \u001b[1m\u001b[94m238\u001b[0m \u001b[1m\u001b[94m|\u001b[0m \u001b[1m\u001b[94m|\u001b[0m     ),\n> \u001b[1m\u001b[94m239\u001b[0m \u001b[1m\u001b[94m|\u001b[0m \u001b[1m\u001b[94m|\u001b[0m     LPCParser)\n>     \u001b[1m\u001b[94m|\u001b[0m \u001b[1m\u001b[94m|______________-\u001b[0m \u001b[1m\u001b[94min this macro invocation\u001b[0m\n>     \u001b[1m\u001b[94m|\u001b[0m\n>     \u001b[1m\u001b[94m= \u001b[0m\u001b[1mwarning\u001b[0m: this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release!\n>     \u001b[1m\u001b[94m= \u001b[0m\u001b[1mnote\u001b[0m: for more information, see issue #79813 <https://github.com/rust-lang/rust/issues/79813>\n>     \u001b[1m\u001b[94m= \u001b[0m\u001b[1mnote\u001b[0m: macro invocations at the end of a block are treated as expressions\n>     \u001b[1m\u001b[94m= \u001b[0m\u001b[1mnote\u001b[0m: to ignore the value produced by the macro, add a semicolon after the invocation of `take_signed_bits`\n>     \u001b[1m\u001b[94m= \u001b[0m\u001b[1mnote\u001b[0m: this warning originates in the macro `take_signed_bits` which comes from the expansion of the macro `to_custom_error` (in Nightly builds, run with -Z macro-backtrace for more info)\n> \n> \u001b[1m\u001b[33mwarning\u001b[0m\u001b[1m: trailing semicolon in macro used in expression position\u001b[0m\n>    \u001b[1m\u001b[94m--> \u001b[0m/home/yzzhao3/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/flac-0.5.0/src/utility/macros.rs:83:43\n>     \u001b[1m\u001b[94m|\u001b[0m\n>  \u001b[1m\u001b[94m83\u001b[0m \u001b[1m\u001b[94m|\u001b[0m       take_signed_bits!($input, i32, $count);\n>     \u001b[1m\u001b[94m|\u001b[0m                                             \u001b[1m\u001b[33m^\u001b[0m\n>     \u001b[1m\u001b[94m|\u001b[0m\n>    \u001b[1m\u001b[94m::: \u001b[0m/home/yzzhao3/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/flac-0.5.0/src/subframe/parser.rs:246:3\n>     \u001b[1m\u001b[94m|\u001b[0m\n> \u001b[1m\u001b[94m246\u001b[0m \u001b[1m\u001b[94m|\u001b[0m \u001b[1m\u001b[94m/\u001b[0m   map!(input, count!(take_signed_bits!(bits_per_sample), block_size),\n> \u001b[1m\u001b[94m247\u001b[0m \u001b[1m\u001b[94m|\u001b[0m \u001b[1m\u001b[94m|\u001b[0m        subframe::Data::Verbatim)\n>     \u001b[1m\u001b[94m|\u001b[0m \u001b[1m\u001b[94m|________________________________-\u001b[0m \u001b[1m\u001b[94min this macro invocation\u001b[0m\n>     \u001b[1m\u001b[94m|\u001b[0m\n>     \u001b[1m\u001b[94m= \u001b[0m\u001b[1mwarning\u001b[0m: this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release!\n>     \u001b[1m\u001b[94m= \u001b[0m\u001b[1mnote\u001b[0m: for more information, see issue #79813 <https://github.com/rust-lang/rust/issues/79813>\n>     \u001b[1m\u001b[94m= \u001b[0m\u001b[1mnote\u001b[0m: macro invocations at the end of a block are treated as expressions\n>     \u001b[1m\u001b[94m= \u001b[0m\u001b[1mnote\u001b[0m: to ignore the value produced by the macro, add a semicolon after the invocation of `take_signed_bits`\n>     \u001b[1m\u001b[94m= \u001b[0m\u001b[1mnote\u001b[0m: this warning originates in the macro `take_signed_bits` which comes from the expansion of the macro `map` (in Nightly builds, run with -Z macro-backtrace for more info)\n> \n> \u001b[1m\u001b[33mwarning\u001b[0m\u001b[1m: trailing semicolon in macro used in expression position\u001b[0m\n>    \u001b[1m\u001b[94m--> \u001b[0m/home/yzzhao3/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/flac-0.5.0/src/utility/macros.rs:80:7\n>     \u001b[1m\u001b[94m|\u001b[0m\n>  \u001b[1m\u001b[94m80\u001b[0m \u001b[1m\u001b[94m|\u001b[0m       });\n>     \u001b[1m\u001b[94m|\u001b[0m         \u001b[1m\u001b[33m^\u001b[0m\n>     \u001b[1m\u001b[94m|\u001b[0m\n>    \u001b[1m\u001b[94m::: \u001b[0m/home/yzzhao3/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/flac-0.5.0/src/subframe/parser.rs:246:3\n>     \u001b[1m\u001b[94m|\u001b[0m\n> \u001b[1m\u001b[94m246\u001b[0m \u001b[1m\u001b[94m|\u001b[0m \u001b[1m\u001b[94m/\u001b[0m   map!(input, count!(take_signed_bits!(bits_per_sample), block_size),\n> \u001b[1m\u001b[94m247\u001b[0m \u001b[1m\u001b[94m|\u001b[0m \u001b[1m\u001b[94m|\u001b[0m        subframe::Data::Verbatim)\n>     \u001b[1m\u001b[94m|\u001b[0m \u001b[1m\u001b[94m|________________________________-\u001b[0m \u001b[1m\u001b[94min this macro invocation\u001b[0m\n>     \u001b[1m\u001b[94m|\u001b[0m\n>     \u001b[1m\u001b[94m= \u001b[0m\u001b[1mwarning\u001b[0m: this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release!\n>     \u001b[1m\u001b[94m= \u001b[0m\u001b[1mnote\u001b[0m: for more information, see issue #79813 <https://github.com/rust-lang/rust/issues/79813>\n>     \u001b[1m\u001b[94m= \u001b[0m\u001b[1mnote\u001b[0m: macro invocations at the end of a block are treated as expressions\n>     \u001b[1m\u001b[94m= \u001b[0m\u001b[1mnote\u001b[0m: to ignore the value produced by the macro, add a semicolon after the invocation of `take_signed_bits`\n>     \u001b[1m\u001b[94m= \u001b[0m\u001b[1mnote\u001b[0m: this warning originates in the macro `take_signed_bits` which comes from the expansion of the macro `map` (in Nightly builds, run with -Z macro-backtrace for more info)\n> \n> \u001b[1m\u001b[33mwarning\u001b[0m\u001b[1m: trailing semicolon in macro used in expression position\u001b[0m\n>    \u001b[1m\u001b[94m--> \u001b[0m/home/yzzhao3/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/flac-0.5.0/src/utility/macros.rs:83:43\n>     \u001b[1m\u001b[94m|\u001b[0m\n>  \u001b[1m\u001b[94m83\u001b[0m \u001b[1m\u001b[94m|\u001b[0m     take_signed_bits!($input, i32, $count);\n>     \u001b[1m\u001b[94m|\u001b[0m                                           \u001b[1m\u001b[33m^\u001b[0m\n>     \u001b[1m\u001b[94m|\u001b[0m\n>    \u001b[1m\u001b[94m::: \u001b[0m/home/yzzhao3/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/flac-0.5.0/src/subframe/parser.rs:374:11\n>     \u001b[1m\u001b[94m|\u001b[0m\n> \u001b[1m\u001b[94m374\u001b[0m \u001b[1m\u001b[94m|\u001b[0m     match take_signed_bits!(mut_input, bits_per_sample) {\n>     \u001b[1m\u001b[94m|\u001b[0m           \u001b[1m\u001b[94m---------------------------------------------\u001b[0m \u001b[1m\u001b[94min this macro invocation\u001b[0m\n>     \u001b[1m\u001b[94m|\u001b[0m\n>     \u001b[1m\u001b[94m= \u001b[0m\u001b[1mwarning\u001b[0m: this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release!\n>     \u001b[1m\u001b[94m= \u001b[0m\u001b[1mnote\u001b[0m: for more information, see issue #79813 <https://github.com/rust-lang/rust/issues/79813>\n>     \u001b[1m\u001b[94m= \u001b[0m\u001b[1mnote\u001b[0m: this warning originates in the macro `take_signed_bits` (in Nightly builds, run with -Z macro-backtrace for more info)\n> \n> \u001b[1m\u001b[33mwarning\u001b[0m\u001b[1m: trailing semicolon in macro used in expression position\u001b[0m\n>    \u001b[1m\u001b[94m--> \u001b[0m/home/yzzhao3/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/flac-0.5.0/src/utility/macros.rs:80:7\n>     \u001b[1m\u001b[94m|\u001b[0m\n>  \u001b[1m\u001b[94m80\u001b[0m \u001b[1m\u001b[94m|\u001b[0m     });\n>     \u001b[1m\u001b[94m|\u001b[0m       \u001b[1m\u001b[33m^\u001b[0m\n>     \u001b[1m\u001b[94m|\u001b[0m\n>    \u001b[1m\u001b[94m::: \u001b[0m/home/yzzhao3/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/flac-0.5.0/src/subframe/parser.rs:374:11\n>     \u001b[1m\u001b[94m|\u001b[0m\n> \u001b[1m\u001b[94m374\u001b[0m \u001b[1m\u001b[94m|\u001b[0m     match take_signed_bits!(mut_input, bits_per_sample) {\n>     \u001b[1m\u001b[94m|\u001b[0m           \u001b[1m\u001b[94m---------------------------------------------\u001b[0m \u001b[1m\u001b[94min this macro invocation\u001b[0m\n>     \u001b[1m\u001b[94m|\u001b[0m\n>     \u001b[1m\u001b[94m= \u001b[0m\u001b[1mwarning\u001b[0m: this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release!\n>     \u001b[1m\u001b[94m= \u001b[0m\u001b[1mnote\u001b[0m: for more information, see issue #79813 <https://github.com/rust-lang/rust/issues/79813>\n>     \u001b[1m\u001b[94m= \u001b[0m\u001b[1mnote\u001b[0m: this warning originates in the macro `take_signed_bits` (in Nightly builds, run with -Z macro-backtrace for more info)\n> \n> \u001b[1m\u001b[33mwarning\u001b[0m\u001b[1m: trailing semicolon in macro used in expression position\u001b[0m\n>   \u001b[1m\u001b[94m--> \u001b[0m/home/yzzhao3/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/flac-0.5.0/src/utility/macros.rs:28:36\n>    \u001b[1m\u001b[94m|\u001b[0m\n> \u001b[1m\u001b[94m28\u001b[0m \u001b[1m\u001b[94m|\u001b[0m       skip_bytes!($input, $length, 0);\n>    \u001b[1m\u001b[94m|\u001b[0m                                      \u001b[1m\u001b[33m^\u001b[0m\n>    \u001b[1m\u001b[94m|\u001b[0m\n>   \u001b[1m\u001b[94m::: \u001b[0m/home/yzzhao3/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/flac-0.5.0/src/metadata/parser.rs:69:3\n>    \u001b[1m\u001b[94m|\u001b[0m\n> \u001b[1m\u001b[94m69\u001b[0m \u001b[1m\u001b[94m|\u001b[0m \u001b[1m\u001b[94m/\u001b[0m   to_custom_error!(input,\n> \u001b[1m\u001b[94m70\u001b[0m \u001b[1m\u001b[94m|\u001b[0m \u001b[1m\u001b[94m|\u001b[0m     map!(skip_bytes!(length), |_| metadata::Data::Padding(0)),\n> \u001b[1m\u001b[94m71\u001b[0m \u001b[1m\u001b[94m|\u001b[0m \u001b[1m\u001b[94m|\u001b[0m     PaddingParser)\n>    \u001b[1m\u001b[94m|\u001b[0m \u001b[1m\u001b[94m|__________________-\u001b[0m \u001b[1m\u001b[94min this macro invocation\u001b[0m\n>    \u001b[1m\u001b[94m|\u001b[0m\n>    \u001b[1m\u001b[94m= \u001b[0m\u001b[1mwarning\u001b[0m: this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release!\n>    \u001b[1m\u001b[94m= \u001b[0m\u001b[1mnote\u001b[0m: for more information, see issue #79813 <https://github.com/rust-lang/rust/issues/79813>\n>    \u001b[1m\u001b[94m= \u001b[0m\u001b[1mnote\u001b[0m: macro invocations at the end of a block are treated as expressions\n>    \u001b[1m\u001b[94m= \u001b[0m\u001b[1mnote\u001b[0m: to ignore the value produced by the macro, add a semicolon after the invocation of `skip_bytes`\n>    \u001b[1m\u001b[94m= \u001b[0m\u001b[1mnote\u001b[0m: this warning originates in the macro `skip_bytes` which comes from the expansion of the macro `to_custom_error` (in Nightly builds, run with -Z macro-backtrace for more info)\n> \n> \u001b[1m\u001b[33mwarning\u001b[0m\u001b[1m: trailing semicolon in macro used in expression position\u001b[0m\n>    \u001b[1m\u001b[94m--> \u001b[0m/home/yzzhao3/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/flac-0.5.0/src/utility/macros.rs:28:36\n>     \u001b[1m\u001b[94m|\u001b[0m\n>  \u001b[1m\u001b[94m28\u001b[0m \u001b[1m\u001b[94m|\u001b[0m       skip_bytes!($input, $length, 0);\n>     \u001b[1m\u001b[94m|\u001b[0m                                      \u001b[1m\u001b[33m^\u001b[0m\n>     \u001b[1m\u001b[94m|\u001b[0m\n>    \u001b[1m\u001b[94m::: \u001b[0m/home/yzzhao3/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/flac-0.5.0/src/metadata/parser.rs:197:1\n>     \u001b[1m\u001b[94m|\u001b[0m\n> \u001b[1m\u001b[94m197\u001b[0m \u001b[1m\u001b[94m|\u001b[0m \u001b[1m\u001b[94m/\u001b[0m named!(cue_sheet_track_index <&[u8], CueSheetTrackIndex>,\n> \u001b[1m\u001b[94m198\u001b[0m \u001b[1m\u001b[94m|\u001b[0m \u001b[1m\u001b[94m|\u001b[0m   chain!(\n> \u001b[1m\u001b[94m199\u001b[0m \u001b[1m\u001b[94m|\u001b[0m \u001b[1m\u001b[94m|\u001b[0m     offset: be_u64 ~\n> \u001b[1m\u001b[94m200\u001b[0m \u001b[1m\u001b[94m|\u001b[0m \u001b[1m\u001b[94m|\u001b[0m     number: be_u8 ~\n> \u001b[1m\u001b[94m...\u001b[0m   \u001b[1m\u001b[94m|\u001b[0m\n> \u001b[1m\u001b[94m209\u001b[0m \u001b[1m\u001b[94m|\u001b[0m \u001b[1m\u001b[94m|\u001b[0m );\n>     \u001b[1m\u001b[94m|\u001b[0m \u001b[1m\u001b[94m|_-\u001b[0m \u001b[1m\u001b[94min this macro invocation\u001b[0m\n>     \u001b[1m\u001b[94m|\u001b[0m\n>     \u001b[1m\u001b[94m= \u001b[0m\u001b[1mwarning\u001b[0m: this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release!\n>     \u001b[1m\u001b[94m= \u001b[0m\u001b[1mnote\u001b[0m: for more information, see issue #79813 <https://github.com/rust-lang/rust/issues/79813>\n>     \u001b[1m\u001b[94m= \u001b[0m\u001b[1mnote\u001b[0m: macro invocations at the end of a block are treated as expressions\n>     \u001b[1m\u001b[94m= \u001b[0m\u001b[1mnote\u001b[0m: to ignore the value produced by the macro, add a semicolon after the invocation of `skip_bytes`\n>     \u001b[1m\u001b[94m= \u001b[0m\u001b[1mnote\u001b[0m: this warning originates in the macro `skip_bytes` which comes from the expansion of the macro `named` (in Nightly builds, run with -Z macro-backtrace for more info)\n> \n","nom@1.2.4":"The package `nom v1.2.4` currently triggers the following future incompatibility lints:\n> \u001b[1m\u001b[33mwarning\u001b[0m\u001b[1m: trailing semicolon in macro used in expression position\u001b[0m\n>    \u001b[1m\u001b[94m--> \u001b[0m/home/yzzhao3/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/nom-1.2.4/src/macros.rs:482:40\n>     \u001b[1m\u001b[94m|\u001b[0m\n> \u001b[1m\u001b[94m482\u001b[0m \u001b[1m\u001b[94m|\u001b[0m     map_impl!($i, call!($f), call!($g));\n>     \u001b[1m\u001b[94m|\u001b[0m                                        \u001b[1m\u001b[33m^\u001b[0m\n>     \u001b[1m\u001b[94m|\u001b[0m\n>    \u001b[1m\u001b[94m::: \u001b[0m/home/yzzhao3/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/nom-1.2.4/src/nom.rs:329:3\n>     \u001b[1m\u001b[94m|\u001b[0m\n> \u001b[1m\u001b[94m329\u001b[0m \u001b[1m\u001b[94m|\u001b[0m   map!(i, be_u8, | x | { x as i8 })\n>     \u001b[1m\u001b[94m|\u001b[0m   \u001b[1m\u001b[94m---------------------------------\u001b[0m \u001b[1m\u001b[94min this macro invocation\u001b[0m\n>     \u001b[1m\u001b[94m|\u001b[0m\n>     \u001b[1m\u001b[94m= \u001b[0m\u001b[1mwarning\u001b[0m: this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release!\n>     \u001b[1m\u001b[94m= \u001b[0m\u001b[1mnote\u001b[0m: for more information, see issue #79813 <https://github.com/rust-lang/rust/issues/79813>\n>     \u001b[1m\u001b[94m= \u001b[0m\u001b[1mnote\u001b[0m: macro invocations at the end of a block are treated as expressions\n>     \u001b[1m\u001b[94m= \u001b[0m\u001b[1mnote\u001b[0m: to ignore the value produced by the macro, add a semicolon after the invocation of `map`\n>     \u001b[1m\u001b[94m= \u001b[0m\u001b[1mnote\u001b[0m: this warning originates in the macro `map` (in Nightly builds, run with -Z macro-backtrace for more info)\n> \n> \u001b[1m\u001b[33mwarning\u001b[0m\u001b[1m: trailing semicolon in macro used in expression position\u001b[0m\n>    \u001b[1m\u001b[94m--> \u001b[0m/home/yzzhao3/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/nom-1.2.4/src/macros.rs:482:40\n>     \u001b[1m\u001b[94m|\u001b[0m\n> \u001b[1m\u001b[94m482\u001b[0m \u001b[1m\u001b[94m|\u001b[0m     map_impl!($i, call!($f), call!($g));\n>     \u001b[1m\u001b[94m|\u001b[0m                                        \u001b[1m\u001b[33m^\u001b[0m\n>     \u001b[1m\u001b[94m|\u001b[0m\n>    \u001b[1m\u001b[94m::: \u001b[0m/home/yzzhao3/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/nom-1.2.4/src/nom.rs:335:3\n>     \u001b[1m\u001b[94m|\u001b[0m\n> \u001b[1m\u001b[94m335\u001b[0m \u001b[1m\u001b[94m|\u001b[0m   map!(i, be_u16, | x | { x as i16 })\n>     \u001b[1m\u001b[94m|\u001b[0m   \u001b[1m\u001b[94m-----------------------------------\u001b[0m \u001b[1m\u001b[94min this macro invocation\u001b[0m\n>     \u001b[1m\u001b[94m|\u001b[0m\n>     \u001b[1m\u001b[94m= \u001b[0m\u001b[1mwarning\u001b[0m: this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release!\n>     \u001b[1m\u001b[94m= \u001b[0m\u001b[1mnote\u001b[0m: for more information, see issue #79813 <https://github.com/rust-lang/rust/issues/79813>\n>     \u001b[1m\u001b[94m= \u001b[0m\u001b[1mnote\u001b[0m: macro invocations at the end of a block are treated as expressions\n>     \u001b[1m\u001b[94m= \u001b[0m\u001b[1mnote\u001b[0m: to ignore the value produced by the macro, add a semicolon after the invocation of `map`\n>     \u001b[1m\u001b[94m= \u001b[0m\u001b[1mnote\u001b[0m: this warning originates in the macro `map` (in Nightly builds, run with -Z macro-backtrace for more info)\n> \n> \u001b[1m\u001b[33mwarning\u001b[0m\u001b[1m: trailing semicolon in macro used in expression position\u001b[0m\n>    \u001b[1m\u001b[94m--> \u001b[0m/home/yzzhao3/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/nom-1.2.4/src/macros.rs:482:40\n>     \u001b[1m\u001b[94m|\u001b[0m\n> \u001b[1m\u001b[94m482\u001b[0m \u001b[1m\u001b[94m|\u001b[0m     map_impl!($i, call!($f), call!($g));\n>     \u001b[1m\u001b[94m|\u001b[0m                                        \u001b[1m\u001b[33m^\u001b[0m\n>     \u001b[1m\u001b[94m|\u001b[0m\n>    \u001b[1m\u001b[94m::: \u001b[0m/home/yzzhao3/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/nom-1.2.4/src/nom.rs:341:3\n>     \u001b[1m\u001b[94m|\u001b[0m\n> \u001b[1m\u001b[94m341\u001b[0m \u001b[1m\u001b[94m|\u001b[0m   map!(i, be_u32, | x | { x as i32 })\n>     \u001b[1m\u001b[94m|\u001b[0m   \u001b[1m\u001b[94m-----------------------------------\u001b[0m \u001b[1m\u001b[94min this macro invocation\u001b[0m\n>     \u001b[1m\u001b[94m|\u001b[0m\n>     \u001b[1m\u001b[94m= \u001b[0m\u001b[1mwarning\u001b[0m: this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release!\n>     \u001b[1m\u001b[94m= \u001b[0m\u001b[1mnote\u001b[0m: for more information, see issue #79813 <https://github.com/rust-lang/rust/issues/79813>\n>     \u001b[1m\u001b[94m= \u001b[0m\u001b[1mnote\u001b[0m: macro invocations at the end of a block are treated as expressions\n>     \u001b[1m\u001b[94m= \u001b[0m\u001b[1mnote\u001b[0m: to ignore the value produced by the macro, add a semicolon after the invocation of `map`\n>     \u001b[1m\u001b[94m= \u001b[0m\u001b[1mnote\u001b[0m: this warning originates in the macro `map` (in Nightly builds, run with -Z macro-backtrace for more info)\n> \n> \u001b[1m\u001b[33mwarning\u001b[0m\u001b[1m: trailing semicolon in macro used in expression position\u001b[0m\n>    \u001b[1m\u001b[94m--> \u001b[0m/home/yzzhao3/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/nom-1.2.4/src/macros.rs:482:40\n>     \u001b[1m\u001b[94m|\u001b[0m\n> \u001b[1m\u001b[94m482\u001b[0m \u001b[1m\u001b[94m|\u001b[0m     map_impl!($i, call!($f), call!($g));\n>     \u001b[1m\u001b[94m|\u001b[0m                                        \u001b[1m\u001b[33m^\u001b[0m\n>     \u001b[1m\u001b[94m|\u001b[0m\n>    \u001b[1m\u001b[94m::: \u001b[0m/home/yzzhao3/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/nom-1.2.4/src/nom.rs:347:3\n>     \u001b[1m\u001b[94m|\u001b[0m\n> \u001b[1m\u001b[94m347\u001b[0m \u001b[1m\u001b[94m|\u001b[0m   map!(i, be_u64, | x | { x as i64 })\n>     \u001b[1m\u001b[94m|\u001b[0m   \u001b[1m\u001b[94m-----------------------------------\u001b[0m \u001b[1m\u001b[94min this macro invocation\u001b[0m\n>     \u001b[1m\u001b[94m|\u001b[0m\n>     \u001b[1m\u001b[94m= \u001b[0m\u001b[1mwarning\u001b[0m: this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release!\n>     \u001b[1m\u001b[94m= \u001b[0m\u001b[1mnote\u001b[0m: for more information, see issue #79813 <https://github.com/rust-lang/rust/issues/79813>\n>     \u001b[1m\u001b[94m= \u001b[0m\u001b[1mnote\u001b[0m: macro invocations at the end of a block are treated as expressions\n>     \u001b[1m\u001b[94m= \u001b[0m\u001b[1mnote\u001b[0m: to ignore the value produced by the macro, add a semicolon after the invocation of `map`\n>     \u001b[1m\u001b[94m= \u001b[0m\u001b[1mnote\u001b[0m: this warning originates in the macro `map` (in Nightly builds, run with -Z macro-backtrace for more info)\n> \n> \u001b[1m\u001b[33mwarning\u001b[0m\u001b[1m: trailing semicolon in macro used in expression position\u001b[0m\n>    \u001b[1m\u001b[94m--> \u001b[0m/home/yzzhao3/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/nom-1.2.4/src/macros.rs:482:40\n>     \u001b[1m\u001b[94m|\u001b[0m\n> \u001b[1m\u001b[94m482\u001b[0m \u001b[1m\u001b[94m|\u001b[0m     map_impl!($i, call!($f), call!($g));\n>     \u001b[1m\u001b[94m|\u001b[0m                                        \u001b[1m\u001b[33m^\u001b[0m\n>     \u001b[1m\u001b[94m|\u001b[0m\n>    \u001b[1m\u001b[94m::: \u001b[0m/home/yzzhao3/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/nom-1.2.4/src/nom.rs:397:3\n>     \u001b[1m\u001b[94m|\u001b[0m\n> \u001b[1m\u001b[94m397\u001b[0m \u001b[1m\u001b[94m|\u001b[0m   map!(i, le_u8, | x | { x as i8 })\n>     \u001b[1m\u001b[94m|\u001b[0m   \u001b[1m\u001b[94m---------------------------------\u001b[0m \u001b[1m\u001b[94min this macro invocation\u001b[0m\n>     \u001b[1m\u001b[94m|\u001b[0m\n>     \u001b[1m\u001b[94m= \u001b[0m\u001b[1mwarning\u001b[0m: this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release!\n>     \u001b[1m\u001b[94m= \u001b[0m\u001b[1mnote\u001b[0m: for more information, see issue #79813 <https://github.com/rust-lang/rust/issues/79813>\n>     \u001b[1m\u001b[94m= \u001b[0m\u001b[1mnote\u001b[0m: macro invocations at the end of a block are treated as expressions\n>     \u001b[1m\u001b[94m= \u001b[0m\u001b[1mnote\u001b[0m: to ignore the value produced by the macro, add a semicolon after the invocation of `map`\n>     \u001b[1m\u001b[94m= \u001b[0m\u001b[1mnote\u001b[0m: this warning originates in the macro `map` (in Nightly builds, run with -Z macro-backtrace for more info)\n> \n> \u001b[1m\u001b[33mwarning\u001b[0m\u001b[1m: trailing semicolon in macro used in expression position\u001b[0m\n>    \u001b[1m\u001b[94m--> \u001b[0m/home/yzzhao3/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/nom-1.2.4/src/macros.rs:482:40\n>     \u001b[1m\u001b[94m|\u001b[0m\n> \u001b[1m\u001b[94m482\u001b[0m \u001b[1m\u001b[94m|\u001b[0m     map_impl!($i, call!($f), call!($g));\n>     \u001b[1m\u001b[94m|\u001b[0m                                        \u001b[1m\u001b[33m^\u001b[0m\n>     \u001b[1m\u001b[94m|\u001b[0m\n>    \u001b[1m\u001b[94m::: \u001b[0m/home/yzzhao3/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/nom-1.2.4/src/nom.rs:403:3\n>     \u001b[1m\u001b[94m|\u001b[0m\n> \u001b[1m\u001b[94m403\u001b[0m \u001b[1m\u001b[94m|\u001b[0m   map!(i, le_u16, | x | { x as i16 })\n>     \u001b[1m\u001b[94m|\u001b[0m   \u001b[1m\u001b[94m-----------------------------------\u001b[0m \u001b[1m\u001b[94min this macro invocation\u001b[0m\n>     \u001b[1m\u001b[94m|\u001b[0m\n>     \u001b[1m\u001b[94m= \u001b[0m\u001b[1mwarning\u001b[0m: this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release!\n>     \u001b[1m\u001b[94m= \u001b[0m\u001b[1mnote\u001b[0m: for more information, see issue #79813 <https://github.com/rust-lang/rust/issues/79813>\n>     \u001b[1m\u001b[94m= \u001b[0m\u001b[1mnote\u001b[0m: macro invocations at the end of a block are treated as expressions\n>     \u001b[1m\u001b[94m= \u001b[0m\u001b[1mnote\u001b[0m: to ignore the value produced by the macro, add a semicolon after the invocation of `map`\n>     \u001b[1m\u001b[94m= \u001b[0m\u001b[1mnote\u001b[0m: this warning originates in the macro `map` (in Nightly builds, run with -Z macro-backtrace for more info)\n> \n> \u001b[1m\u001b[33mwarning\u001b[0m\u001b[1m: trailing semicolon in macro used in expression position\u001b[0m\n>    \u001b[1m\u001b[94m--> \u001b[0m/home/yzzhao3/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/nom-1.2.4/src/macros.rs:482:40\n>     \u001b[1m\u001b[94m|\u001b[0m\n> \u001b[1m\u001b[94m482\u001b[0m \u001b[1m\u001b[94m|\u001b[0m     map_impl!($i, call!($f), call!($g));\n>     \u001b[1m\u001b[94m|\u001b[0m                                        \u001b[1m\u001b[33m^\u001b[0m\n>     \u001b[1m\u001b[94m|\u001b[0m\n>    \u001b[1m\u001b[94m::: \u001b[0m/home/yzzhao3/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/nom-1.2.4/src/nom.rs:409:3\n>     \u001b[1m\u001b[94m|\u001b[0m\n> \u001b[1m\u001b[94m409\u001b[0m \u001b[1m\u001b[94m|\u001b[0m   map!(i, le_u32, | x | { x as i32 })\n>     \u001b[1m\u001b[94m|\u001b[0m   \u001b[1m\u001b[94m-----------------------------------\u001b[0m \u001b[1m\u001b[94min this macro invocation\u001b[0m\n>     \u001b[1m\u001b[94m|\u001b[0m\n>     \u001b[1m\u001b[94m= \u001b[0m\u001b[1mwarning\u001b[0m: this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release!\n>     \u001b[1m\u001b[94m= \u001b[0m\u001b[1mnote\u001b[0m: for more information, see issue #79813 <https://github.com/rust-lang/rust/issues/79813>\n>     \u001b[1m\u001b[94m= \u001b[0m\u001b[1mnote\u001b[0m: macro invocations at the end of a block are treated as expressions\n>     \u001b[1m\u001b[94m= \u001b[0m\u001b[1mnote\u001b[0m: to ignore the value produced by the macro, add a semicolon after the invocation of `map`\n>     \u001b[1m\u001b[94m= \u001b[0m\u001b[1mnote\u001b[0m: this warning originates in the macro `map` (in Nightly builds, run with -Z macro-backtrace for more info)\n> \n> \u001b[1m\u001b[33mwarning\u001b[0m\u001b[1m: trailing semicolon in macro used in expression position\u001b[0m\n>    \u001b[1m\u001b[94m--> \u001b[0m/home/yzzhao3/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/nom-1.2.4/src/macros.rs:482:40\n>     \u001b[1m\u001b[94m|\u001b[0m\n> \u001b[1m\u001b[94m482\u001b[0m \u001b[1m\u001b[94m|\u001b[0m     map_impl!($i, call!($f), call!($g));\n>     \u001b[1m\u001b[94m|\u001b[0m                                        \u001b[1m\u001b[33m^\u001b[0m\n>     \u001b[1m\u001b[94m|\u001b[0m\n>    \u001b[1m\u001b[94m::: \u001b[0m/home/yzzhao3/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/nom-1.2.4/src/nom.rs:415:3\n>     \u001b[1m\u001b[94m|\u001b[0m\n> \u001b[1m\u001b[94m415\u001b[0m \u001b[1m\u001b[94m|\u001b[0m   map!(i, le_u64, | x | { x as i64 })\n>     \u001b[1m\u001b[94m|\u001b[0m   \u001b[1m\u001b[94m-----------------------------------\u001b[0m \u001b[1m\u001b[94min this macro invocation\u001b[0m\n>     \u001b[1m\u001b[94m|\u001b[0m\n>     \u001b[1m\u001b[94m= \u001b[0m\u001b[1mwarning\u001b[0m: this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release!\n>     \u001b[1m\u001b[94m= \u001b[0m\u001b[1mnote\u001b[0m: for more information, see issue #79813 <https://github.com/rust-lang/rust/issues/79813>\n>     \u001b[1m\u001b[94m= \u001b[0m\u001b[1mnote\u001b[0m: macro invocations at the end of a block are treated as expressions\n>     \u001b[1m\u001b[94m= \u001b[0m\u001b[1mnote\u001b[0m: to ignore the value produced by the macro, add a semicolon after the invocation of `map`\n>     \u001b[1m\u001b[94m= \u001b[0m\u001b[1mnote\u001b[0m: this warning originates in the macro `map` (in Nightly builds, run with -Z macro-backtrace for more info)\n> \n> \u001b[1m\u001b[33mwarning\u001b[0m\u001b[1m: trailing semicolon in macro used in expression position\u001b[0m\n>     \u001b[1m\u001b[94m--> \u001b[0m/home/yzzhao3/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/nom-1.2.4/src/macros.rs:1221:43\n>      \u001b[1m\u001b[94m|\u001b[0m\n> \u001b[1m\u001b[94m1221\u001b[0m \u001b[1m\u001b[94m|\u001b[0m     alt_parser!($i, call!($e) | $($rest)*);\n>      \u001b[1m\u001b[94m|\u001b[0m                                           \u001b[1m\u001b[33m^\u001b[0m\n>      \u001b[1m\u001b[94m|\u001b[0m\n>     \u001b[1m\u001b[94m::: \u001b[0m/home/yzzhao3/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/nom-1.2.4/src/character.rs:135:1\n>      \u001b[1m\u001b[94m|\u001b[0m\n>  \u001b[1m\u001b[94m135\u001b[0m \u001b[1m\u001b[94m|\u001b[0m named!(pub eol<char>, alt!(crlf | newline));\n>      \u001b[1m\u001b[94m|\u001b[0m \u001b[1m\u001b[94m-------------------------------------------\u001b[0m \u001b[1m\u001b[94min this macro invocation\u001b[0m\n>      \u001b[1m\u001b[94m|\u001b[0m\n>      \u001b[1m\u001b[94m= \u001b[0m\u001b[1mwarning\u001b[0m: this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release!\n>      \u001b[1m\u001b[94m= \u001b[0m\u001b[1mnote\u001b[0m: for more information, see issue #79813 <https://github.com/rust-lang/rust/issues/79813>\n>      \u001b[1m\u001b[94m= \u001b[0m\u001b[1mnote\u001b[0m: macro invocations at the end of a block are treated as expressions\n>      \u001b[1m\u001b[94m= \u001b[0m\u001b[1mnote\u001b[0m: to ignore the value produced by the macro, add a semicolon after the invocation of `alt_parser`\n>      \u001b[1m\u001b[94m= \u001b[0m\u001b[1mnote\u001b[0m: this warning originates in the macro `alt_parser` which comes from the expansion of the macro `named` (in Nightly builds, run with -Z macro-backtrace for more info)\n> \n> \u001b[1m\u001b[33mwarning\u001b[0m\u001b[1m: trailing semicolon in macro used in expression position\u001b[0m\n>     \u001b[1m\u001b[94m--> \u001b[0m/home/yzzhao3/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/nom-1.2.4/src/macros.rs:1268:31\n>      \u001b[1m\u001b[94m|\u001b[0m\n> \u001b[1m\u001b[94m1268\u001b[0m \u001b[1m\u001b[94m|\u001b[0m     alt_parser!($i, call!($e));\n>      \u001b[1m\u001b[94m|\u001b[0m                               \u001b[1m\u001b[33m^\u001b[0m\n>      \u001b[1m\u001b[94m|\u001b[0m\n>     \u001b[1m\u001b[94m::: \u001b[0m/home/yzzhao3/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/nom-1.2.4/src/character.rs:135:1\n>      \u001b[1m\u001b[94m|\u001b[0m\n>  \u001b[1m\u001b[94m135\u001b[0m \u001b[1m\u001b[94m|\u001b[0m named!(pub eol<char>, alt!(crlf | newline));\n>      \u001b[1m\u001b[94m|\u001b[0m \u001b[1m\u001b[94m-------------------------------------------\u001b[0m \u001b[1m\u001b[94min this macro invocation\u001b[0m\n>      \u001b[1m\u001b[94m|\u001b[0m\n>      \u001b[1m\u001b[94m= \u001b[0m\u001b[1mwarning\u001b[0m: this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release!\n>      \u001b[1m\u001b[94m= \u001b[0m\u001b[1mnote\u001b[0m: for more information, see issue #79813 <https://github.com/rust-lang/rust/issues/79813>\n>      \u001b[1m\u001b[94m= \u001b[0m\u001b[1mnote\u001b[0m: macro invocations at the end of a block are treated as expressions\n>      \u001b[1m\u001b[94m= \u001b[0m\u001b[1mnote\u001b[0m: to ignore the value produced by the macro, add a semicolon after the invocation of `alt_parser`\n>      \u001b[1m\u001b[94m= \u001b[0m\u001b[1mnote\u001b[0m: this warning originates in the macro `alt_parser` which comes from the expansion of the macro `named` (in Nightly builds, run with -Z macro-backtrace for more info)\n> \n","nom@2.2.1":"The package `nom v2.2.1` currently triggers the following future incompatibility lints:\n> \u001b[1m\u001b[33mwarning\u001b[0m\u001b[1m: trailing semicolon in macro used in expression position\u001b[0m\n>    \u001b[1m\u001b[94m--> \u001b[0m/home/yzzhao3/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/nom-2.2.1/src/macros.rs:514:42\n>     \u001b[1m\u001b[94m|\u001b[0m\n> \u001b[1m\u001b[94m514\u001b[0m \u001b[1m\u001b[94m|\u001b[0m     map!(__impl $i, call!($f), call!($g));\n>     \u001b[1m\u001b[94m|\u001b[0m                                          \u001b[1m\u001b[33m^\u001b[0m\n>     \u001b[1m\u001b[94m|\u001b[0m\n>    \u001b[1m\u001b[94m::: \u001b[0m/home/yzzhao3/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/nom-2.2.1/src/nom.rs:369:3\n>     \u001b[1m\u001b[94m|\u001b[0m\n> \u001b[1m\u001b[94m369\u001b[0m \u001b[1m\u001b[94m|\u001b[0m   map!(i, be_u8, | x | { x as i8 })\n>     \u001b[1m\u001b[94m|\u001b[0m   \u001b[1m\u001b[94m---------------------------------\u001b[0m \u001b[1m\u001b[94min this macro invocation\u001b[0m\n>     \u001b[1m\u001b[94m|\u001b[0m\n>     \u001b[1m\u001b[94m= \u001b[0m\u001b[1mwarning\u001b[0m: this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release!\n>     \u001b[1m\u001b[94m= \u001b[0m\u001b[1mnote\u001b[0m: for more information, see issue #79813 <https://github.com/rust-lang/rust/issues/79813>\n>     \u001b[1m\u001b[94m= \u001b[0m\u001b[1mnote\u001b[0m: macro invocations at the end of a block are treated as expressions\n>     \u001b[1m\u001b[94m= \u001b[0m\u001b[1mnote\u001b[0m: to ignore the value produced by the macro, add a semicolon after the invocation of `map`\n>     \u001b[1m\u001b[94m= \u001b[0m\u001b[1mnote\u001b[0m: this warning originates in the macro `map` (in Nightly builds, run with -Z macro-backtrace for more info)\n> \n> \u001b[1m\u001b[33mwarning\u001b[0m\u001b[1m: trailing semicolon in macro used in expression position\u001b[0m\n>    \u001b[1m\u001b[94m--> \u001b[0m/home/yzzhao3/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/nom-2.2.1/src/macros.rs:514:42\n>     \u001b[1m\u001b[94m|\u001b[0m\n> \u001b[1m\u001b[94m514\u001b[0m \u001b[1m\u001b[94m|\u001b[0m     map!(__impl $i, call!($f), call!($g));\n>     \u001b[1m\u001b[94m|\u001b[0m                                          \u001b[1m\u001b[33m^\u001b[0m\n>     \u001b[1m\u001b[94m|\u001b[0m\n>    \u001b[1m\u001b[94m::: \u001b[0m/home/yzzhao3/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/nom-2.2.1/src/nom.rs:375:3\n>     \u001b[1m\u001b[94m|\u001b[0m\n> \u001b[1m\u001b[94m375\u001b[0m \u001b[1m\u001b[94m|\u001b[0m   map!(i, be_u16, | x | { x as i16 })\n>     \u001b[1m\u001b[94m|\u001b[0m   \u001b[1m\u001b[94m-----------------------------------\u001b[0m \u001b[1m\u001b[94min this macro invocation\u001b[0m\n>     \u001b[1m\u001b[94m|\u001b[0m\n>     \u001b[1m\u001b[94m= \u001b[0m\u001b[1mwarning\u001b[0m: this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release!\n>     \u001b[1m\u001b[94m= \u001b[0m\u001b[1mnote\u001b[0m: for more information, see issue #79813 <https://github.com/rust-lang/rust/issues/79813>\n>     \u001b[1m\u001b[94m= \u001b[0m\u001b[1mnote\u001b[0m: macro invocations at the end of a block are treated as expressions\n>     \u001b[1m\u001b[94m= \u001b[0m\u001b[1mnote\u001b[0m: to ignore the value produced by the macro, add a semicolon after the invocation of `map`\n>     \u001b[1m\u001b[94m= \u001b[0m\u001b[1mnote\u001b[0m: this warning originates in the macro `map` (in Nightly builds, run with -Z macro-backtrace for more info)\n> \n> \u001b[1m\u001b[33mwarning\u001b[0m\u001b[1m: trailing semicolon in macro used in expression position\u001b[0m\n>    \u001b[1m\u001b[94m--> \u001b[0m/home/yzzhao3/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/nom-2.2.1/src/macros.rs:514:42\n>     \u001b[1m\u001b[94m|\u001b[0m\n> \u001b[1m\u001b[94m514\u001b[0m \u001b[1m\u001b[94m|\u001b[0m     map!(__impl $i, call!($f), call!($g));\n>     \u001b[1m\u001b[94m|\u001b[0m                                          \u001b[1m\u001b[33m^\u001b[0m\n>     \u001b[1m\u001b[94m|\u001b[0m\n>    \u001b[1m\u001b[94m::: \u001b[0m/home/yzzhao3/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/nom-2.2.1/src/nom.rs:381:3\n>     \u001b[1m\u001b[94m|\u001b[0m\n> \u001b[1m\u001b[94m381\u001b[0m \u001b[1m\u001b[94m|\u001b[0m   map!(i, be_u32, | x | { x as i32 })\n>     \u001b[1m\u001b[94m|\u001b[0m   \u001b[1m\u001b[94m-----------------------------------\u001b[0m \u001b[1m\u001b[94min this macro invocation\u001b[0m\n>     \u001b[1m\u001b[94m|\u001b[0m\n>     \u001b[1m\u001b[94m= \u001b[0m\u001b[1mwarning\u001b[0m: this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release!\n>     \u001b[1m\u001b[94m= \u001b[0m\u001b[1mnote\u001b[0m: for more information, see issue #79813 <https://github.com/rust-lang/rust/issues/79813>\n>     \u001b[1m\u001b[94m= \u001b[0m\u001b[1mnote\u001b[0m: macro invocations at the end of a block are treated as expressions\n>     \u001b[1m\u001b[94m= \u001b[0m\u001b[1mnote\u001b[0m: to ignore the value produced by the macro, add a semicolon after the invocation of `map`\n>     \u001b[1m\u001b[94m= \u001b[0m\u001b[1mnote\u001b[0m: this warning originates in the macro `map` (in Nightly builds, run with -Z macro-backtrace for more info)\n> \n> \u001b[1m\u001b[33mwarning\u001b[0m\u001b[1m: trailing semicolon in macro used in expression position\u001b[0m\n>    \u001b[1m\u001b[94m--> \u001b[0m/home/yzzhao3/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/nom-2.2.1/src/macros.rs:514:42\n>     \u001b[1m\u001b[94m|\u001b[0m\n> \u001b[1m\u001b[94m514\u001b[0m \u001b[1m\u001b[94m|\u001b[0m     map!(__impl $i, call!($f), call!($g));\n>     \u001b[1m\u001b[94m|\u001b[0m                                          \u001b[1m\u001b[33m^\u001b[0m\n>     \u001b[1m\u001b[94m|\u001b[0m\n>    \u001b[1m\u001b[94m::: \u001b[0m/home/yzzhao3/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/nom-2.2.1/src/nom.rs:387:3\n>     \u001b[1m\u001b[94m|\u001b[0m\n> \u001b[1m\u001b[94m387\u001b[0m \u001b[1m\u001b[94m|\u001b[0m   map!(i, be_u64, | x | { x as i64 })\n>     \u001b[1m\u001b[94m|\u001b[0m   \u001b[1m\u001b[94m-----------------------------------\u001b[0m \u001b[1m\u001b[94min this macro invocation\u001b[0m\n>     \u001b[1m\u001b[94m|\u001b[0m\n>     \u001b[1m\u001b[94m= \u001b[0m\u001b[1mwarning\u001b[0m: this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release!\n>     \u001b[1m\u001b[94m= \u001b[0m\u001b[1mnote\u001b[0m: for more information, see issue #79813 <https://github.com/rust-lang/rust/issues/79813>\n>     \u001b[1m\u001b[94m= \u001b[0m\u001b[1mnote\u001b[0m: macro invocations at the end of a block are treated as expressions\n>     \u001b[1m\u001b[94m= \u001b[0m\u001b[1mnote\u001b[0m: to ignore the value produced by the macro, add a semicolon after the invocation of `map`\n>     \u001b[1m\u001b[94m= \u001b[0m\u001b[1mnote\u001b[0m: this warning originates in the macro `map` (in Nightly builds, run with -Z macro-backtrace for more info)\n> \n> \u001b[1m\u001b[33mwarning\u001b[0m\u001b[1m: trailing semicolon in macro used in expression position\u001b[0m\n>    \u001b[1m\u001b[94m--> \u001b[0m/home/yzzhao3/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/nom-2.2.1/src/macros.rs:514:42\n>     \u001b[1m\u001b[94m|\u001b[0m\n> \u001b[1m\u001b[94m514\u001b[0m \u001b[1m\u001b[94m|\u001b[0m     map!(__impl $i, call!($f), call!($g));\n>     \u001b[1m\u001b[94m|\u001b[0m                                          \u001b[1m\u001b[33m^\u001b[0m\n>     \u001b[1m\u001b[94m|\u001b[0m\n>    \u001b[1m\u001b[94m::: \u001b[0m/home/yzzhao3/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/nom-2.2.1/src/nom.rs:437:3\n>     \u001b[1m\u001b[94m|\u001b[0m\n> \u001b[1m\u001b[94m437\u001b[0m \u001b[1m\u001b[94m|\u001b[0m   map!(i, le_u8, | x | { x as i8 })\n>     \u001b[1m\u001b[94m|\u001b[0m   \u001b[1m\u001b[94m---------------------------------\u001b[0m \u001b[1m\u001b[94min this macro invocation\u001b[0m\n>     \u001b[1m\u001b[94m|\u001b[0m\n>     \u001b[1m\u001b[94m= \u001b[0m\u001b[1mwarning\u001b[0m: this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release!\n>     \u001b[1m\u001b[94m= \u001b[0m\u001b[1mnote\u001b[0m: for more information, see issue #79813 <https://github.com/rust-lang/rust/issues/79813>\n>     \u001b[1m\u001b[94m= \u001b[0m\u001b[1mnote\u001b[0m: macro invocations at the end of a block are treated as expressions\n>     \u001b[1m\u001b[94m= \u001b[0m\u001b[1mnote\u001b[0m: to ignore the value produced by the macro, add a semicolon after the invocation of `map`\n>     \u001b[1m\u001b[94m= \u001b[0m\u001b[1mnote\u001b[0m: this warning originates in the macro `map` (in Nightly builds, run with -Z macro-backtrace for more info)\n> \n> \u001b[1m\u001b[33mwarning\u001b[0m\u001b[1m: trailing semicolon in macro used in expression position\u001b[0m\n>    \u001b[1m\u001b[94m--> \u001b[0m/home/yzzhao3/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/nom-2.2.1/src/macros.rs:514:42\n>     \u001b[1m\u001b[94m|\u001b[0m\n> \u001b[1m\u001b[94m514\u001b[0m \u001b[1m\u001b[94m|\u001b[0m     map!(__impl $i, call!($f), call!($g));\n>     \u001b[1m\u001b[94m|\u001b[0m                                          \u001b[1m\u001b[33m^\u001b[0m\n>     \u001b[1m\u001b[94m|\u001b[0m\n>    \u001b[1m\u001b[94m::: \u001b[0m/home/yzzhao3/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/nom-2.2.1/src/nom.rs:443:3\n>     \u001b[1m\u001b[94m|\u001b[0m\n> \u001b[1m\u001b[94m443\u001b[0m \u001b[1m\u001b[94m|\u001b[0m   map!(i, le_u16, | x | { x as i16 })\n>     \u001b[1m\u001b[94m|\u001b[0m   \u001b[1m\u001b[94m-----------------------------------\u001b[0m \u001b[1m\u001b[94min this macro invocation\u001b[0m\n>     \u001b[1m\u001b[94m|\u001b[0m\n>     \u001b[1m\u001b[94m= \u001b[0m\u001b[1mwarning\u001b[0m: this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release!\n>     \u001b[1m\u001b[94m= \u001b[0m\u001b[1mnote\u001b[0m: for more information, see issue #79813 <https://github.com/rust-lang/rust/issues/79813>\n>     \u001b[1m\u001b[94m= \u001b[0m\u001b[1mnote\u001b[0m: macro invocations at the end of a block are treated as expressions\n>     \u001b[1m\u001b[94m= \u001b[0m\u001b[1mnote\u001b[0m: to ignore the value produced by the macro, add a semicolon after the invocation of `map`\n>     \u001b[1m\u001b[94m= \u001b[0m\u001b[1mnote\u001b[0m: this warning originates in the macro `map` (in Nightly builds, run with -Z macro-backtrace for more info)\n> \n> \u001b[1m\u001b[33mwarning\u001b[0m\u001b[1m: trailing semicolon in macro used in expression position\u001b[0m\n>    \u001b[1m\u001b[94m--> \u001b[0m/home/yzzhao3/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/nom-2.2.1/src/macros.rs:514:42\n>     \u001b[1m\u001b[94m|\u001b[0m\n> \u001b[1m\u001b[94m514\u001b[0m \u001b[1m\u001b[94m|\u001b[0m     map!(__impl $i, call!($f), call!($g));\n>     \u001b[1m\u001b[94m|\u001b[0m                                          \u001b[1m\u001b[33m^\u001b[0m\n>     \u001b[1m\u001b[94m|\u001b[0m\n>    \u001b[1m\u001b[94m::: \u001b[0m/home/yzzhao3/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/nom-2.2.1/src/nom.rs:449:3\n>     \u001b[1m\u001b[94m|\u001b[0m\n> \u001b[1m\u001b[94m449\u001b[0m \u001b[1m\u001b[94m|\u001b[0m   map!(i, le_u32, | x | { x as i32 })\n>     \u001b[1m\u001b[94m|\u001b[0m   \u001b[1m\u001b[94m-----------------------------------\u001b[0m \u001b[1m\u001b[94min this macro invocation\u001b[0m\n>     \u001b[1m\u001b[94m|\u001b[0m\n>     \u001b[1m\u001b[94m= \u001b[0m\u001b[1mwarning\u001b[0m: this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release!\n>     \u001b[1m\u001b[94m= \u001b[0m\u001b[1mnote\u001b[0m: for more information, see issue #79813 <https://github.com/rust-lang/rust/issues/79813>\n>     \u001b[1m\u001b[94m= \u001b[0m\u001b[1mnote\u001b[0m: macro invocations at the end of a block are treated as expressions\n>     \u001b[1m\u001b[94m= \u001b[0m\u001b[1mnote\u001b[0m: to ignore the value produced by the macro, add a semicolon after the invocation of `map`\n>     \u001b[1m\u001b[94m= \u001b[0m\u001b[1mnote\u001b[0m: this warning originates in the macro `map` (in Nightly builds, run with -Z macro-backtrace for more info)\n> \n> \u001b[1m\u001b[33mwarning\u001b[0m\u001b[1m: trailing semicolon in macro used in expression position\u001b[0m\n>    \u001b[1m\u001b[94m--> \u001b[0m/home/yzzhao3/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/nom-2.2.1/src/macros.rs:514:42\n>     \u001b[1m\u001b[94m|\u001b[0m\n> \u001b[1m\u001b[94m514\u001b[0m \u001b[1m\u001b[94m|\u001b[0m     map!(__impl $i, call!($f), call!($g));\n>     \u001b[1m\u001b[94m|\u001b[0m                                          \u001b[1m\u001b[33m^\u001b[0m\n>     \u001b[1m\u001b[94m|\u001b[0m\n>    \u001b[1m\u001b[94m::: \u001b[0m/home/yzzhao3/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/nom-2.2.1/src/nom.rs:455:3\n>     \u001b[1m\u001b[94m|\u001b[0m\n> \u001b[1m\u001b[94m455\u001b[0m \u001b[1m\u001b[94m|\u001b[0m   map!(i, le_u64, | x | { x as i64 })\n>     \u001b[1m\u001b[94m|\u001b[0m   \u001b[1m\u001b[94m-----------------------------------\u001b[0m \u001b[1m\u001b[94min this macro invocation\u001b[0m\n>     \u001b[1m\u001b[94m|\u001b[0m\n>     \u001b[1m\u001b[94m= \u001b[0m\u001b[1mwarning\u001b[0m: this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release!\n>     \u001b[1m\u001b[94m= \u001b[0m\u001b[1mnote\u001b[0m: for more information, see issue #79813 <https://github.com/rust-lang/rust/issues/79813>\n>     \u001b[1m\u001b[94m= \u001b[0m\u001b[1mnote\u001b[0m: macro invocations at the end of a block are treated as expressions\n>     \u001b[1m\u001b[94m= \u001b[0m\u001b[1mnote\u001b[0m: to ignore the value produced by the macro, add a semicolon after the invocation of `map`\n>     \u001b[1m\u001b[94m= \u001b[0m\u001b[1mnote\u001b[0m: this warning originates in the macro `map` (in Nightly builds, run with -Z macro-backtrace for more info)\n> \n> \u001b[1m\u001b[33mwarning\u001b[0m\u001b[1m: trailing semicolon in macro used in expression position\u001b[0m\n>    \u001b[1m\u001b[94m--> \u001b[0m/home/yzzhao3/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/nom-2.2.1/src/sequence.rs:694:41\n>     \u001b[1m\u001b[94m|\u001b[0m\n> \u001b[1m\u001b[94m694\u001b[0m \u001b[1m\u001b[94m|\u001b[0m       delimited!($i, call!($f), $($rest)*);\n>     \u001b[1m\u001b[94m|\u001b[0m                                           \u001b[1m\u001b[33m^\u001b[0m\n>     \u001b[1m\u001b[94m|\u001b[0m\n>    \u001b[1m\u001b[94m::: \u001b[0m/home/yzzhao3/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/nom-2.2.1/src/nom.rs:601:3\n>     \u001b[1m\u001b[94m|\u001b[0m\n> \u001b[1m\u001b[94m601\u001b[0m \u001b[1m\u001b[94m|\u001b[0m \u001b[1m\u001b[94m/\u001b[0m   flat_map!(input,\n> \u001b[1m\u001b[94m602\u001b[0m \u001b[1m\u001b[94m|\u001b[0m \u001b[1m\u001b[94m|\u001b[0m     recognize!(\n> \u001b[1m\u001b[94m603\u001b[0m \u001b[1m\u001b[94m|\u001b[0m \u001b[1m\u001b[94m|\u001b[0m       tuple!(\n> \u001b[1m\u001b[94m604\u001b[0m \u001b[1m\u001b[94m|\u001b[0m \u001b[1m\u001b[94m|\u001b[0m         opt!(alt!(tag!(\"+\") | tag!(\"-\"))),\n> \u001b[1m\u001b[94m...\u001b[0m   \u001b[1m\u001b[94m|\u001b[0m\n> \u001b[1m\u001b[94m617\u001b[0m \u001b[1m\u001b[94m|\u001b[0m \u001b[1m\u001b[94m|\u001b[0m     parse_to!(f32)\n> \u001b[1m\u001b[94m618\u001b[0m \u001b[1m\u001b[94m|\u001b[0m \u001b[1m\u001b[94m|\u001b[0m   )\n>     \u001b[1m\u001b[94m|\u001b[0m \u001b[1m\u001b[94m|___-\u001b[0m \u001b[1m\u001b[94min this macro invocation\u001b[0m\n>     \u001b[1m\u001b[94m|\u001b[0m\n>     \u001b[1m\u001b[94m= \u001b[0m\u001b[1mwarning\u001b[0m: this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release!\n>     \u001b[1m\u001b[94m= \u001b[0m\u001b[1mnote\u001b[0m: for more information, see issue #79813 <https://github.com/rust-lang/rust/issues/79813>\n>     \u001b[1m\u001b[94m= \u001b[0m\u001b[1mnote\u001b[0m: macro invocations at the end of a block are treated as expressions\n>     \u001b[1m\u001b[94m= \u001b[0m\u001b[1mnote\u001b[0m: to ignore the value produced by the macro, add a semicolon after the invocation of `delimited`\n>     \u001b[1m\u001b[94m= \u001b[0m\u001b[1mnote\u001b[0m: this warning originates in the macro `delimited` which comes from the expansion of the macro `flat_map` (in Nightly builds, run with -Z macro-backtrace for more info)\n> \n> \u001b[1m\u001b[33mwarning\u001b[0m\u001b[1m: trailing semicolon in macro used in expression position\u001b[0m\n>    \u001b[1m\u001b[94m--> \u001b[0m/home/yzzhao3/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/nom-2.2.1/src/macros.rs:776:24\n>     \u001b[1m\u001b[94m|\u001b[0m\n> \u001b[1m\u001b[94m776\u001b[0m \u001b[1m\u001b[94m|\u001b[0m       opt!($i, call!($f));\n>     \u001b[1m\u001b[94m|\u001b[0m                          \u001b[1m\u001b[33m^\u001b[0m\n>     \u001b[1m\u001b[94m|\u001b[0m\n>    \u001b[1m\u001b[94m::: \u001b[0m/home/yzzhao3/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/nom-2.2.1/src/nom.rs:601:3\n>     \u001b[1m\u001b[94m|\u001b[0m\n> \u001b[1m\u001b[94m601\u001b[0m \u001b[1m\u001b[94m|\u001b[0m \u001b[1m\u001b[94m/\u001b[0m   flat_map!(input,\n> \u001b[1m\u001b[94m602\u001b[0m \u001b[1m\u001b[94m|\u001b[0m \u001b[1m\u001b[94m|\u001b[0m     recognize!(\n> \u001b[1m\u001b[94m603\u001b[0m \u001b[1m\u001b[94m|\u001b[0m \u001b[1m\u001b[94m|\u001b[0m       tuple!(\n> \u001b[1m\u001b[94m604\u001b[0m \u001b[1m\u001b[94m|\u001b[0m \u001b[1m\u001b[94m|\u001b[0m         opt!(alt!(tag!(\"+\") | tag!(\"-\"))),\n> \u001b[1m\u001b[94m...\u001b[0m   \u001b[1m\u001b[94m|\u001b[0m\n> \u001b[1m\u001b[94m617\u001b[0m \u001b[1m\u001b[94m|\u001b[0m \u001b[1m\u001b[94m|\u001b[0m     parse_to!(f32)\n> \u001b[1m\u001b[94m618\u001b[0m \u001b[1m\u001b[94m|\u001b[0m \u001b[1m\u001b[94m|\u001b[0m   )\n>     \u001b[1m\u001b[94m|\u001b[0m \u001b[1m\u001b[94m|___-\u001b[0m \u001b[1m\u001b[94min this macro invocation\u001b[0m\n>     \u001b[1m\u001b[94m|\u001b[0m\n>     \u001b[1m\u001b[94m= \u001b[0m\u001b[1mwarning\u001b[0m: this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release!\n>     \u001b[1m\u001b[94m= \u001b[0m\u001b[1mnote\u001b[0m: for more information, see issue #79813 <https://github.com/rust-lang/rust/issues/79813>\n>     \u001b[1m\u001b[94m= \u001b[0m\u001b[1mnote\u001b[0m: macro invocations at the end of a block are treated as expressions\n>     \u001b[1m\u001b[94m= \u001b[0m\u001b[1mnote\u001b[0m: to ignore the value produced by the macro, add a semicolon after the invocation of `opt`\n>     \u001b[1m\u001b[94m= \u001b[0m\u001b[1mnote\u001b[0m: this warning originates in the macro `opt` which comes from the expansion of the macro `flat_map` (in Nightly builds, run with -Z macro-backtrace for more info)\n> \n> \u001b[1m\u001b[33mwarning\u001b[0m\u001b[1m: trailing semicolon in macro used in expression position\u001b[0m\n>    \u001b[1m\u001b[94m--> \u001b[0m/home/yzzhao3/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/nom-2.2.1/src/macros.rs:776:24\n>     \u001b[1m\u001b[94m|\u001b[0m\n> \u001b[1m\u001b[94m776\u001b[0m \u001b[1m\u001b[94m|\u001b[0m       opt!($i, call!($f));\n>     \u001b[1m\u001b[94m|\u001b[0m                          \u001b[1m\u001b[33m^\u001b[0m\n>     \u001b[1m\u001b[94m|\u001b[0m\n>    \u001b[1m\u001b[94m::: \u001b[0m/home/yzzhao3/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/nom-2.2.1/src/nom.rs:601:3\n>     \u001b[1m\u001b[94m|\u001b[0m\n> \u001b[1m\u001b[94m601\u001b[0m \u001b[1m\u001b[94m|\u001b[0m \u001b[1m\u001b[94m/\u001b[0m   flat_map!(input,\n> \u001b[1m\u001b[94m602\u001b[0m \u001b[1m\u001b[94m|\u001b[0m \u001b[1m\u001b[94m|\u001b[0m     recognize!(\n> \u001b[1m\u001b[94m603\u001b[0m \u001b[1m\u001b[94m|\u001b[0m \u001b[1m\u001b[94m|\u001b[0m       tuple!(\n> \u001b[1m\u001b[94m604\u001b[0m \u001b[1m\u001b[94m|\u001b[0m \u001b[1m\u001b[94m|\u001b[0m         opt!(alt!(tag!(\"+\") | tag!(\"-\"))),\n> \u001b[1m\u001b[94m...\u001b[0m   \u001b[1m\u001b[94m|\u001b[0m\n> \u001b[1m\u001b[94m617\u001b[0m \u001b[1m\u001b[94m|\u001b[0m \u001b[1m\u001b[94m|\u001b[0m     parse_to!(f32)\n> \u001b[1m\u001b[94m618\u001b[0m \u001b[1m\u001b[94m|\u001b[0m \u001b[1m\u001b[94m|\u001b[0m   )\n>     \u001b[1m\u001b[94m|\u001b[0m \u001b[1m\u001b[94m|___-\u001b[0m \u001b[1m\u001b[94min this macro invocation\u001b[0m\n>     \u001b[1m\u001b[94m|\u001b[0m\n>     \u001b[1m\u001b[94m= \u001b[0m\u001b[1mwarning\u001b[0m: this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release!\n>     \u001b[1m\u001b[94m= \u001b[0m\u001b[1mnote\u001b[0m: for more information, see issue #79813 <https://github.com/rust-lang/rust/issues/79813>\n>     \u001b[1m\u001b[94m= \u001b[0m\u001b[1mnote\u001b[0m: macro invocations at the end of a block are treated as expressions\n>     \u001b[1m\u001b[94m= \u001b[0m\u001b[1mnote\u001b[0m: to ignore the value produced by the macro, add a semicolon after the invocation of `opt`\n>     \u001b[1m\u001b[94m= \u001b[0m\u001b[1mnote\u001b[0m: this warning originates in the macro `opt` which comes from the expansion of the macro `flat_map` (in Nightly builds, run with -Z macro-backtrace for more info)\n> \n> \u001b[1m\u001b[33mwarning\u001b[0m\u001b[1m: trailing semicolon in macro used in expression position\u001b[0m\n>    \u001b[1m\u001b[94m--> \u001b[0m/home/yzzhao3/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/nom-2.2.1/src/sequence.rs:508:60\n>     \u001b[1m\u001b[94m|\u001b[0m\n> \u001b[1m\u001b[94m508\u001b[0m \u001b[1m\u001b[94m|\u001b[0m       tuple_parser!($i, $consumed, ($($parsed),*), call!($e));\n>     \u001b[1m\u001b[94m|\u001b[0m                                                              \u001b[1m\u001b[33m^\u001b[0m\n>     \u001b[1m\u001b[94m|\u001b[0m\n>    \u001b[1m\u001b[94m::: \u001b[0m/home/yzzhao3/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/nom-2.2.1/src/nom.rs:601:3\n>     \u001b[1m\u001b[94m|\u001b[0m\n> \u001b[1m\u001b[94m601\u001b[0m \u001b[1m\u001b[94m|\u001b[0m \u001b[1m\u001b[94m/\u001b[0m   flat_map!(input,\n> \u001b[1m\u001b[94m602\u001b[0m \u001b[1m\u001b[94m|\u001b[0m \u001b[1m\u001b[94m|\u001b[0m     recognize!(\n> \u001b[1m\u001b[94m603\u001b[0m \u001b[1m\u001b[94m|\u001b[0m \u001b[1m\u001b[94m|\u001b[0m       tuple!(\n> \u001b[1m\u001b[94m604\u001b[0m \u001b[1m\u001b[94m|\u001b[0m \u001b[1m\u001b[94m|\u001b[0m         opt!(alt!(tag!(\"+\") | tag!(\"-\"))),\n> \u001b[1m\u001b[94m...\u001b[0m   \u001b[1m\u001b[94m|\u001b[0m\n> \u001b[1m\u001b[94m617\u001b[0m \u001b[1m\u001b[94m|\u001b[0m \u001b[1m\u001b[94m|\u001b[0m     parse_to!(f32)\n> \u001b[1m\u001b[94m618\u001b[0m \u001b[1m\u001b[94m|\u001b[0m \u001b[1m\u001b[94m|\u001b[0m   )\n>     \u001b[1m\u001b[94m|\u001b[0m \u001b[1m\u001b[94m|___-\u001b[0m \u001b[1m\u001b[94min this macro invocation\u001b[0m\n>     \u001b[1m\u001b[94m|\u001b[0m\n>     \u001b[1m\u001b[94m= \u001b[0m\u001b[1mwarning\u001b[0m: this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release!\n>     \u001b[1m\u001b[94m= \u001b[0m\u001b[1mnote\u001b[0m: for more information, see issue #79813 <https://github.com/rust-lang/rust/issues/79813>\n>     \u001b[1m\u001b[94m= \u001b[0m\u001b[1mnote\u001b[0m: macro invocations at the end of a block are treated as expressions\n>     \u001b[1m\u001b[94m= \u001b[0m\u001b[1mnote\u001b[0m: to ignore the value produced by the macro, add a semicolon after the invocation of `tuple_parser`\n>     \u001b[1m\u001b[94m= \u001b[0m\u001b[1mnote\u001b[0m: this warning originates in the macro `tuple_parser` which comes from the expansion of the macro `flat_map` (in Nightly builds, run with -Z macro-backtrace for more info)\n> \n> \u001b[1m\u001b[33mwarning\u001b[0m\u001b[1m: trailing semicolon in macro used in expression position\u001b[0m\n>    \u001b[1m\u001b[94m--> \u001b[0m/home/yzzhao3/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/nom-2.2.1/src/sequence.rs:508:60\n>     \u001b[1m\u001b[94m|\u001b[0m\n> \u001b[1m\u001b[94m508\u001b[0m \u001b[1m\u001b[94m|\u001b[0m       tuple_parser!($i, $consumed, ($($parsed),*), call!($e));\n>     \u001b[1m\u001b[94m|\u001b[0m                                                              \u001b[1m\u001b[33m^\u001b[0m\n>     \u001b[1m\u001b[94m|\u001b[0m\n>    \u001b[1m\u001b[94m::: \u001b[0m/home/yzzhao3/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/nom-2.2.1/src/nom.rs:601:3\n>     \u001b[1m\u001b[94m|\u001b[0m\n> \u001b[1m\u001b[94m601\u001b[0m \u001b[1m\u001b[94m|\u001b[0m \u001b[1m\u001b[94m/\u001b[0m   flat_map!(input,\n> \u001b[1m\u001b[94m602\u001b[0m \u001b[1m\u001b[94m|\u001b[0m \u001b[1m\u001b[94m|\u001b[0m     recognize!(\n> \u001b[1m\u001b[94m603\u001b[0m \u001b[1m\u001b[94m|\u001b[0m \u001b[1m\u001b[94m|\u001b[0m       tuple!(\n> \u001b[1m\u001b[94m604\u001b[0m \u001b[1m\u001b[94m|\u001b[0m \u001b[1m\u001b[94m|\u001b[0m         opt!(alt!(tag!(\"+\") | tag!(\"-\"))),\n> \u001b[1m\u001b[94m...\u001b[0m   \u001b[1m\u001b[94m|\u001b[0m\n> \u001b[1m\u001b[94m617\u001b[0m \u001b[1m\u001b[94m|\u001b[0m \u001b[1m\u001b[94m|\u001b[0m     parse_to!(f32)\n> \u001b[1m\u001b[94m618\u001b[0m \u001b[1m\u001b[94m|\u001b[0m \u001b[1m\u001b[94m|\u001b[0m   )\n>     \u001b[1m\u001b[94m|\u001b[0m \u001b[1m\u001b[94m|___-\u001b[0m \u001b[1m\u001b[94min this macro invocation\u001b[0m\n>     \u001b[1m\u001b[94m|\u001b[0m\n>     \u001b[1m\u001b[94m= \u001b[0m\u001b[1mwarning\u001b[0m: this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release!\n>     \u001b[1m\u001b[94m= \u001b[0m\u001b[1mnote\u001b[0m: for more information, see issue #79813 <https://github.com/rust-lang/rust/issues/79813>\n>     \u001b[1m\u001b[94m= \u001b[0m\u001b[1mnote\u001b[0m: macro invocations at the end of a block are treated as expressions\n>     \u001b[1m\u001b[94m= \u001b[0m\u001b[1mnote\u001b[0m: to ignore the value produced by the macro, add a semicolon after the invocation of `tuple_parser`\n>     \u001b[1m\u001b[94m= \u001b[0m\u001b[1mnote\u001b[0m: this warning originates in the macro `tuple_parser` which comes from the expansion of the macro `flat_map` (in Nightly builds, run with -Z macro-backtrace for more info)\n> \n> \u001b[1m\u001b[33mwarning\u001b[0m\u001b[1m: trailing semicolon in macro used in expression position\u001b[0m\n>    \u001b[1m\u001b[94m--> \u001b[0m/home/yzzhao3/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/nom-2.2.1/src/sequence.rs:694:41\n>     \u001b[1m\u001b[94m|\u001b[0m\n> \u001b[1m\u001b[94m694\u001b[0m \u001b[1m\u001b[94m|\u001b[0m       delimited!($i, call!($f), $($rest)*);\n>     \u001b[1m\u001b[94m|\u001b[0m                                           \u001b[1m\u001b[33m^\u001b[0m\n>     \u001b[1m\u001b[94m|\u001b[0m\n>    \u001b[1m\u001b[94m::: \u001b[0m/home/yzzhao3/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/nom-2.2.1/src/nom.rs:624:3\n>     \u001b[1m\u001b[94m|\u001b[0m\n> \u001b[1m\u001b[94m624\u001b[0m \u001b[1m\u001b[94m|\u001b[0m \u001b[1m\u001b[94m/\u001b[0m   flat_map!(input,\n> \u001b[1m\u001b[94m625\u001b[0m \u001b[1m\u001b[94m|\u001b[0m \u001b[1m\u001b[94m|\u001b[0m     recognize!(\n> \u001b[1m\u001b[94m626\u001b[0m \u001b[1m\u001b[94m|\u001b[0m \u001b[1m\u001b[94m|\u001b[0m       tuple!(\n> \u001b[1m\u001b[94m627\u001b[0m \u001b[1m\u001b[94m|\u001b[0m \u001b[1m\u001b[94m|\u001b[0m         opt!(alt!(tag!(\"+\") | tag!(\"-\"))),\n> \u001b[1m\u001b[94m...\u001b[0m   \u001b[1m\u001b[94m|\u001b[0m\n> \u001b[1m\u001b[94m640\u001b[0m \u001b[1m\u001b[94m|\u001b[0m \u001b[1m\u001b[94m|\u001b[0m     parse_to!(f32)\n> \u001b[1m\u001b[94m641\u001b[0m \u001b[1m\u001b[94m|\u001b[0m \u001b[1m\u001b[94m|\u001b[0m   )\n>     \u001b[1m\u001b[94m|\u001b[0m \u001b[1m\u001b[94m|___-\u001b[0m \u001b[1m\u001b[94min this macro invocation\u001b[0m\n>     \u001b[1m\u001b[94m|\u001b[0m\n>     \u001b[1m\u001b[94m= \u001b[0m\u001b[1mwarning\u001b[0m: this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release!\n>     \u001b[1m\u001b[94m= \u001b[0m\u001b[1mnote\u001b[0m: for more information, see issue #79813 <https://github.com/rust-lang/rust/issues/79813>\n>     \u001b[1m\u001b[94m= \u001b[0m\u001b[1mnote\u001b[0m: macro invocations at the end of a block are treated as expressions\n>     \u001b[1m\u001b[94m= \u001b[0m\u001b[1mnote\u001b[0m: to ignore the value produced by the macro, add a semicolon after the invocation of `delimited`\n>     \u001b[1m\u001b[94m= \u001b[0m\u001b[1mnote\u001b[0m: this warning originates in the macro `delimited` which comes from the expansion of the macro `flat_map` (in Nightly builds, run with -Z macro-backtrace for more info)\n> \n> \u001b[1m\u001b[33mwarning\u001b[0m\u001b[1m: trailing semicolon in macro used in expression position\u001b[0m\n>    \u001b[1m\u001b[94m--> \u001b[0m/home/yzzhao3/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/nom-2.2.1/src/macros.rs:776:24\n>     \u001b[1m\u001b[94m|\u001b[0m\n> \u001b[1m\u001b[94m776\u001b[0m \u001b[1m\u001b[94m|\u001b[0m       opt!($i, call!($f));\n>     \u001b[1m\u001b[94m|\u001b[0m                          \u001b[1m\u001b[33m^\u001b[0m\n>     \u001b[1m\u001b[94m|\u001b[0m\n>    \u001b[1m\u001b[94m::: \u001b[0m/home/yzzhao3/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/nom-2.2.1/src/nom.rs:624:3\n>     \u001b[1m\u001b[94m|\u001b[0m\n> \u001b[1m\u001b[94m624\u001b[0m \u001b[1m\u001b[94m|\u001b[0m \u001b[1m\u001b[94m/\u001b[0m   flat_map!(input,\n> \u001b[1m\u001b[94m625\u001b[0m \u001b[1m\u001b[94m|\u001b[0m \u001b[1m\u001b[94m|\u001b[0m     recognize!(\n> \u001b[1m\u001b[94m626\u001b[0m \u001b[1m\u001b[94m|\u001b[0m \u001b[1m\u001b[94m|\u001b[0m       tuple!(\n> \u001b[1m\u001b[94m627\u001b[0m \u001b[1m\u001b[94m|\u001b[0m \u001b[1m\u001b[94m|\u001b[0m         opt!(alt!(tag!(\"+\") | tag!(\"-\"))),\n> \u001b[1m\u001b[94m...\u001b[0m   \u001b[1m\u001b[94m|\u001b[0m\n> \u001b[1m\u001b[94m640\u001b[0m \u001b[1m\u001b[94m|\u001b[0m \u001b[1m\u001b[94m|\u001b[0m     parse_to!(f32)\n> \u001b[1m\u001b[94m641\u001b[0m \u001b[1m\u001b[94m|\u001b[0m \u001b[1m\u001b[94m|\u001b[0m   )\n>     \u001b[1m\u001b[94m|\u001b[0m \u001b[1m\u001b[94m|___-\u001b[0m \u001b[1m\u001b[94min this macro invocation\u001b[0m\n>     \u001b[1m\u001b[94m|\u001b[0m\n>     \u001b[1m\u001b[94m= \u001b[0m\u001b[1mwarning\u001b[0m: this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release!\n>     \u001b[1m\u001b[94m= \u001b[0m\u001b[1mnote\u001b[0m: for more information, see issue #79813 <https://github.com/rust-lang/rust/issues/79813>\n>     \u001b[1m\u001b[94m= \u001b[0m\u001b[1mnote\u001b[0m: macro invocations at the end of a block are treated as expressions\n>     \u001b[1m\u001b[94m= \u001b[0m\u001b[1mnote\u001b[0m: to ignore the value produced by the macro, add a semicolon after the invocation of `opt`\n>     \u001b[1m\u001b[94m= \u001b[0m\u001b[1mnote\u001b[0m: this warning originates in the macro `opt` which comes from the expansion of the macro `flat_map` (in Nightly builds, run with -Z macro-backtrace for more info)\n> \n> \u001b[1m\u001b[33mwarning\u001b[0m\u001b[1m: trailing semicolon in macro used in expression position\u001b[0m\n>    \u001b[1m\u001b[94m--> \u001b[0m/home/yzzhao3/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/nom-2.2.1/src/macros.rs:776:24\n>     \u001b[1m\u001b[94m|\u001b[0m\n> \u001b[1m\u001b[94m776\u001b[0m \u001b[1m\u001b[94m|\u001b[0m       opt!($i, call!($f));\n>     \u001b[1m\u001b[94m|\u001b[0m                          \u001b[1m\u001b[33m^\u001b[0m\n>     \u001b[1m\u001b[94m|\u001b[0m\n>    \u001b[1m\u001b[94m::: \u001b[0m/home/yzzhao3/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/nom-2.2.1/src/nom.rs:624:3\n>     \u001b[1m\u001b[94m|\u001b[0m\n> \u001b[1m\u001b[94m624\u001b[0m \u001b[1m\u001b[94m|\u001b[0m \u001b[1m\u001b[94m/\u001b[0m   flat_map!(input,\n> \u001b[1m\u001b[94m625\u001b[0m \u001b[1m\u001b[94m|\u001b[0m \u001b[1m\u001b[94m|\u001b[0m     recognize!(\n> \u001b[1m\u001b[94m626\u001b[0m \u001b[1m\u001b[94m|\u001b[0m \u001b[1m\u001b[94m|\u001b[0m       tuple!(\n> \u001b[1m\u001b[94m627\u001b[0m \u001b[1m\u001b[94m|\u001b[0m \u001b[1m\u001b[94m|\u001b[0m         opt!(alt!(tag!(\"+\") | tag!(\"-\"))),\n> \u001b[1m\u001b[94m...\u001b[0m   \u001b[1m\u001b[94m|\u001b[0m\n> \u001b[1m\u001b[94m640\u001b[0m \u001b[1m\u001b[94m|\u001b[0m \u001b[1m\u001b[94m|\u001b[0m     parse_to!(f32)\n> \u001b[1m\u001b[94m641\u001b[0m \u001b[1m\u001b[94m|\u001b[0m \u001b[1m\u001b[94m|\u001b[0m   )\n>     \u001b[1m\u001b[94m|\u001b[0m \u001b[1m\u001b[94m|___-\u001b[0m \u001b[1m\u001b[94min this macro invocation\u001b[0m\n>     \u001b[1m\u001b[94m|\u001b[0m\n>     \u001b[1m\u001b[94m= \u001b[0m\u001b[1mwarning\u001b[0m: this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release!\n>     \u001b[1m\u001b[94m= \u001b[0m\u001b[1mnote\u001b[0m: for more information, see issue #79813 <https://github.com/rust-lang/rust/issues/79813>\n>     \u001b[1m\u001b[94m= \u001b[0m\u001b[1mnote\u001b[0m: macro invocations at the end of a block are treated as expressions\n>     \u001b[1m\u001b[94m= \u001b[0m\u001b[1mnote\u001b[0m: to ignore the value produced by the macro, add a semicolon after the invocation of `opt`\n>     \u001b[1m\u001b[94m= \u001b[0m\u001b[1mnote\u001b[0m: this warning originates in the macro `opt` which comes from the expansion of the macro `flat_map` (in Nightly builds, run with -Z macro-backtrace for more info)\n> \n> \u001b[1m\u001b[33mwarning\u001b[0m\u001b[1m: trailing semicolon in macro used in expression position\u001b[0m\n>    \u001b[1m\u001b[94m--> \u001b[0m/home/yzzhao3/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/nom-2.2.1/src/sequence.rs:508:60\n>     \u001b[1m\u001b[94m|\u001b[0m\n> \u001b[1m\u001b[94m508\u001b[0m \u001b[1m\u001b[94m|\u001b[0m       tuple_parser!($i, $consumed, ($($parsed),*), call!($e));\n>     \u001b[1m\u001b[94m|\u001b[0m                                                              \u001b[1m\u001b[33m^\u001b[0m\n>     \u001b[1m\u001b[94m|\u001b[0m\n>    \u001b[1m\u001b[94m::: \u001b[0m/home/yzzhao3/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/nom-2.2.1/src/nom.rs:624:3\n>     \u001b[1m\u001b[94m|\u001b[0m\n> \u001b[1m\u001b[94m624\u001b[0m \u001b[1m\u001b[94m|\u001b[0m \u001b[1m\u001b[94m/\u001b[0m   flat_map!(input,\n> \u001b[1m\u001b[94m625\u001b[0m \u001b[1m\u001b[94m|\u001b[0m \u001b[1m\u001b[94m|\u001b[0m     recognize!(\n> \u001b[1m\u001b[94m626\u001b[0m \u001b[1m\u001b[94m|\u001b[0m \u001b[1m\u001b[94m|\u001b[0m       tuple!(\n> \u001b[1m\u001b[94m627\u001b[0m \u001b[1m\u001b[94m|\u001b[0m \u001b[1m\u001b[94m|\u001b[0m         opt!(alt!(tag!(\"+\") | tag!(\"-\"))),\n> \u001b[1m\u001b[94m...\u001b[0m   \u001b[1m\u001b[94m|\u001b[0m\n> \u001b[1m\u001b[94m640\u001b[0m \u001b[1m\u001b[94m|\u001b[0m \u001b[1m\u001b[94m|\u001b[0m     parse_to!(f32)\n> \u001b[1m\u001b[94m641\u001b[0m \u001b[1m\u001b[94m|\u001b[0m \u001b[1m\u001b[94m|\u001b[0m   )\n>     \u001b[1m\u001b[94m|\u001b[0m \u001b[1m\u001b[94m|___-\u001b[0m \u001b[1m\u001b[94min this macro invocation\u001b[0m\n>     \u001b[1m\u001b[94m|\u001b[0m\n>     \u001b[1m\u001b[94m= \u001b[0m\u001b[1mwarning\u001b[0m: this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release!\n>     \u001b[1m\u001b[94m= \u001b[0m\u001b[1mnote\u001b[0m: for more information, see issue #79813 <https://github.com/rust-lang/rust/issues/79813>\n>     \u001b[1m\u001b[94m= \u001b[0m\u001b[1mnote\u001b[0m: macro invocations at the end of a block are treated as expressions\n>     \u001b[1m\u001b[94m= \u001b[0m\u001b[1mnote\u001b[0m: to ignore the value produced by the macro, add a semicolon after the invocation of `tuple_parser`\n>     \u001b[1m\u001b[94m= \u001b[0m\u001b[1mnote\u001b[0m: this warning originates in the macro `tuple_parser` which comes from the expansion of the macro `flat_map` (in Nightly builds, run with -Z macro-backtrace for more info)\n> \n> \u001b[1m\u001b[33mwarning\u001b[0m\u001b[1m: trailing semicolon in macro used in expression position\u001b[0m\n>    \u001b[1m\u001b[94m--> \u001b[0m/home/yzzhao3/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/nom-2.2.1/src/sequence.rs:508:60\n>     \u001b[1m\u001b[94m|\u001b[0m\n> \u001b[1m\u001b[94m508\u001b[0m \u001b[1m\u001b[94m|\u001b[0m       tuple_parser!($i, $consumed, ($($parsed),*), call!($e));\n>     \u001b[1m\u001b[94m|\u001b[0m                                                              \u001b[1m\u001b[33m^\u001b[0m\n>     \u001b[1m\u001b[94m|\u001b[0m\n>    \u001b[1m\u001b[94m::: \u001b[0m/home/yzzhao3/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/nom-2.2.1/src/nom.rs:624:3\n>     \u001b[1m\u001b[94m|\u001b[0m\n> \u001b[1m\u001b[94m624\u001b[0m \u001b[1m\u001b[94m|\u001b[0m \u001b[1m\u001b[94m/\u001b[0m   flat_map!(input,\n> \u001b[1m\u001b[94m625\u001b[0m \u001b[1m\u001b[94m|\u001b[0m \u001b[1m\u001b[94m|\u001b[0m     recognize!(\n> \u001b[1m\u001b[94m626\u001b[0m \u001b[1m\u001b[94m|\u001b[0m \u001b[1m\u001b[94m|\u001b[0m       tuple!(\n> \u001b[1m\u001b[94m627\u001b[0m \u001b[1m\u001b[94m|\u001b[0m \u001b[1m\u001b[94m|\u001b[0m         opt!(alt!(tag!(\"+\") | tag!(\"-\"))),\n> \u001b[1m\u001b[94m...\u001b[0m   \u001b[1m\u001b[94m|\u001b[0m\n> \u001b[1m\u001b[94m640\u001b[0m \u001b[1m\u001b[94m|\u001b[0m \u001b[1m\u001b[94m|\u001b[0m     parse_to!(f32)\n> \u001b[1m\u001b[94m641\u001b[0m \u001b[1m\u001b[94m|\u001b[0m \u001b[1m\u001b[94m|\u001b[0m   )\n>     \u001b[1m\u001b[94m|\u001b[0m \u001b[1m\u001b[94m|___-\u001b[0m \u001b[1m\u001b[94min this macro invocation\u001b[0m\n>     \u001b[1m\u001b[94m|\u001b[0m\n>     \u001b[1m\u001b[94m= \u001b[0m\u001b[1mwarning\u001b[0m: this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release!\n>     \u001b[1m\u001b[94m= \u001b[0m\u001b[1mnote\u001b[0m: for more information, see issue #79813 <https://github.com/rust-lang/rust/issues/79813>\n>     \u001b[1m\u001b[94m= \u001b[0m\u001b[1mnote\u001b[0m: macro invocations at the end of a block are treated as expressions\n>     \u001b[1m\u001b[94m= \u001b[0m\u001b[1mnote\u001b[0m: to ignore the value produced by the macro, add a semicolon after the invocation of `tuple_parser`\n>     \u001b[1m\u001b[94m= \u001b[0m\u001b[1mnote\u001b[0m: this warning originates in the macro `tuple_parser` which comes from the expansion of the macro `flat_map` (in Nightly builds, run with -Z macro-backtrace for more info)\n> \n> \u001b[1m\u001b[33mwarning\u001b[0m\u001b[1m: trailing semicolon in macro used in expression position\u001b[0m\n>    \u001b[1m\u001b[94m--> \u001b[0m/home/yzzhao3/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/nom-2.2.1/src/sequence.rs:694:41\n>     \u001b[1m\u001b[94m|\u001b[0m\n> \u001b[1m\u001b[94m694\u001b[0m \u001b[1m\u001b[94m|\u001b[0m       delimited!($i, call!($f), $($rest)*);\n>     \u001b[1m\u001b[94m|\u001b[0m                                           \u001b[1m\u001b[33m^\u001b[0m\n>     \u001b[1m\u001b[94m|\u001b[0m\n>    \u001b[1m\u001b[94m::: \u001b[0m/home/yzzhao3/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/nom-2.2.1/src/nom.rs:647:3\n>     \u001b[1m\u001b[94m|\u001b[0m\n> \u001b[1m\u001b[94m647\u001b[0m \u001b[1m\u001b[94m|\u001b[0m \u001b[1m\u001b[94m/\u001b[0m   flat_map!(input,\n> \u001b[1m\u001b[94m648\u001b[0m \u001b[1m\u001b[94m|\u001b[0m \u001b[1m\u001b[94m|\u001b[0m     recognize!(\n> \u001b[1m\u001b[94m649\u001b[0m \u001b[1m\u001b[94m|\u001b[0m \u001b[1m\u001b[94m|\u001b[0m       tuple!(\n> \u001b[1m\u001b[94m650\u001b[0m \u001b[1m\u001b[94m|\u001b[0m \u001b[1m\u001b[94m|\u001b[0m         opt!(alt!(tag!(\"+\") | tag!(\"-\"))),\n> \u001b[1m\u001b[94m...\u001b[0m   \u001b[1m\u001b[94m|\u001b[0m\n> \u001b[1m\u001b[94m663\u001b[0m \u001b[1m\u001b[94m|\u001b[0m \u001b[1m\u001b[94m|\u001b[0m     parse_to!(f64)\n> \u001b[1m\u001b[94m664\u001b[0m \u001b[1m\u001b[94m|\u001b[0m \u001b[1m\u001b[94m|\u001b[0m   )\n>     \u001b[1m\u001b[94m|\u001b[0m \u001b[1m\u001b[94m|___-\u001b[0m \u001b[1m\u001b[94min this macro invocation\u001b[0m\n>     \u001b[1m\u001b[94m|\u001b[0m\n>     \u001b[1m\u001b[94m= \u001b[0m\u001b[1mwarning\u001b[0m: this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release!\n>     \u001b[1m\u001b[94m= \u001b[0m\u001b[1mnote\u001b[0m: for more information, see issue #79813 <https://github.com/rust-lang/rust/issues/79813>\n>     \u001b[1m\u001b[94m= \u001b[0m\u001b[1mnote\u001b[0m: macro invocations at the end of a block are treated as expressions\n>     \u001b[1m\u001b[94m= \u001b[0m\u001b[1mnote\u001b[0m: to ignore the value produced by the macro, add a semicolon after the invocation of `delimited`\n>     \u001b[1m\u001b[94m= \u001b[0m\u001b[1mnote\u001b[0m: this warning originates in the macro `delimited` which comes from the expansion of the macro `flat_map` (in Nightly builds, run with -Z macro-backtrace for more info)\n> \n> \u001b[1m\u001b[33mwarning\u001b[0m\u001b[1m: trailing semicolon in macro used in expression position\u001b[0m\n>    \u001b[1m\u001b[94m--> \u001b[0m/home/yzzhao3/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/nom-2.2.1/src/macros.rs:776:24\n>     \u001b[1m\u001b[94m|\u001b[0m\n> \u001b[1m\u001b[94m776\u001b[0m \u001b[1m\u001b[94m|\u001b[0m       opt!($i, call!($f));\n>     \u001b[1m\u001b[94m|\u001b[0m                          \u001b[1m\u001b[33m^\u001b[0m\n>     \u001b[1m\u001b[94m|\u001b[0m\n>    \u001b[1m\u001b[94m::: \u001b[0m/home/yzzhao3/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/nom-2.2.1/src/nom.rs:647:3\n>     \u001b[1m\u001b[94m|\u001b[0m\n> \u001b[1m\u001b[94m647\u001b[0m \u001b[1m\u001b[94m|\u001b[0m \u001b[1m\u001b[94m/\u001b[0m   flat_map!(input,\n> \u001b[1m\u001b[94m648\u001b[0m \u001b[1m\u001b[94m|\u001b[0m \u001b[1m\u001b[94m|\u001b[0m     recognize!(\n> \u001b[1m\u001b[94m649\u001b[0m \u001b[1m\u001b[94m|\u001b[0m \u001b[1m\u001b[94m|\u001b[0m       tuple!(\n> \u001b[1m\u001b[94m650\u001b[0m \u001b[1m\u001b[94m|\u001b[0m \u001b[1m\u001b[94m|\u001b[0m         opt!(alt!(tag!(\"+\") | tag!(\"-\"))),\n> \u001b[1m\u001b[94m...\u001b[0m   \u001b[1m\u001b[94m|\u001b[0m\n> \u001b[1m\u001b[94m663\u001b[0m \u001b[1m\u001b[94m|\u001b[0m \u001b[1m\u001b[94m|\u001b[0m     parse_to!(f64)\n> \u001b[1m\u001b[94m664\u001b[0m \u001b[1m\u001b[94m|\u001b[0m \u001b[1m\u001b[94m|\u001b[0m   )\n>     \u001b[1m\u001b[94m|\u001b[0m \u001b[1m\u001b[94m|___-\u001b[0m \u001b[1m\u001b[94min this macro invocation\u001b[0m\n>     \u001b[1m\u001b[94m|\u001b[0m\n>     \u001b[1m\u001b[94m= \u001b[0m\u001b[1mwarning\u001b[0m: this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release!\n>     \u001b[1m\u001b[94m= \u001b[0m\u001b[1mnote\u001b[0m: for more information, see issue #79813 <https://github.com/rust-lang/rust/issues/79813>\n>     \u001b[1m\u001b[94m= \u001b[0m\u001b[1mnote\u001b[0m: macro invocations at the end of a block are treated as expressions\n>     \u001b[1m\u001b[94m= \u001b[0m\u001b[1mnote\u001b[0m: to ignore the value produced by the macro, add a semicolon after the invocation of `opt`\n>     \u001b[1m\u001b[94m= \u001b[0m\u001b[1mnote\u001b[0m: this warning originates in the macro `opt` which comes from the expansion of the macro `flat_map` (in Nightly builds, run with -Z macro-backtrace for more info)\n> \n> \u001b[1m\u001b[33mwarning\u001b[0m\u001b[1m: trailing semicolon in macro used in expression position\u001b[0m\n>    \u001b[1m\u001b[94m--> \u001b[0m/home/yzzhao3/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/nom-2.2.1/src/macros.rs:776:24\n>     \u001b[1m\u001b[94m|\u001b[0m\n> \u001b[1m\u001b[94m776\u001b[0m \u001b[1m\u001b[94m|\u001b[0m       opt!($i, call!($f));\n>     \u001b[1m\u001b[94m|\u001b[0m                          \u001b[1m\u001b[33m^\u001b[0m\n>     \u001b[1m\u001b[94m|\u001b[0m\n>    \u001b[1m\u001b[94m::: \u001b[0m/home/yzzhao3/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/nom-2.2.1/src/nom.rs:647:3\n>     \u001b[1m\u001b[94m|\u001b[0m\n> \u001b[1m\u001b[94m647\u001b[0m \u001b[1m\u001b[94m|\u001b[0m \u001b[1m\u001b[94m/\u001b[0m   flat_map!(input,\n> \u001b[1m\u001b[94m648\u001b[0m \u001b[1m\u001b[94m|\u001b[0m \u001b[1m\u001b[94m|\u001b[0m     recognize!(\n> \u001b[1m\u001b[94m649\u001b[0m \u001b[1m\u001b[94m|\u001b[0m \u001b[1m\u001b[94m|\u001b[0m       tuple!(\n> \u001b[1m\u001b[94m650\u001b[0m \u001b[1m\u001b[94m|\u001b[0m \u001b[1m\u001b[94m|\u001b[0m         opt!(alt!(tag!(\"+\") | tag!(\"-\"))),\n> \u001b[1m\u001b[94m...\u001b[0m   \u001b[1m\u001b[94m|\u001b[0m\n> \u001b[1m\u001b[94m663\u001b[0m \u001b[1m\u001b[94m|\u001b[0m \u001b[1m\u001b[94m|\u001b[0m     parse_to!(f64)\n> \u001b[1m\u001b[94m664\u001b[0m \u001b[1m\u001b[94m|\u001b[0m \u001b[1m\u001b[94m|\u001b[0m   )\n>     \u001b[1m\u001b[94m|\u001b[0m \u001b[1m\u001b[94m|___-\u001b[0m \u001b[1m\u001b[94min this macro invocation\u001b[0m\n>     \u001b[1m\u001b[94m|\u001b[0m\n>     \u001b[1m\u001b[94m= \u001b[0m\u001b[1mwarning\u001b[0m: this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release!\n>     \u001b[1m\u001b[94m= \u001b[0m\u001b[1mnote\u001b[0m: for more information, see issue #79813 <https://github.com/rust-lang/rust/issues/79813>\n>     \u001b[1m\u001b[94m= \u001b[0m\u001b[1mnote\u001b[0m: macro invocations at the end of a block are treated as expressions\n>     \u001b[1m\u001b[94m= \u001b[0m\u001b[1mnote\u001b[0m: to ignore the value produced by the macro, add a semicolon after the invocation of `opt`\n>     \u001b[1m\u001b[94m= \u001b[0m\u001b[1mnote\u001b[0m: this warning originates in the macro `opt` which comes from the expansion of the macro `flat_map` (in Nightly builds, run with -Z macro-backtrace for more info)\n> \n> \u001b[1m\u001b[33mwarning\u001b[0m\u001b[1m: trailing semicolon in macro used in expression position\u001b[0m\n>    \u001b[1m\u001b[94m--> \u001b[0m/home/yzzhao3/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/nom-2.2.1/src/sequence.rs:508:60\n>     \u001b[1m\u001b[94m|\u001b[0m\n> \u001b[1m\u001b[94m508\u001b[0m \u001b[1m\u001b[94m|\u001b[0m       tuple_parser!($i, $consumed, ($($parsed),*), call!($e));\n>     \u001b[1m\u001b[94m|\u001b[0m                                                              \u001b[1m\u001b[33m^\u001b[0m\n>     \u001b[1m\u001b[94m|\u001b[0m\n>    \u001b[1m\u001b[94m::: \u001b[0m/home/yzzhao3/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/nom-2.2.1/src/nom.rs:647:3\n>     \u001b[1m\u001b[94m|\u001b[0m\n> \u001b[1m\u001b[94m647\u001b[0m \u001b[1m\u001b[94m|\u001b[0m \u001b[1m\u001b[94m/\u001b[0m   flat_map!(input,\n> \u001b[1m\u001b[94m648\u001b[0m \u001b[1m\u001b[94m|\u001b[0m \u001b[1m\u001b[94m|\u001b[0m     recognize!(\n> \u001b[1m\u001b[94m649\u001b[0m \u001b[1m\u001b[94m|\u001b[0m \u001b[1m\u001b[94m|\u001b[0m       tuple!(\n> \u001b[1m\u001b[94m650\u001b[0m \u001b[1m\u001b[94m|\u001b[0m \u001b[1m\u001b[94m|\u001b[0m         opt!(alt!(tag!(\"+\") | tag!(\"-\"))),\n> \u001b[1m\u001b[94m...\u001b[0m   \u001b[1m\u001b[94m|\u001b[0m\n> \u001b[1m\u001b[94m663\u001b[0m \u001b[1m\u001b[94m|\u001b[0m \u001b[1m\u001b[94m|\u001b[0m     parse_to!(f64)\n> \u001b[1m\u001b[94m664\u001b[0m \u001b[1m\u001b[94m|\u001b[0m \u001b[1m\u001b[94m|\u001b[0m   )\n>     \u001b[1m\u001b[94m|\u001b[0m \u001b[1m\u001b[94m|___-\u001b[0m \u001b[1m\u001b[94min this macro invocation\u001b[0m\n>     \u001b[1m\u001b[94m|\u001b[0m\n>     \u001b[1m\u001b[94m= \u001b[0m\u001b[1mwarning\u001b[0m: this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release!\n>     \u001b[1m\u001b[94m= \u001b[0m\u001b[1mnote\u001b[0m: for more information, see issue #79813 <https://github.com/rust-lang/rust/issues/79813>\n>     \u001b[1m\u001b[94m= \u001b[0m\u001b[1mnote\u001b[0m: macro invocations at the end of a block are treated as expressions\n>     \u001b[1m\u001b[94m= \u001b[0m\u001b[1mnote\u001b[0m: to ignore the value produced by the macro, add a semicolon after the invocation of `tuple_parser`\n>     \u001b[1m\u001b[94m= \u001b[0m\u001b[1mnote\u001b[0m: this warning originates in the macro `tuple_parser` which comes from the expansion of the macro `flat_map` (in Nightly builds, run with -Z macro-backtrace for more info)\n> \n> \u001b[1m\u001b[33mwarning\u001b[0m\u001b[1m: trailing semicolon in macro used in expression position\u001b[0m\n>    \u001b[1m\u001b[94m--> \u001b[0m/home/yzzhao3/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/nom-2.2.1/src/sequence.rs:508:60\n>     \u001b[1m\u001b[94m|\u001b[0m\n> \u001b[1m\u001b[94m508\u001b[0m \u001b[1m\u001b[94m|\u001b[0m       tuple_parser!($i, $consumed, ($($parsed),*), call!($e));\n>     \u001b[1m\u001b[94m|\u001b[0m                                                              \u001b[1m\u001b[33m^\u001b[0m\n>     \u001b[1m\u001b[94m|\u001b[0m\n>    \u001b[1m\u001b[94m::: \u001b[0m/home/yzzhao3/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/nom-2.2.1/src/nom.rs:647:3\n>     \u001b[1m\u001b[94m|\u001b[0m\n> \u001b[1m\u001b[94m647\u001b[0m \u001b[1m\u001b[94m|\u001b[0m \u001b[1m\u001b[94m/\u001b[0m   flat_map!(input,\n> \u001b[1m\u001b[94m648\u001b[0m \u001b[1m\u001b[94m|\u001b[0m \u001b[1m\u001b[94m|\u001b[0m     recognize!(\n> \u001b[1m\u001b[94m649\u001b[0m \u001b[1m\u001b[94m|\u001b[0m \u001b[1m\u001b[94m|\u001b[0m       tuple!(\n> \u001b[1m\u001b[94m650\u001b[0m \u001b[1m\u001b[94m|\u001b[0m \u001b[1m\u001b[94m|\u001b[0m         opt!(alt!(tag!(\"+\") | tag!(\"-\"))),\n> \u001b[1m\u001b[94m...\u001b[0m   \u001b[1m\u001b[94m|\u001b[0m\n> \u001b[1m\u001b[94m663\u001b[0m \u001b[1m\u001b[94m|\u001b[0m \u001b[1m\u001b[94m|\u001b[0m     parse_to!(f64)\n> \u001b[1m\u001b[94m664\u001b[0m \u001b[1m\u001b[94m|\u001b[0m \u001b[1m\u001b[94m|\u001b[0m   )\n>     \u001b[1m\u001b[94m|\u001b[0m \u001b[1m\u001b[94m|___-\u001b[0m \u001b[1m\u001b[94min this macro invocation\u001b[0m\n>     \u001b[1m\u001b[94m|\u001b[0m\n>     \u001b[1m\u001b[94m= \u001b[0m\u001b[1mwarning\u001b[0m: this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release!\n>     \u001b[1m\u001b[94m= \u001b[0m\u001b[1mnote\u001b[0m: for more information, see issue #79813 <https://github.com/rust-lang/rust/issues/79813>\n>     \u001b[1m\u001b[94m= \u001b[0m\u001b[1mnote\u001b[0m: macro invocations at the end of a block are treated as expressions\n>     \u001b[1m\u001b[94m= \u001b[0m\u001b[1mnote\u001b[0m: to ignore the value produced by the macro, add a semicolon after the invocation of `tuple_parser`\n>     \u001b[1m\u001b[94m= \u001b[0m\u001b[1mnote\u001b[0m: this warning originates in the macro `tuple_parser` which comes from the expansion of the macro `flat_map` (in Nightly builds, run with -Z macro-backtrace for more info)\n> \n> \u001b[1m\u001b[33mwarning\u001b[0m\u001b[1m: trailing semicolon in macro used in expression position\u001b[0m\n>    \u001b[1m\u001b[94m--> \u001b[0m/home/yzzhao3/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/nom-2.2.1/src/sequence.rs:694:41\n>     \u001b[1m\u001b[94m|\u001b[0m\n> \u001b[1m\u001b[94m694\u001b[0m \u001b[1m\u001b[94m|\u001b[0m       delimited!($i, call!($f), $($rest)*);\n>     \u001b[1m\u001b[94m|\u001b[0m                                           \u001b[1m\u001b[33m^\u001b[0m\n>     \u001b[1m\u001b[94m|\u001b[0m\n>    \u001b[1m\u001b[94m::: \u001b[0m/home/yzzhao3/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/nom-2.2.1/src/nom.rs:670:3\n>     \u001b[1m\u001b[94m|\u001b[0m\n> \u001b[1m\u001b[94m670\u001b[0m \u001b[1m\u001b[94m|\u001b[0m \u001b[1m\u001b[94m/\u001b[0m   flat_map!(input,\n> \u001b[1m\u001b[94m671\u001b[0m \u001b[1m\u001b[94m|\u001b[0m \u001b[1m\u001b[94m|\u001b[0m     recognize!(\n> \u001b[1m\u001b[94m672\u001b[0m \u001b[1m\u001b[94m|\u001b[0m \u001b[1m\u001b[94m|\u001b[0m       tuple!(\n> \u001b[1m\u001b[94m673\u001b[0m \u001b[1m\u001b[94m|\u001b[0m \u001b[1m\u001b[94m|\u001b[0m         opt!(alt!(tag!(\"+\") | tag!(\"-\"))),\n> \u001b[1m\u001b[94m...\u001b[0m   \u001b[1m\u001b[94m|\u001b[0m\n> \u001b[1m\u001b[94m686\u001b[0m \u001b[1m\u001b[94m|\u001b[0m \u001b[1m\u001b[94m|\u001b[0m     parse_to!(f64)\n> \u001b[1m\u001b[94m687\u001b[0m \u001b[1m\u001b[94m|\u001b[0m \u001b[1m\u001b[94m|\u001b[0m   )\n>     \u001b[1m\u001b[94m|\u001b[0m \u001b[1m\u001b[94m|___-\u001b[0m \u001b[1m\u001b[94min this macro invocation\u001b[0m\n>     \u001b[1m\u001b[94m|\u001b[0m\n>     \u001b[1m\u001b[94m= \u001b[0m\u001b[1mwarning\u001b[0m: this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release!\n>     \u001b[1m\u001b[94m= \u001b[0m\u001b[1mnote\u001b[0m: for more information, see issue #79813 <https://github.com/rust-lang/rust/issues/79813>\n>     \u001b[1m\u001b[94m= \u001b[0m\u001b[1mnote\u001b[0m: macro invocations at the end of a block are treated as expressions\n>     \u001b[1m\u001b[94m= \u001b[0m\u001b[1mnote\u001b[0m: to ignore the value produced by the macro, add a semicolon after the invocation of `delimited`\n>     \u001b[1m\u001b[94m= \u001b[0m\u001b[1mnote\u001b[0m: this warning originates in the macro `delimited` which comes from the expansion of the macro `flat_map` (in Nightly builds, run with -Z macro-backtrace for more info)\n> \n> \u001b[1m\u001b[33mwarning\u001b[0m\u001b[1m: trailing semicolon in macro used in expression position\u001b[0m\n>    \u001b[1m\u001b[94m--> \u001b[0m/home/yzzhao3/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/nom-2.2.1/src/macros.rs:776:24\n>     \u001b[1m\u001b[94m|\u001b[0m\n> \u001b[1m\u001b[94m776\u001b[0m \u001b[1m\u001b[94m|\u001b[0m       opt!($i, call!($f));\n>     \u001b[1m\u001b[94m|\u001b[0m                          \u001b[1m\u001b[33m^\u001b[0m\n>     \u001b[1m\u001b[94m|\u001b[0m\n>    \u001b[1m\u001b[94m::: \u001b[0m/home/yzzhao3/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/nom-2.2.1/src/nom.rs:670:3\n>     \u001b[1m\u001b[94m|\u001b[0m\n> \u001b[1m\u001b[94m670\u001b[0m \u001b[1m\u001b[94m|\u001b[0m \u001b[1m\u001b[94m/\u001b[0m   flat_map!(input,\n> \u001b[1m\u001b[94m671\u001b[0m \u001b[1m\u001b[94m|\u001b[0m \u001b[1m\u001b[94m|\u001b[0m     recognize!(\n> \u001b[1m\u001b[94m672\u001b[0m \u001b[1m\u001b[94m|\u001b[0m \u001b[1m\u001b[94m|\u001b[0m       tuple!(\n> \u001b[1m\u001b[94m673\u001b[0m \u001b[1m\u001b[94m|\u001b[0m \u001b[1m\u001b[94m|\u001b[0m         opt!(alt!(tag!(\"+\") | tag!(\"-\"))),\n> \u001b[1m\u001b[94m...\u001b[0m   \u001b[1m\u001b[94m|\u001b[0m\n> \u001b[1m\u001b[94m686\u001b[0m \u001b[1m\u001b[94m|\u001b[0m \u001b[1m\u001b[94m|\u001b[0m     parse_to!(f64)\n> \u001b[1m\u001b[94m687\u001b[0m \u001b[1m\u001b[94m|\u001b[0m \u001b[1m\u001b[94m|\u001b[0m   )\n>     \u001b[1m\u001b[94m|\u001b[0m \u001b[1m\u001b[94m|___-\u001b[0m \u001b[1m\u001b[94min this macro invocation\u001b[0m\n>     \u001b[1m\u001b[94m|\u001b[0m\n>     \u001b[1m\u001b[94m= \u001b[0m\u001b[1mwarning\u001b[0m: this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release!\n>     \u001b[1m\u001b[94m= \u001b[0m\u001b[1mnote\u001b[0m: for more information, see issue #79813 <https://github.com/rust-lang/rust/issues/79813>\n>     \u001b[1m\u001b[94m= \u001b[0m\u001b[1mnote\u001b[0m: macro invocations at the end of a block are treated as expressions\n>     \u001b[1m\u001b[94m= \u001b[0m\u001b[1mnote\u001b[0m: to ignore the value produced by the macro, add a semicolon after the invocation of `opt`\n>     \u001b[1m\u001b[94m= \u001b[0m\u001b[1mnote\u001b[0m: this warning originates in the macro `opt` which comes from the expansion of the macro `flat_map` (in Nightly builds, run with -Z macro-backtrace for more info)\n> \n> \u001b[1m\u001b[33mwarning\u001b[0m\u001b[1m: trailing semicolon in macro used in expression position\u001b[0m\n>    \u001b[1m\u001b[94m--> \u001b[0m/home/yzzhao3/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/nom-2.2.1/src/macros.rs:776:24\n>     \u001b[1m\u001b[94m|\u001b[0m\n> \u001b[1m\u001b[94m776\u001b[0m \u001b[1m\u001b[94m|\u001b[0m       opt!($i, call!($f));\n>     \u001b[1m\u001b[94m|\u001b[0m                          \u001b[1m\u001b[33m^\u001b[0m\n>     \u001b[1m\u001b[94m|\u001b[0m\n>    \u001b[1m\u001b[94m::: \u001b[0m/home/yzzhao3/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/nom-2.2.1/src/nom.rs:670:3\n>     \u001b[1m\u001b[94m|\u001b[0m\n> \u001b[1m\u001b[94m670\u001b[0m \u001b[1m\u001b[94m|\u001b[0m \u001b[1m\u001b[94m/\u001b[0m   flat_map!(input,\n> \u001b[1m\u001b[94m671\u001b[0m \u001b[1m\u001b[94m|\u001b[0m \u001b[1m\u001b[94m|\u001b[0m     recognize!(\n> \u001b[1m\u001b[94m672\u001b[0m \u001b[1m\u001b[94m|\u001b[0m \u001b[1m\u001b[94m|\u001b[0m       tuple!(\n> \u001b[1m\u001b[94m673\u001b[0m \u001b[1m\u001b[94m|\u001b[0m \u001b[1m\u001b[94m|\u001b[0m         opt!(alt!(tag!(\"+\") | tag!(\"-\"))),\n> \u001b[1m\u001b[94m...\u001b[0m   \u001b[1m\u001b[94m|\u001b[0m\n> \u001b[1m\u001b[94m686\u001b[0m \u001b[1m\u001b[94m|\u001b[0m \u001b[1m\u001b[94m|\u001b[0m     parse_to!(f64)\n> \u001b[1m\u001b[94m687\u001b[0m \u001b[1m\u001b[94m|\u001b[0m \u001b[1m\u001b[94m|\u001b[0m   )\n>     \u001b[1m\u001b[94m|\u001b[0m \u001b[1m\u001b[94m|___-\u001b[0m \u001b[1m\u001b[94min this macro invocation\u001b[0m\n>     \u001b[1m\u001b[94m|\u001b[0m\n>     \u001b[1m\u001b[94m= \u001b[0m\u001b[1mwarning\u001b[0m: this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release!\n>     \u001b[1m\u001b[94m= \u001b[0m\u001b[1mnote\u001b[0m: for more information, see issue #79813 <https://github.com/rust-lang/rust/issues/79813>\n>     \u001b[1m\u001b[94m= \u001b[0m\u001b[1mnote\u001b[0m: macro invocations at the end of a block are treated as expressions\n>     \u001b[1m\u001b[94m= \u001b[0m\u001b[1mnote\u001b[0m: to ignore the value produced by the macro, add a semicolon after the invocation of `opt`\n>     \u001b[1m\u001b[94m= \u001b[0m\u001b[1mnote\u001b[0m: this warning originates in the macro `opt` which comes from the expansion of the macro `flat_map` (in Nightly builds, run with -Z macro-backtrace for more info)\n> \n> \u001b[1m\u001b[33mwarning\u001b[0m\u001b[1m: trailing semicolon in macro used in expression position\u001b[0m\n>    \u001b[1m\u001b[94m--> \u001b[0m/home/yzzhao3/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/nom-2.2.1/src/sequence.rs:508:60\n>     \u001b[1m\u001b[94m|\u001b[0m\n> \u001b[1m\u001b[94m508\u001b[0m \u001b[1m\u001b[94m|\u001b[0m       tuple_parser!($i, $consumed, ($($parsed),*), call!($e));\n>     \u001b[1m\u001b[94m|\u001b[0m                                                              \u001b[1m\u001b[33m^\u001b[0m\n>     \u001b[1m\u001b[94m|\u001b[0m\n>    \u001b[1m\u001b[94m::: \u001b[0m/home/yzzhao3/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/nom-2.2.1/src/nom.rs:670:3\n>     \u001b[1m\u001b[94m|\u001b[0m\n> \u001b[1m\u001b[94m670\u001b[0m \u001b[1m\u001b[94m|\u001b[0m \u001b[1m\u001b[94m/\u001b[0m   flat_map!(input,\n> \u001b[1m\u001b[94m671\u001b[0m \u001b[1m\u001b[94m|\u001b[0m \u001b[1m\u001b[94m|\u001b[0m     recognize!(\n> \u001b[1m\u001b[94m672\u001b[0m \u001b[1m\u001b[94m|\u001b[0m \u001b[1m\u001b[94m|\u001b[0m       tuple!(\n> \u001b[1m\u001b[94m673\u001b[0m \u001b[1m\u001b[94m|\u001b[0m \u001b[1m\u001b[94m|\u001b[0m         opt!(alt!(tag!(\"+\") | tag!(\"-\"))),\n> \u001b[1m\u001b[94m...\u001b[0m   \u001b[1m\u001b[94m|\u001b[0m\n> \u001b[1m\u001b[94m686\u001b[0m \u001b[1m\u001b[94m|\u001b[0m \u001b[1m\u001b[94m|\u001b[0m     parse_to!(f64)\n> \u001b[1m\u001b[94m687\u001b[0m \u001b[1m\u001b[94m|\u001b[0m \u001b[1m\u001b[94m|\u001b[0m   )\n>     \u001b[1m\u001b[94m|\u001b[0m \u001b[1m\u001b[94m|___-\u001b[0m \u001b[1m\u001b[94min this macro invocation\u001b[0m\n>     \u001b[1m\u001b[94m|\u001b[0m\n>     \u001b[1m\u001b[94m= \u001b[0m\u001b[1mwarning\u001b[0m: this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release!\n>     \u001b[1m\u001b[94m= \u001b[0m\u001b[1mnote\u001b[0m: for more information, see issue #79813 <https://github.com/rust-lang/rust/issues/79813>\n>     \u001b[1m\u001b[94m= \u001b[0m\u001b[1mnote\u001b[0m: macro invocations at the end of a block are treated as expressions\n>     \u001b[1m\u001b[94m= \u001b[0m\u001b[1mnote\u001b[0m: to ignore the value produced by the macro, add a semicolon after the invocation of `tuple_parser`\n>     \u001b[1m\u001b[94m= \u001b[0m\u001b[1mnote\u001b[0m: this warning originates in the macro `tuple_parser` which comes from the expansion of the macro `flat_map` (in Nightly builds, run with -Z macro-backtrace for more info)\n> \n> \u001b[1m\u001b[33mwarning\u001b[0m\u001b[1m: trailing semicolon in macro used in expression position\u001b[0m\n>    \u001b[1m\u001b[94m--> \u001b[0m/home/yzzhao3/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/nom-2.2.1/src/sequence.rs:508:60\n>     \u001b[1m\u001b[94m|\u001b[0m\n> \u001b[1m\u001b[94m508\u001b[0m \u001b[1m\u001b[94m|\u001b[0m       tuple_parser!($i, $consumed, ($($parsed),*), call!($e));\n>     \u001b[1m\u001b[94m|\u001b[0m                                                              \u001b[1m\u001b[33m^\u001b[0m\n>     \u001b[1m\u001b[94m|\u001b[0m\n>    \u001b[1m\u001b[94m::: \u001b[0m/home/yzzhao3/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/nom-2.2.1/src/nom.rs:670:3\n>     \u001b[1m\u001b[94m|\u001b[0m\n> \u001b[1m\u001b[94m670\u001b[0m \u001b[1m\u001b[94m|\u001b[0m \u001b[1m\u001b[94m/\u001b[0m   flat_map!(input,\n> \u001b[1m\u001b[94m671\u001b[0m \u001b[1m\u001b[94m|\u001b[0m \u001b[1m\u001b[94m|\u001b[0m     recognize!(\n> \u001b[1m\u001b[94m672\u001b[0m \u001b[1m\u001b[94m|\u001b[0m \u001b[1m\u001b[94m|\u001b[0m       tuple!(\n> \u001b[1m\u001b[94m673\u001b[0m \u001b[1m\u001b[94m|\u001b[0m \u001b[1m\u001b[94m|\u001b[0m         opt!(alt!(tag!(\"+\") | tag!(\"-\"))),\n> \u001b[1m\u001b[94m...\u001b[0m   \u001b[1m\u001b[94m|\u001b[0m\n> \u001b[1m\u001b[94m686\u001b[0m \u001b[1m\u001b[94m|\u001b[0m \u001b[1m\u001b[94m|\u001b[0m     parse_to!(f64)\n> \u001b[1m\u001b[94m687\u001b[0m \u001b[1m\u001b[94m|\u001b[0m \u001b[1m\u001b[94m|\u001b[0m   )\n>     \u001b[1m\u001b[94m|\u001b[0m \u001b[1m\u001b[94m|___-\u001b[0m \u001b[1m\u001b[94min this macro invocation\u001b[0m\n>     \u001b[1m\u001b[94m|\u001b[0m\n>     \u001b[1m\u001b[94m= \u001b[0m\u001b[1mwarning\u001b[0m: this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release!\n>     \u001b[1m\u001b[94m= \u001b[0m\u001b[1mnote\u001b[0m: for more information, see issue #79813 <https://github.com/rust-lang/rust/issues/79813>\n>     \u001b[1m\u001b[94m= \u001b[0m\u001b[1mnote\u001b[0m: macro invocations at the end of a block are treated as expressions\n>     \u001b[1m\u001b[94m= \u001b[0m\u001b[1mnote\u001b[0m: to ignore the value produced by the macro, add a semicolon after the invocation of `tuple_parser`\n>     \u001b[1m\u001b[94m= \u001b[0m\u001b[1mnote\u001b[0m: this warning originates in the macro `tuple_parser` which comes from the expansion of the macro `flat_map` (in Nightly builds, run with -Z macro-backtrace for more info)\n> \n"}}]}