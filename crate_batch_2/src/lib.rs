use std::io::{Cursor,BufReader};
use  juniper::parser::{Lexer, Token};
// *** main start
pub fn main() {
    println!("crate batch 2 starting");
     let paths = std::fs::read_dir(".").unwrap();
    // Keep run_1 as is - it reads from filesystem
    run_1(paths);
    
    // run_2 hardcoded font data
    let font2 = vec![0, 1, 0, 0, 0, 250, 255, 255, 127, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 246, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 8, 0, 0, 210, 210, 210, 210, 210, 210, 210, 210, 210, 210, 210, 210, 210, 210, 210, 210, 210, 210, 210, 210, 210, 210, 210, 210, 210, 210, 210, 210, 210, 210, 210, 210, 210, 210, 101, 210, 210, 58, 117, 210, 32, 0, 109, 97, 112, 126, 33, 0, 0, 0, 0, 0, 99, 102, 1, 0, 30, 1, 91, 1, 0, 253, 172, 172, 172, 172, 172, 172, 172, 172, 172, 172, 172, 172, 172, 172, 172, 172, 0, 86, 79, 82, 71, 0, 1, 82, 77, 103, 118, 97, 114, 220, 70, 70, 51, 0, 0, 0, 0, 35, 0, 0, 116, 116, 99, 102, 33, 1, 125, 0, 0, 103, 118, 97, 114, 120, 0, 0, 0, 0, 30, 1, 91, 1, 0, 253, 0, 86, 79, 82, 71, 0, 1, 82, 77, 103, 118, 97, 114, 220, 70, 70, 51, 0, 0, 0, 0, 0, 0, 0, 116, 116, 99, 102, 33, 1, 125, 0, 0, 103, 118, 97, 114, 120, 0, 0, 0, 1, 77, 103, 118, 97, 114, 220, 255, 255, 255, 255, 255, 255, 0, 236, 0, 0, 98, 77, 1, 91, 0, 0, 220, 70, 70, 50, 0, 0, 0, 0, 0, 43, 0, 0, 0, 0, 0, 97, 114, 120, 0, 0, 0, 0, 30, 1, 91, 1, 0, 253, 0, 86, 79, 82, 71, 0, 1, 82, 77, 103, 118, 97, 114, 0, 0, 0, 0, 0, 0, 0, 0, 0, 79, 82, 71, 0, 0, 0, 0, 0, 118, 97, 0, 1, 0, 0, 1, 0, 0, 0, 1, 82, 77, 0, 190, 250, 184, 102, 118, 97, 114, 115, 98, 105, 120, 0, 0, 0, 0, 0, 0, 0, 4, 61, 6, 82, 77, 220, 45, 103, 79, 41, 114, 117, 250, 184, 102, 118, 97, 114, 115, 98, 105, 120, 0, 0, 0, 0, 0, 0, 0, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 0, 0, 0, 64, 255, 0, 0, 116, 116, 99, 102, 33, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 8, 17, 0, 0, 0, 6, 0, 72, 0, 0, 0, 1, 0, 0, 210, 5, 0, 0, 0, 0, 0, 0, 0, 255, 0, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 0, 0, 0, 0, 0, 0, 0, 123, 0, 0, 0, 0, 109, 97, 98, 105, 120, 0, 0, 0, 0, 0, 0, 0, 4, 61, 1, 0, 0, 0, 1, 0, 0, 1, 0, 0, 1, 99, 109, 97, 112, 126, 33, 0, 0, 117, 210, 0, 0, 33, 93, 112, 126, 33, 0, 0, 0, 0, 103, 118, 97, 114, 220, 70, 70, 55, 0, 0, 0, 0, 0, 0, 0, 116, 116, 99, 102, 33, 1, 125, 0, 0, 103, 118, 97, 114, 120, 0, 0, 0, 0, 0, 0, 109, 97, 112, 126, 33, 0, 0, 0, 0, 0, 99, 102, 1, 0, 30, 1, 91, 1, 0, 253, 0, 210, 58, 117, 210, 0, 0, 109, 97, 112, 126, 33, 0, 0, 255, 0, 0, 0, 99, 102, 1, 0, 30, 1, 91, 1, 0, 253, 0, 210, 210, 210, 210, 210, 210, 210, 210, 210, 210, 210, 210, 210, 255, 101, 210, 210, 58, 117, 210, 32, 0, 255, 255, 255, 109, 255, 255, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 1, 0, 253, 0, 109, 97, 120, 112, 0, 1, 0, 253, 0, 0, 0, 0, 0, 0, 0, 64, 255, 70, 51, 0, 0, 0, 0, 0, 0, 0, 116, 116, 99, 0, 0, 0, 0, 0, 0, 0, 0, 0, 109, 97, 120, 112, 0, 1, 0, 58, 117, 0, 0, 205, 0, 0, 1, 0, 0, 253, 0, 0, 0, 0, 0, 0, 0, 64, 255, 255, 210, 1, 255, 255, 221, 221, 221, 221, 221, 221, 221, 221, 221, 221, 221, 221, 221, 221, 221, 221, 221, 221, 221, 221, 221, 17, 17, 17, 0, 67, 70, 70, 50, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 82, 77, 0, 190, 27, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 0, 3, 72, 0, 0, 0, 0, 0, 0, 116, 116, 99, 102, 33, 1, 125, 0, 0, 103, 118, 97, 114, 120, 0, 0, 0, 1, 77, 103, 118, 97, 114, 220, 255, 255, 255, 255, 255, 255, 0, 236, 0, 0, 98, 77, 103, 118, 97, 77, 65, 0, 0, 1, 0, 0, 0, 1, 174, 178, 35, 0, 45, 79, 104, 104, 101, 97, 169, 1, 0, 15, 0, 0, 0, 0, 0, 0, 0, 36, 120, 169, 0, 1, 0, 0, 0, 0, 0, 0, 1, 99, 109, 97, 112, 126, 33, 0, 0, 0, 0, 0, 0, 0, 0, 0, 8, 0, 0, 210, 210, 210, 210, 210, 210, 210, 210, 210, 210, 210, 210, 210, 210, 210, 210, 210, 210, 210, 210, 210, 210, 210, 210, 210, 210, 210, 210, 210, 210, 210, 210, 210, 210, 101, 210, 210, 58, 117, 0, 1, 0, 0, 0, 27, 0, 1, 0, 0, 1, 0, 255, 255, 255, 255, 148, 0, 0, 0, 0, 0, 118, 97, 1, 1, 0, 0, 4, 61, 1, 0, 0, 0, 1, 0, 0, 1, 0, 0, 1, 99, 109, 97, 112, 126, 33, 0, 0, 0, 0, 8, 0, 0, 210, 210, 210, 210, 210, 210, 210, 210, 210, 210, 210, 210, 210, 210, 210, 210, 210, 210, 210, 210, 210, 210, 210, 210, 210, 210, 210, 210, 210, 210, 0, 1, 99, 109, 97, 112, 126, 33, 0, 0, 0, 0, 8, 0, 0, 210, 210, 210, 210, 210, 210, 210, 210, 210, 210, 210, 210, 210, 210, 210, 210, 210, 210, 210, 210, 210, 210, 210, 210, 210, 210, 210, 210, 210, 210, 210, 210, 210, 210, 101, 210, 210, 58, 117, 210, 32, 0, 109, 97, 112, 126, 33, 0, 0, 0, 0, 16, 99, 0, 1, 30, 1, 102, 91, 1, 0, 253, 0, 86, 79, 210, 71, 0, 1, 103, 77, 82, 118, 97, 114, 220, 70, 70, 56, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 27, 0, 2, 251, 0, 1, 0, 255, 255, 255, 4, 148, 0, 0, 0, 0, 0, 97, 118, 0, 0, 1, 16, 0, 1, 82, 77, 0, 190, 250, 184, 105, 118, 97, 114, 115, 98, 105, 136, 0, 255, 66, 66, 76, 0, 17, 0, 5, 64, 8, 38, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 67, 70, 0, 0, 27, 0, 2, 251, 0, 1, 0, 255, 255, 255, 4, 148, 0, 0, 0, 0, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 0, 0, 1, 0, 0, 0, 242, 72, 77, 65, 82, 77, 0, 190, 255, 255, 255, 4, 148, 0, 0, 0, 0, 0, 97, 118, 0, 0, 250, 184, 102, 118, 97, 114, 115, 184, 98, 255, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 67, 70, 70, 49, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 82, 77, 0, 190, 58, 27, 0, 1, 6, 0, 67, 70, 70, 0, 0, 118, 97, 114, 0, 116, 116, 99, 102, 33, 1, 0, 1, 0, 0, 0, 27, 0, 0, 0, 0, 0, 3, 101, 101, 101, 101, 101, 101, 101, 101, 101, 101, 0, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 115, 98, 105, 136, 0, 255, 66, 66, 76, 0, 17, 0, 5, 64, 8, 38, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 82, 77, 0, 190, 58, 27, 0, 0, 0, 0, 67, 70, 70, 0, 0, 116, 116, 118, 97, 1, 148, 0, 0, 0, 0, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 0, 0, 1, 0, 0, 0, 242, 72, 77, 65, 82, 77, 0, 190, 250, 184, 102, 118, 97, 114, 115, 184, 98, 38, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 67, 70, 70, 49, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 82, 77, 0, 190, 58, 27, 0, 1, 6, 0, 67, 70, 70, 0, 0, 118, 97, 114, 0, 116, 116, 99, 102, 33, 1, 0, 1, 0, 0, 0, 27, 0, 0, 0, 0, 0, 3, 101, 101, 101, 101, 101, 101, 101, 101, 101, 101, 0, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 115, 98, 105, 136, 0, 255, 66, 66, 76, 0, 17, 0, 5, 64, 8, 38, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 82, 77, 0, 190, 58, 27, 0, 0, 0, 0, 67, 70, 70, 0, 0, 116, 116, 118, 97, 1, 0, 0, 0, 1, 209, 77, 0, 190, 0, 1, 0, 0, 0, 1, 0, 0, 220, 104, 101, 97, 100, 0, 0, 0, 79, 0, 0, 0, 0, 0, 0, 0, 54, 110, 137, 0, 1, 12, 255, 255, 255, 255, 255, 255, 199, 107, 101, 114, 58, 27, 0, 1, 0, 0, 67, 70, 70, 0, 0, 255, 15, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 1, 0, 255, 0, 2, 0, 0, 0, 0, 1, 0, 0, 0, 1, 82, 97, 114, 115, 98, 105, 136, 0, 255, 66, 66, 76, 0, 193, 17, 0, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 70, 0, 0, 116, 116, 118, 97, 114, 220, 70, 70, 51, 0, 0, 0, 0, 0, 0, 1, 28, 28, 114, 220, 70, 70, 51, 0, 0, 0, 0, 35, 0, 0, 116, 116, 99, 102, 33, 1, 125, 0, 0, 103, 118, 97, 114, 120, 0, 0, 0, 0, 30, 1, 91, 1, 0, 253, 0, 86, 79, 82, 71, 0, 1, 82, 77, 103, 118, 97, 114, 220, 70, 70, 51, 0, 0, 0, 0, 0, 0, 0, 116, 116, 99, 102, 33, 1, 125, 0, 0, 103, 118, 97, 114, 120, 0, 0, 0, 1, 77, 103, 118, 97, 114, 220, 255, 255, 255, 255, 255, 255, 0, 236, 0, 0, 116, 116, 99, 102, 33, 1, 125, 0, 0, 103, 118, 97, 114, 120, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 27, 0, 1, 255, 71, 86, 255, 255, 255, 148, 0, 0, 1, 0, 0, 1, 0, 0, 1, 99, 109, 97, 112, 126, 33, 0, 0, 0, 0, 8, 0, 0, 210, 210, 210, 210, 210, 210, 210, 210, 210, 210, 210, 210, 210, 210, 210, 210, 210, 210, 210, 210, 210, 103, 72, 77, 65, 0, 0, 1, 0, 0, 0, 1, 174, 178, 35, 0, 45, 79, 104, 104, 101, 97, 169, 1, 0, 15, 0, 0, 0, 0, 0, 0, 0, 36, 120, 169, 0, 1, 0, 0, 0, 0, 0, 0, 1, 99, 109, 97, 112, 126, 33, 0, 0, 0, 0, 0, 0, 0, 0, 0, 8, 0, 0, 210, 210, 210, 210, 210, 210, 210, 210, 210, 210, 210, 210, 210, 210, 210, 210, 210, 210, 210, 210, 210, 210, 210, 210, 210, 210, 210, 210, 210, 210, 210, 210, 210, 210, 101, 210, 210, 58, 117, 0, 1, 0, 0, 0, 27, 0, 1, 0, 0, 1, 0, 255, 255, 255, 255, 148, 0, 0, 0, 0, 0, 118, 97, 1, 1, 0, 0, 4, 61, 1, 0, 0, 0, 1, 0, 0, 1, 0, 0, 1, 99, 109, 97, 112, 126, 33, 0, 0, 0, 0, 8, 0, 0, 210, 210, 210, 210, 210, 210, 210, 210, 210, 210, 210, 210, 210, 210, 210, 210, 210, 210, 210, 210, 210, 210, 210, 210, 210, 210, 210, 210, 210, 210, 0, 1, 99, 109, 97, 112, 126, 33, 0, 0, 0, 0, 8, 0, 0, 210, 210, 210, 210, 210, 210, 210, 210, 210, 210, 210, 210, 210, 210, 210, 210, 210, 210, 210, 210, 210, 210, 210, 210, 210, 210, 210, 210, 210, 210, 210, 210, 210, 210, 101, 210, 210, 58, 117, 210, 32, 0, 109, 97, 112, 126, 33, 0, 0, 0, 0, 16, 99, 0, 1, 30, 1, 102, 91, 1, 0, 253, 0, 86, 79, 210, 71, 0, 1, 103, 77, 82, 118, 97, 114, 220, 70, 70, 51, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 27, 0, 2, 251, 0, 1, 0, 255, 255, 255, 4, 148, 0, 0, 0, 0, 0, 97, 118, 0, 0, 1, 16, 0, 1, 82, 77, 0, 190, 250, 184, 105, 118, 97, 114, 115, 98, 105, 136, 0, 255, 66, 66, 76, 0, 17, 0, 5, 64, 8, 38, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 67, 70, 0, 0, 27, 0, 2, 251, 0, 1, 0, 255, 255, 255, 4, 148, 0, 0, 0, 0, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 0, 0, 1, 0, 0, 0, 242, 72, 77, 65, 82, 77, 0, 190, 250, 184, 102, 118, 97, 114, 115, 184, 98, 38, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 67, 70, 70, 50, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 82, 77, 0, 190, 58, 27, 0, 1, 6, 0, 67, 70, 70, 0, 0, 118, 97, 114, 0, 116, 116, 99, 102, 33, 1, 0, 1, 0, 0, 0, 27, 0, 0, 0, 0, 0, 3, 101, 101, 101, 101, 101, 101, 101, 101, 101, 101, 0, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 115, 98, 105, 136, 0, 255, 66, 66, 76, 0, 17, 0, 5, 64, 8, 38, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 82, 77, 0, 190, 58, 27, 0, 0, 0, 0, 67, 70, 70, 0, 0, 116, 116, 118, 97, 1, 0, 0, 0, 1, 209, 77, 0, 190, 0, 1, 0, 0, 0, 1, 0, 0, 220, 104, 101, 97, 100, 0, 0, 0, 79, 0, 0, 0, 0, 0, 0, 0, 54, 110, 137, 0, 1, 12, 255, 255, 255, 255, 255, 255, 199, 107, 101, 114, 58, 27, 0, 1, 0, 0, 67, 70, 70, 0, 0, 255, 15, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 1, 0, 255, 0, 2, 0, 0, 0, 0, 1, 0, 0, 0, 1, 82, 97, 114, 115, 98, 105, 136, 0, 255, 66, 66, 76, 0, 193, 17, 0, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 70, 0, 0, 116, 116, 118, 97, 114, 220, 70, 70, 51, 0, 0, 0, 0, 0, 0, 1, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 5, 64, 24, 12, 12, 12, 12, 12, 12, 12, 99, 102, 1, 0, 30, 1, 91, 1, 0, 253, 0, 86, 79, 82, 71, 0, 1, 82, 0, 0, 30, 1, 91, 0, 0, 0, 0, 0, 0, 0, 0, 0, 205, 0, 0, 1, 0, 0, 0, 0, 1, 209, 77, 0, 190, 0, 1, 0, 0, 0, 1, 0, 0, 220, 104, 101, 97, 100, 0, 0, 0, 79, 0, 0, 0, 0, 0, 0, 0, 54, 110, 137, 0, 1, 12, 255, 255, 255, 255, 255, 255, 199, 107, 101, 114, 58, 27, 0, 1, 0, 0, 67, 70, 70, 0, 0, 255, 15, 245, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 91, 0, 0, 0, 1, 0, 0, 1, 0, 255, 0, 2, 0, 0, 0, 0, 1, 0, 0, 0, 1, 82, 97, 114, 115, 98, 105, 136, 0, 255, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 70, 0, 0, 116, 116, 118, 97, 114, 220, 70, 70, 51, 0, 0, 0, 0, 0, 0, 1, 28, 28, 114, 220, 70, 70, 51, 0, 0, 0, 0, 35, 0, 0, 116, 116, 99, 102, 33, 1, 125, 0, 0, 103, 118, 97, 114, 120, 0, 0, 0, 0, 30, 1, 91, 1, 0, 253, 0, 86, 79, 82, 71, 0, 1, 82, 77, 103, 118, 97, 114, 220, 70, 70, 51, 0, 0, 0, 0, 0, 0, 0, 116, 116, 99, 102, 33, 1, 125, 0, 0, 103, 118, 97, 114, 120, 0, 0, 0, 1, 77, 103, 118, 97, 114, 220, 255, 255, 255, 255, 255, 255, 0, 236, 0, 0, 116, 116, 99, 102, 33, 1, 125, 0, 0, 103, 118, 97, 114, 120, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 27, 0, 1, 255, 71, 86, 255, 255, 255, 148, 255, 65, 0, 0, 0, 0, 0, 118, 97, 1, 1, 0, 0, 4, 61, 1, 0, 0, 0, 1, 0, 0, 1, 0, 0, 1, 99, 109, 97, 112, 126, 33, 0, 0, 0, 0, 8, 0, 0, 210, 210, 210, 210, 210, 210, 210, 210, 210, 210, 210, 210, 210, 210, 210, 210, 210, 210, 210, 210, 210, 103, 72, 77, 65, 0, 0, 1, 0, 0, 0, 1, 174, 178, 35, 0, 45, 79, 104, 104, 101, 97, 169, 1, 0, 15, 0, 0, 0, 0, 0, 0, 0, 36, 120, 169, 0, 1, 0, 0, 0, 0, 0, 0, 1, 99, 109, 97, 112, 126, 33, 0, 0, 0, 0, 0, 0, 0, 0, 0, 8, 0, 0, 210, 210, 210, 210, 210, 210, 210, 210, 210, 210, 210, 210, 210, 210, 210, 210, 210, 210, 210, 210, 210, 210, 210, 210, 210, 210, 210, 210, 210, 210, 210, 210, 210, 210, 101, 210, 210, 58, 117, 0, 1, 0, 0, 0, 27, 0, 1, 0, 0, 1, 0, 255, 255, 255, 255, 148, 0, 0, 0, 0, 0, 118, 97, 1, 1, 0, 0, 4, 61, 1, 0, 0, 0, 1, 0, 0, 1, 0, 0, 1, 99, 109, 97, 112, 126, 33, 0, 0, 0, 0, 8, 0, 0, 210, 210, 210, 210, 210, 210, 210, 210, 210, 210, 210, 210, 210, 210, 210, 210, 210, 210, 210, 210, 210, 210, 210, 210, 210, 210, 210, 210, 210, 210, 0, 1, 99, 109, 97, 112, 126, 33, 0, 0, 0, 0, 8, 0, 0, 210, 210, 210, 210, 210, 210, 210, 210, 210, 210, 210, 210, 210, 210, 210, 210, 210, 210, 210, 210, 210, 210, 210, 210, 210, 210, 210, 210, 210, 210, 210, 210, 210, 210, 101, 210, 210, 58, 117, 210, 32, 0, 109, 97, 112, 126, 33, 0, 0, 0, 0, 16, 99, 0, 1, 30, 1, 102, 91, 1, 0, 253, 0, 86, 79, 210, 71, 0, 1, 103, 77, 82, 118, 97, 114, 220, 70, 70, 51, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 27, 0, 2, 251, 0, 1, 0, 255, 255, 255, 4, 148, 0, 0, 0, 0, 0, 97, 118, 0, 0, 1, 16, 0, 1, 82, 0, 17, 0, 5, 64, 8, 38, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 67, 70, 0, 0, 27, 0, 2, 251, 0, 1, 0, 255, 255, 255, 4, 148, 0, 0, 0, 0, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 0, 0, 1, 0, 0, 0, 242, 72, 77, 65, 82, 77, 0, 190, 250, 184, 102, 118, 97, 114, 115, 184, 98, 38, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 67, 70, 70, 50, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 82, 77, 0, 190, 58, 27, 0, 1, 6, 0, 67, 70, 70, 0, 0, 118, 97, 114, 0, 116, 116, 99, 102, 33, 1, 0, 1, 0, 0, 0, 27, 0, 0, 0, 0, 0, 3, 101, 101, 101, 101, 101, 101, 101, 101, 101, 101, 0, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 115, 98, 105, 136, 0, 255, 66, 66, 76, 0, 17, 0, 5, 64, 8, 38, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 82, 77, 0, 190, 58, 27, 0, 0, 0, 0, 67, 70, 70, 0, 0, 116, 116, 118, 97, 1, 0, 0, 0, 1, 209, 77, 0, 190, 0, 1, 0, 0, 0, 1, 2, 0, 36, 151, 154, 158, 155, 255, 0, 0, 79, 0, 0, 0, 0, 0, 0, 0, 54, 110, 137, 0, 1, 12, 255, 255, 255, 255, 255, 255, 199, 107, 101, 114, 58, 27, 0, 1, 0, 0, 67, 70, 70, 0, 0, 255, 15, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 1, 0, 255, 0, 2, 0, 0, 0, 0, 1, 0, 0, 0, 1, 82, 97, 114, 115, 98, 105, 136, 0, 255, 66, 66, 76, 0, 193, 17, 0, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 70, 0, 0, 116, 116, 118, 97, 114, 220, 70, 70, 51, 0, 0, 0, 0, 0, 0, 1, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 5, 64, 24, 12, 12, 12, 12, 12, 12, 12, 99, 102, 1, 0, 30, 1, 91, 1, 0, 253, 0, 86, 79, 82, 71, 0, 1, 82, 0, 0, 30, 1, 91, 0, 0, 0, 0, 0, 0, 0, 0, 0, 205, 0, 0, 1, 0, 0, 210, 1, 0, 0, 255, 255, 255, 199, 107, 101, 114, 110, 82, 1, 63, 169, 173];
    run_2(&font2);
    
    
    // run_3 hardcoded LineString data
     let line_string = LineString(
        vec![
            coord! { x: -10.0, y: 0.0 },
            coord! { x: 5.0, y: -10.0 },
            coord! { x: 10.0, y: 10.0 },
            coord! { x: -5.0, y: 10.0 }
        ]
    );
    run_3(&line_string);
    
    // run_4 hardcoded goblin data
    let buffer: &[u8] = &[];
    run_4(buffer);
    
    // run_5 handlebars tests
    let data = vec![0u8; 10];
    run_5(data.as_slice());
    
    // run_6 hjson data
    let hjson_data = vec![155];
    run_6(&hjson_data);
    
    // run_7 human_name
    let name_str = ".ΰ\u{330}\u{610}`";
    run_7(name_str);
    
    // run_8 hyper URI
    let _uri = "http://example.com/path?query=param#fragment";
    run_8(_uri);
    
    // run_9 webp
    let webp_bytes = vec![0x52, 0x49, 0x46, 0x46, 0xaf, 0x50, 0x45, 0x33, 0x37, 0x44, 0x4d, 0x46];
    run_9(&webp_bytes);
    
    // run_10 gif
    let gif_data = vec![
        0x47, 0x49, 0x46, 0x38, 0x39, 0x61, 0x01, 0x00, 0x01, 0x00, 0x80, 0xff, 0x00, 0xff,
        0xff, 0xff, 0x00, 0x00, 0x00, 0x21, 0xf9, 0x04, 0x01, 0x00, 0x00, 0x00, 0x00, 0x2c,
        0x00, 0x00, 0x00, 0x00, 0x01, 0x00, 0x01, 0x00, 0x00, 0x02, 0x02, 0x44, 0x01, 0x00,
        0x3b,
    ];
    run_10(&gif_data);
    
    // run_11 jpeg
    let huffman_values = [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11];
    run_11(&huffman_values);
    
    let s = "query { human(id: \"1000\") { name } }";
    run_update(s);
}

// *** main end

use std::fs::File;
use std::io::Read;
use flif::Flif;


pub fn run_update(s: &str) {
        // !add juniper 
        
        let mut tokens = Vec::new();
        let mut lexer = Lexer::new(s);
    
    
        loop {
            match lexer.next() {
                Some(Ok(t)) => {
                    let at_eof = t.item == Token::EndOfFile;
                    tokens.push(t);
                    if at_eof {
                        break;
                    }
                }
                Some(Err(e)) => panic!("Error in input stream: {:#?} for {:#?}", e, s),
                None => panic!("EOF before EndOfFile token in {:#?}", s),
            }
        }
}

fn run_1(paths: std::fs::ReadDir) {

    for path in paths {
        let path = path.unwrap().path();
        println!("Artifact: {}", path.display());
        let mut data = Vec::new();
        let mut file = File::open(path).unwrap();
        file.read_to_end(&mut data).unwrap();
        // temporarily disabled
        let _ = Flif::decode(Cursor::new(&data)).map(|img| img.get_raw_pixels());
    }
}

pub fn run_2(font_data: &[u8]) {
    if let Ok(font) = fontdue::Font::from_bytes(font_data.to_vec(), fontdue::FontSettings::default()) {
        let (metrics, _bitmap) = font.rasterize('g', 17.0);
    }
    println!("Hello, world!");
}

use geo::{ LineString, ConvexHull, coord };
pub fn run_3(line_string: &LineString<f64>) {
    // Hardcoded data remains in function since it's not bytes but coordinates
   

    let res = line_string.convex_hull();
    println!("Convex hull: {:?}", res);
}

pub fn run_4(buffer: &[u8]) {
    // goblin - keep empty buffer as is (no meaningful data to extract)
   
    if let Ok(index) = goblin::archive::Index::parse_sysv_index(buffer) {
        println!("Parsed index: {:?}", index);
    } else {
        println!("Failed to parse index");
    }
}

pub fn run_5(data: &[u8]) {
    // handlebars - templates are strings, not bytes, keep as is
    let data = &Vec::<()>::new();
    let hbs = handlebars::Handlebars::new();
    let error = hbs.render_template("{{x[]@this}}", &data).unwrap_err();

    let s = "{{#>(X)}}{{/X}}";
    let tpl = handlebars::Handlebars::new();
    let _ = tpl.render_template(&s, &Vec::<()>::new());
}

use serde_hjson::{ Map, Value };
use serde_hjson::error::Result;
pub fn run_6(data: &[u8]) {
    let mut sample: Result<Map<String, Value>> = serde_hjson::from_slice(data);
}

pub fn run_7(name_str: &str) {
    let name = human_name::Name::parse(name_str);
}

use hyper::{ Uri, Url };
pub fn run_8(input: &str) {
    // URL is constant string, keep as is
    let uri = Uri::from(Url::parse(input).unwrap());
}

pub fn run_9(bytes: &[u8]) {
    let data = std::io::Cursor::new(bytes);
    let _ = image::webp::WebPDecoder::new(data);
}

pub fn run_10(data: &[u8]) {
    let mut options = gif::DecodeOptions::new();
    options.set_color_output(gif::ColorOutput::RGBA);
    let cursor = std::io::Cursor::new(data);
    if let Ok(mut decoder) = options.read_info(cursor) {
        while let Ok(Some(_frame)) = decoder.read_next_frame() {}
    }
}

use image::{ImageDecoder, buffer};

pub fn run_11(huffman_values: &[u8]) {
    // jpeg-decoder - multiple tests with same data
    jpeg_decoder_63::Decoder::new(huffman_values);

    let result = image::codecs::jpeg::JpegDecoder::new(Cursor::new(huffman_values));
    let decoder = match result {
        Ok(d) => d,
        Err(_) => {
            return;
        }
    };
    if decoder.total_bytes() > 2_000_000_000 {
        return;
    }
    let mut buf = vec![0; decoder.total_bytes() as usize];
    let _ = decoder.read_image(&mut buf);

    let _ = fancy_regex::Regex::new("\\u");
}

