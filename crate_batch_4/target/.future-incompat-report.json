{"version":0,"next_id":3,"reports":[{"id":1,"suggestion_message":"to solve this problem, you can try the following approaches:\n\n- update to a newer version to see if the issue has been fixed\n  - nom v2.2.1 has the following newer versions available: 3.0.0, 3.1.0, 3.2.0, 3.2.1, 4.0.0-alpha1, 4.0.0-alpha2, 4.0.0-beta1, 4.0.0-beta2, 4.0.0-beta3, 4.0.0, 4.1.0, 4.1.1, 4.2.0, 4.2.1, 4.2.2, 4.2.3, 5.0.0-alpha1, 5.0.0-alpha2, 5.0.0-beta1, 5.0.0-beta2, 5.0.0-beta3, 5.0.0, 5.0.1, 5.1.0, 5.1.1, 5.1.2, 5.1.3, 6.0.0-alpha1, 6.0.0-alpha2, 6.0.0-alpha3, 6.0.0-beta1, 6.0.0-beta2, 6.0.0-beta3, 6.0.0-beta4, 6.0.0-beta5, 6.0.0, 6.0.1, 6.1.0, 6.1.1, 6.1.2, 6.2.0, 6.2.1, 6.2.2, 7.0.0-alpha1, 7.0.0-alpha2, 7.0.0-alpha3, 7.0.0, 7.1.0, 7.1.1, 7.1.2, 7.1.3, 8.0.0-alpha1, 8.0.0-alpha2, 8.0.0-beta.1, 8.0.0\n\n- ensure the maintainers know of this problem (e.g. creating a bug report if needed)\nor even helping with a fix (e.g. by creating a pull request)\n  - nom@2.2.1\n  - repository: https://github.com/Geal/nom\n  - detailed warning command: `cargo report future-incompatibilities --id 1 --package nom@2.2.1`\n\n  - num-bigint-dig@0.8.4\n  - repository: https://github.com/dignifiedquire/num-bigint\n  - detailed warning command: `cargo report future-incompatibilities --id 1 --package num-bigint-dig@0.8.4`\n\n  - pdf@0.7.2\n  - repository: https://github.com/pdf-rs\n  - detailed warning command: `cargo report future-incompatibilities --id 1 --package pdf@0.7.2`\n\n  - pdf@0.7.2\n  - repository: https://github.com/pdf-rs/pdf\n  - detailed warning command: `cargo report future-incompatibilities --id 1 --package pdf@0.7.2`\n\n- use your own version of the dependency with the `[patch]` section in `Cargo.toml`\nFor more information, see:\nhttps://doc.rust-lang.org/cargo/reference/overriding-dependencies.html#the-patch-section\n","per_package":{"nom@2.2.1":"The package `nom v2.2.1` currently triggers the following future incompatibility lints:\n> \u001b[1m\u001b[33mwarning\u001b[0m\u001b[1m: trailing semicolon in macro used in expression position\u001b[0m\n>    \u001b[1m\u001b[94m--> \u001b[0m/home/yzzhao3/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/nom-2.2.1/src/macros.rs:514:42\n>     \u001b[1m\u001b[94m|\u001b[0m\n> \u001b[1m\u001b[94m514\u001b[0m \u001b[1m\u001b[94m|\u001b[0m     map!(__impl $i, call!($f), call!($g));\n>     \u001b[1m\u001b[94m|\u001b[0m                                          \u001b[1m\u001b[33m^\u001b[0m\n>     \u001b[1m\u001b[94m|\u001b[0m\n>    \u001b[1m\u001b[94m::: \u001b[0m/home/yzzhao3/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/nom-2.2.1/src/nom.rs:369:3\n>     \u001b[1m\u001b[94m|\u001b[0m\n> \u001b[1m\u001b[94m369\u001b[0m \u001b[1m\u001b[94m|\u001b[0m   map!(i, be_u8, | x | { x as i8 })\n>     \u001b[1m\u001b[94m|\u001b[0m   \u001b[1m\u001b[94m---------------------------------\u001b[0m \u001b[1m\u001b[94min this macro invocation\u001b[0m\n>     \u001b[1m\u001b[94m|\u001b[0m\n>     \u001b[1m\u001b[94m= \u001b[0m\u001b[1mwarning\u001b[0m: this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release!\n>     \u001b[1m\u001b[94m= \u001b[0m\u001b[1mnote\u001b[0m: for more information, see issue #79813 <https://github.com/rust-lang/rust/issues/79813>\n>     \u001b[1m\u001b[94m= \u001b[0m\u001b[1mnote\u001b[0m: macro invocations at the end of a block are treated as expressions\n>     \u001b[1m\u001b[94m= \u001b[0m\u001b[1mnote\u001b[0m: to ignore the value produced by the macro, add a semicolon after the invocation of `map`\n>     \u001b[1m\u001b[94m= \u001b[0m\u001b[1mnote\u001b[0m: this warning originates in the macro `map` (in Nightly builds, run with -Z macro-backtrace for more info)\n> \n> \u001b[1m\u001b[33mwarning\u001b[0m\u001b[1m: trailing semicolon in macro used in expression position\u001b[0m\n>    \u001b[1m\u001b[94m--> \u001b[0m/home/yzzhao3/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/nom-2.2.1/src/macros.rs:514:42\n>     \u001b[1m\u001b[94m|\u001b[0m\n> \u001b[1m\u001b[94m514\u001b[0m \u001b[1m\u001b[94m|\u001b[0m     map!(__impl $i, call!($f), call!($g));\n>     \u001b[1m\u001b[94m|\u001b[0m                                          \u001b[1m\u001b[33m^\u001b[0m\n>     \u001b[1m\u001b[94m|\u001b[0m\n>    \u001b[1m\u001b[94m::: \u001b[0m/home/yzzhao3/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/nom-2.2.1/src/nom.rs:375:3\n>     \u001b[1m\u001b[94m|\u001b[0m\n> \u001b[1m\u001b[94m375\u001b[0m \u001b[1m\u001b[94m|\u001b[0m   map!(i, be_u16, | x | { x as i16 })\n>     \u001b[1m\u001b[94m|\u001b[0m   \u001b[1m\u001b[94m-----------------------------------\u001b[0m \u001b[1m\u001b[94min this macro invocation\u001b[0m\n>     \u001b[1m\u001b[94m|\u001b[0m\n>     \u001b[1m\u001b[94m= \u001b[0m\u001b[1mwarning\u001b[0m: this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release!\n>     \u001b[1m\u001b[94m= \u001b[0m\u001b[1mnote\u001b[0m: for more information, see issue #79813 <https://github.com/rust-lang/rust/issues/79813>\n>     \u001b[1m\u001b[94m= \u001b[0m\u001b[1mnote\u001b[0m: macro invocations at the end of a block are treated as expressions\n>     \u001b[1m\u001b[94m= \u001b[0m\u001b[1mnote\u001b[0m: to ignore the value produced by the macro, add a semicolon after the invocation of `map`\n>     \u001b[1m\u001b[94m= \u001b[0m\u001b[1mnote\u001b[0m: this warning originates in the macro `map` (in Nightly builds, run with -Z macro-backtrace for more info)\n> \n> \u001b[1m\u001b[33mwarning\u001b[0m\u001b[1m: trailing semicolon in macro used in expression position\u001b[0m\n>    \u001b[1m\u001b[94m--> \u001b[0m/home/yzzhao3/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/nom-2.2.1/src/macros.rs:514:42\n>     \u001b[1m\u001b[94m|\u001b[0m\n> \u001b[1m\u001b[94m514\u001b[0m \u001b[1m\u001b[94m|\u001b[0m     map!(__impl $i, call!($f), call!($g));\n>     \u001b[1m\u001b[94m|\u001b[0m                                          \u001b[1m\u001b[33m^\u001b[0m\n>     \u001b[1m\u001b[94m|\u001b[0m\n>    \u001b[1m\u001b[94m::: \u001b[0m/home/yzzhao3/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/nom-2.2.1/src/nom.rs:381:3\n>     \u001b[1m\u001b[94m|\u001b[0m\n> \u001b[1m\u001b[94m381\u001b[0m \u001b[1m\u001b[94m|\u001b[0m   map!(i, be_u32, | x | { x as i32 })\n>     \u001b[1m\u001b[94m|\u001b[0m   \u001b[1m\u001b[94m-----------------------------------\u001b[0m \u001b[1m\u001b[94min this macro invocation\u001b[0m\n>     \u001b[1m\u001b[94m|\u001b[0m\n>     \u001b[1m\u001b[94m= \u001b[0m\u001b[1mwarning\u001b[0m: this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release!\n>     \u001b[1m\u001b[94m= \u001b[0m\u001b[1mnote\u001b[0m: for more information, see issue #79813 <https://github.com/rust-lang/rust/issues/79813>\n>     \u001b[1m\u001b[94m= \u001b[0m\u001b[1mnote\u001b[0m: macro invocations at the end of a block are treated as expressions\n>     \u001b[1m\u001b[94m= \u001b[0m\u001b[1mnote\u001b[0m: to ignore the value produced by the macro, add a semicolon after the invocation of `map`\n>     \u001b[1m\u001b[94m= \u001b[0m\u001b[1mnote\u001b[0m: this warning originates in the macro `map` (in Nightly builds, run with -Z macro-backtrace for more info)\n> \n> \u001b[1m\u001b[33mwarning\u001b[0m\u001b[1m: trailing semicolon in macro used in expression position\u001b[0m\n>    \u001b[1m\u001b[94m--> \u001b[0m/home/yzzhao3/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/nom-2.2.1/src/macros.rs:514:42\n>     \u001b[1m\u001b[94m|\u001b[0m\n> \u001b[1m\u001b[94m514\u001b[0m \u001b[1m\u001b[94m|\u001b[0m     map!(__impl $i, call!($f), call!($g));\n>     \u001b[1m\u001b[94m|\u001b[0m                                          \u001b[1m\u001b[33m^\u001b[0m\n>     \u001b[1m\u001b[94m|\u001b[0m\n>    \u001b[1m\u001b[94m::: \u001b[0m/home/yzzhao3/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/nom-2.2.1/src/nom.rs:387:3\n>     \u001b[1m\u001b[94m|\u001b[0m\n> \u001b[1m\u001b[94m387\u001b[0m \u001b[1m\u001b[94m|\u001b[0m   map!(i, be_u64, | x | { x as i64 })\n>     \u001b[1m\u001b[94m|\u001b[0m   \u001b[1m\u001b[94m-----------------------------------\u001b[0m \u001b[1m\u001b[94min this macro invocation\u001b[0m\n>     \u001b[1m\u001b[94m|\u001b[0m\n>     \u001b[1m\u001b[94m= \u001b[0m\u001b[1mwarning\u001b[0m: this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release!\n>     \u001b[1m\u001b[94m= \u001b[0m\u001b[1mnote\u001b[0m: for more information, see issue #79813 <https://github.com/rust-lang/rust/issues/79813>\n>     \u001b[1m\u001b[94m= \u001b[0m\u001b[1mnote\u001b[0m: macro invocations at the end of a block are treated as expressions\n>     \u001b[1m\u001b[94m= \u001b[0m\u001b[1mnote\u001b[0m: to ignore the value produced by the macro, add a semicolon after the invocation of `map`\n>     \u001b[1m\u001b[94m= \u001b[0m\u001b[1mnote\u001b[0m: this warning originates in the macro `map` (in Nightly builds, run with -Z macro-backtrace for more info)\n> \n> \u001b[1m\u001b[33mwarning\u001b[0m\u001b[1m: trailing semicolon in macro used in expression position\u001b[0m\n>    \u001b[1m\u001b[94m--> \u001b[0m/home/yzzhao3/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/nom-2.2.1/src/macros.rs:514:42\n>     \u001b[1m\u001b[94m|\u001b[0m\n> \u001b[1m\u001b[94m514\u001b[0m \u001b[1m\u001b[94m|\u001b[0m     map!(__impl $i, call!($f), call!($g));\n>     \u001b[1m\u001b[94m|\u001b[0m                                          \u001b[1m\u001b[33m^\u001b[0m\n>     \u001b[1m\u001b[94m|\u001b[0m\n>    \u001b[1m\u001b[94m::: \u001b[0m/home/yzzhao3/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/nom-2.2.1/src/nom.rs:437:3\n>     \u001b[1m\u001b[94m|\u001b[0m\n> \u001b[1m\u001b[94m437\u001b[0m \u001b[1m\u001b[94m|\u001b[0m   map!(i, le_u8, | x | { x as i8 })\n>     \u001b[1m\u001b[94m|\u001b[0m   \u001b[1m\u001b[94m---------------------------------\u001b[0m \u001b[1m\u001b[94min this macro invocation\u001b[0m\n>     \u001b[1m\u001b[94m|\u001b[0m\n>     \u001b[1m\u001b[94m= \u001b[0m\u001b[1mwarning\u001b[0m: this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release!\n>     \u001b[1m\u001b[94m= \u001b[0m\u001b[1mnote\u001b[0m: for more information, see issue #79813 <https://github.com/rust-lang/rust/issues/79813>\n>     \u001b[1m\u001b[94m= \u001b[0m\u001b[1mnote\u001b[0m: macro invocations at the end of a block are treated as expressions\n>     \u001b[1m\u001b[94m= \u001b[0m\u001b[1mnote\u001b[0m: to ignore the value produced by the macro, add a semicolon after the invocation of `map`\n>     \u001b[1m\u001b[94m= \u001b[0m\u001b[1mnote\u001b[0m: this warning originates in the macro `map` (in Nightly builds, run with -Z macro-backtrace for more info)\n> \n> \u001b[1m\u001b[33mwarning\u001b[0m\u001b[1m: trailing semicolon in macro used in expression position\u001b[0m\n>    \u001b[1m\u001b[94m--> \u001b[0m/home/yzzhao3/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/nom-2.2.1/src/macros.rs:514:42\n>     \u001b[1m\u001b[94m|\u001b[0m\n> \u001b[1m\u001b[94m514\u001b[0m \u001b[1m\u001b[94m|\u001b[0m     map!(__impl $i, call!($f), call!($g));\n>     \u001b[1m\u001b[94m|\u001b[0m                                          \u001b[1m\u001b[33m^\u001b[0m\n>     \u001b[1m\u001b[94m|\u001b[0m\n>    \u001b[1m\u001b[94m::: \u001b[0m/home/yzzhao3/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/nom-2.2.1/src/nom.rs:443:3\n>     \u001b[1m\u001b[94m|\u001b[0m\n> \u001b[1m\u001b[94m443\u001b[0m \u001b[1m\u001b[94m|\u001b[0m   map!(i, le_u16, | x | { x as i16 })\n>     \u001b[1m\u001b[94m|\u001b[0m   \u001b[1m\u001b[94m-----------------------------------\u001b[0m \u001b[1m\u001b[94min this macro invocation\u001b[0m\n>     \u001b[1m\u001b[94m|\u001b[0m\n>     \u001b[1m\u001b[94m= \u001b[0m\u001b[1mwarning\u001b[0m: this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release!\n>     \u001b[1m\u001b[94m= \u001b[0m\u001b[1mnote\u001b[0m: for more information, see issue #79813 <https://github.com/rust-lang/rust/issues/79813>\n>     \u001b[1m\u001b[94m= \u001b[0m\u001b[1mnote\u001b[0m: macro invocations at the end of a block are treated as expressions\n>     \u001b[1m\u001b[94m= \u001b[0m\u001b[1mnote\u001b[0m: to ignore the value produced by the macro, add a semicolon after the invocation of `map`\n>     \u001b[1m\u001b[94m= \u001b[0m\u001b[1mnote\u001b[0m: this warning originates in the macro `map` (in Nightly builds, run with -Z macro-backtrace for more info)\n> \n> \u001b[1m\u001b[33mwarning\u001b[0m\u001b[1m: trailing semicolon in macro used in expression position\u001b[0m\n>    \u001b[1m\u001b[94m--> \u001b[0m/home/yzzhao3/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/nom-2.2.1/src/macros.rs:514:42\n>     \u001b[1m\u001b[94m|\u001b[0m\n> \u001b[1m\u001b[94m514\u001b[0m \u001b[1m\u001b[94m|\u001b[0m     map!(__impl $i, call!($f), call!($g));\n>     \u001b[1m\u001b[94m|\u001b[0m                                          \u001b[1m\u001b[33m^\u001b[0m\n>     \u001b[1m\u001b[94m|\u001b[0m\n>    \u001b[1m\u001b[94m::: \u001b[0m/home/yzzhao3/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/nom-2.2.1/src/nom.rs:449:3\n>     \u001b[1m\u001b[94m|\u001b[0m\n> \u001b[1m\u001b[94m449\u001b[0m \u001b[1m\u001b[94m|\u001b[0m   map!(i, le_u32, | x | { x as i32 })\n>     \u001b[1m\u001b[94m|\u001b[0m   \u001b[1m\u001b[94m-----------------------------------\u001b[0m \u001b[1m\u001b[94min this macro invocation\u001b[0m\n>     \u001b[1m\u001b[94m|\u001b[0m\n>     \u001b[1m\u001b[94m= \u001b[0m\u001b[1mwarning\u001b[0m: this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release!\n>     \u001b[1m\u001b[94m= \u001b[0m\u001b[1mnote\u001b[0m: for more information, see issue #79813 <https://github.com/rust-lang/rust/issues/79813>\n>     \u001b[1m\u001b[94m= \u001b[0m\u001b[1mnote\u001b[0m: macro invocations at the end of a block are treated as expressions\n>     \u001b[1m\u001b[94m= \u001b[0m\u001b[1mnote\u001b[0m: to ignore the value produced by the macro, add a semicolon after the invocation of `map`\n>     \u001b[1m\u001b[94m= \u001b[0m\u001b[1mnote\u001b[0m: this warning originates in the macro `map` (in Nightly builds, run with -Z macro-backtrace for more info)\n> \n> \u001b[1m\u001b[33mwarning\u001b[0m\u001b[1m: trailing semicolon in macro used in expression position\u001b[0m\n>    \u001b[1m\u001b[94m--> \u001b[0m/home/yzzhao3/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/nom-2.2.1/src/macros.rs:514:42\n>     \u001b[1m\u001b[94m|\u001b[0m\n> \u001b[1m\u001b[94m514\u001b[0m \u001b[1m\u001b[94m|\u001b[0m     map!(__impl $i, call!($f), call!($g));\n>     \u001b[1m\u001b[94m|\u001b[0m                                          \u001b[1m\u001b[33m^\u001b[0m\n>     \u001b[1m\u001b[94m|\u001b[0m\n>    \u001b[1m\u001b[94m::: \u001b[0m/home/yzzhao3/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/nom-2.2.1/src/nom.rs:455:3\n>     \u001b[1m\u001b[94m|\u001b[0m\n> \u001b[1m\u001b[94m455\u001b[0m \u001b[1m\u001b[94m|\u001b[0m   map!(i, le_u64, | x | { x as i64 })\n>     \u001b[1m\u001b[94m|\u001b[0m   \u001b[1m\u001b[94m-----------------------------------\u001b[0m \u001b[1m\u001b[94min this macro invocation\u001b[0m\n>     \u001b[1m\u001b[94m|\u001b[0m\n>     \u001b[1m\u001b[94m= \u001b[0m\u001b[1mwarning\u001b[0m: this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release!\n>     \u001b[1m\u001b[94m= \u001b[0m\u001b[1mnote\u001b[0m: for more information, see issue #79813 <https://github.com/rust-lang/rust/issues/79813>\n>     \u001b[1m\u001b[94m= \u001b[0m\u001b[1mnote\u001b[0m: macro invocations at the end of a block are treated as expressions\n>     \u001b[1m\u001b[94m= \u001b[0m\u001b[1mnote\u001b[0m: to ignore the value produced by the macro, add a semicolon after the invocation of `map`\n>     \u001b[1m\u001b[94m= \u001b[0m\u001b[1mnote\u001b[0m: this warning originates in the macro `map` (in Nightly builds, run with -Z macro-backtrace for more info)\n> \n> \u001b[1m\u001b[33mwarning\u001b[0m\u001b[1m: trailing semicolon in macro used in expression position\u001b[0m\n>    \u001b[1m\u001b[94m--> \u001b[0m/home/yzzhao3/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/nom-2.2.1/src/sequence.rs:694:41\n>     \u001b[1m\u001b[94m|\u001b[0m\n> \u001b[1m\u001b[94m694\u001b[0m \u001b[1m\u001b[94m|\u001b[0m       delimited!($i, call!($f), $($rest)*);\n>     \u001b[1m\u001b[94m|\u001b[0m                                           \u001b[1m\u001b[33m^\u001b[0m\n>     \u001b[1m\u001b[94m|\u001b[0m\n>    \u001b[1m\u001b[94m::: \u001b[0m/home/yzzhao3/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/nom-2.2.1/src/nom.rs:601:3\n>     \u001b[1m\u001b[94m|\u001b[0m\n> \u001b[1m\u001b[94m601\u001b[0m \u001b[1m\u001b[94m|\u001b[0m \u001b[1m\u001b[94m/\u001b[0m   flat_map!(input,\n> \u001b[1m\u001b[94m602\u001b[0m \u001b[1m\u001b[94m|\u001b[0m \u001b[1m\u001b[94m|\u001b[0m     recognize!(\n> \u001b[1m\u001b[94m603\u001b[0m \u001b[1m\u001b[94m|\u001b[0m \u001b[1m\u001b[94m|\u001b[0m       tuple!(\n> \u001b[1m\u001b[94m604\u001b[0m \u001b[1m\u001b[94m|\u001b[0m \u001b[1m\u001b[94m|\u001b[0m         opt!(alt!(tag!(\"+\") | tag!(\"-\"))),\n> \u001b[1m\u001b[94m...\u001b[0m   \u001b[1m\u001b[94m|\u001b[0m\n> \u001b[1m\u001b[94m617\u001b[0m \u001b[1m\u001b[94m|\u001b[0m \u001b[1m\u001b[94m|\u001b[0m     parse_to!(f32)\n> \u001b[1m\u001b[94m618\u001b[0m \u001b[1m\u001b[94m|\u001b[0m \u001b[1m\u001b[94m|\u001b[0m   )\n>     \u001b[1m\u001b[94m|\u001b[0m \u001b[1m\u001b[94m|___-\u001b[0m \u001b[1m\u001b[94min this macro invocation\u001b[0m\n>     \u001b[1m\u001b[94m|\u001b[0m\n>     \u001b[1m\u001b[94m= \u001b[0m\u001b[1mwarning\u001b[0m: this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release!\n>     \u001b[1m\u001b[94m= \u001b[0m\u001b[1mnote\u001b[0m: for more information, see issue #79813 <https://github.com/rust-lang/rust/issues/79813>\n>     \u001b[1m\u001b[94m= \u001b[0m\u001b[1mnote\u001b[0m: macro invocations at the end of a block are treated as expressions\n>     \u001b[1m\u001b[94m= \u001b[0m\u001b[1mnote\u001b[0m: to ignore the value produced by the macro, add a semicolon after the invocation of `delimited`\n>     \u001b[1m\u001b[94m= \u001b[0m\u001b[1mnote\u001b[0m: this warning originates in the macro `delimited` which comes from the expansion of the macro `flat_map` (in Nightly builds, run with -Z macro-backtrace for more info)\n> \n> \u001b[1m\u001b[33mwarning\u001b[0m\u001b[1m: trailing semicolon in macro used in expression position\u001b[0m\n>    \u001b[1m\u001b[94m--> \u001b[0m/home/yzzhao3/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/nom-2.2.1/src/macros.rs:776:24\n>     \u001b[1m\u001b[94m|\u001b[0m\n> \u001b[1m\u001b[94m776\u001b[0m \u001b[1m\u001b[94m|\u001b[0m       opt!($i, call!($f));\n>     \u001b[1m\u001b[94m|\u001b[0m                          \u001b[1m\u001b[33m^\u001b[0m\n>     \u001b[1m\u001b[94m|\u001b[0m\n>    \u001b[1m\u001b[94m::: \u001b[0m/home/yzzhao3/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/nom-2.2.1/src/nom.rs:601:3\n>     \u001b[1m\u001b[94m|\u001b[0m\n> \u001b[1m\u001b[94m601\u001b[0m \u001b[1m\u001b[94m|\u001b[0m \u001b[1m\u001b[94m/\u001b[0m   flat_map!(input,\n> \u001b[1m\u001b[94m602\u001b[0m \u001b[1m\u001b[94m|\u001b[0m \u001b[1m\u001b[94m|\u001b[0m     recognize!(\n> \u001b[1m\u001b[94m603\u001b[0m \u001b[1m\u001b[94m|\u001b[0m \u001b[1m\u001b[94m|\u001b[0m       tuple!(\n> \u001b[1m\u001b[94m604\u001b[0m \u001b[1m\u001b[94m|\u001b[0m \u001b[1m\u001b[94m|\u001b[0m         opt!(alt!(tag!(\"+\") | tag!(\"-\"))),\n> \u001b[1m\u001b[94m...\u001b[0m   \u001b[1m\u001b[94m|\u001b[0m\n> \u001b[1m\u001b[94m617\u001b[0m \u001b[1m\u001b[94m|\u001b[0m \u001b[1m\u001b[94m|\u001b[0m     parse_to!(f32)\n> \u001b[1m\u001b[94m618\u001b[0m \u001b[1m\u001b[94m|\u001b[0m \u001b[1m\u001b[94m|\u001b[0m   )\n>     \u001b[1m\u001b[94m|\u001b[0m \u001b[1m\u001b[94m|___-\u001b[0m \u001b[1m\u001b[94min this macro invocation\u001b[0m\n>     \u001b[1m\u001b[94m|\u001b[0m\n>     \u001b[1m\u001b[94m= \u001b[0m\u001b[1mwarning\u001b[0m: this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release!\n>     \u001b[1m\u001b[94m= \u001b[0m\u001b[1mnote\u001b[0m: for more information, see issue #79813 <https://github.com/rust-lang/rust/issues/79813>\n>     \u001b[1m\u001b[94m= \u001b[0m\u001b[1mnote\u001b[0m: macro invocations at the end of a block are treated as expressions\n>     \u001b[1m\u001b[94m= \u001b[0m\u001b[1mnote\u001b[0m: to ignore the value produced by the macro, add a semicolon after the invocation of `opt`\n>     \u001b[1m\u001b[94m= \u001b[0m\u001b[1mnote\u001b[0m: this warning originates in the macro `opt` which comes from the expansion of the macro `flat_map` (in Nightly builds, run with -Z macro-backtrace for more info)\n> \n> \u001b[1m\u001b[33mwarning\u001b[0m\u001b[1m: trailing semicolon in macro used in expression position\u001b[0m\n>    \u001b[1m\u001b[94m--> \u001b[0m/home/yzzhao3/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/nom-2.2.1/src/macros.rs:776:24\n>     \u001b[1m\u001b[94m|\u001b[0m\n> \u001b[1m\u001b[94m776\u001b[0m \u001b[1m\u001b[94m|\u001b[0m       opt!($i, call!($f));\n>     \u001b[1m\u001b[94m|\u001b[0m                          \u001b[1m\u001b[33m^\u001b[0m\n>     \u001b[1m\u001b[94m|\u001b[0m\n>    \u001b[1m\u001b[94m::: \u001b[0m/home/yzzhao3/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/nom-2.2.1/src/nom.rs:601:3\n>     \u001b[1m\u001b[94m|\u001b[0m\n> \u001b[1m\u001b[94m601\u001b[0m \u001b[1m\u001b[94m|\u001b[0m \u001b[1m\u001b[94m/\u001b[0m   flat_map!(input,\n> \u001b[1m\u001b[94m602\u001b[0m \u001b[1m\u001b[94m|\u001b[0m \u001b[1m\u001b[94m|\u001b[0m     recognize!(\n> \u001b[1m\u001b[94m603\u001b[0m \u001b[1m\u001b[94m|\u001b[0m \u001b[1m\u001b[94m|\u001b[0m       tuple!(\n> \u001b[1m\u001b[94m604\u001b[0m \u001b[1m\u001b[94m|\u001b[0m \u001b[1m\u001b[94m|\u001b[0m         opt!(alt!(tag!(\"+\") | tag!(\"-\"))),\n> \u001b[1m\u001b[94m...\u001b[0m   \u001b[1m\u001b[94m|\u001b[0m\n> \u001b[1m\u001b[94m617\u001b[0m \u001b[1m\u001b[94m|\u001b[0m \u001b[1m\u001b[94m|\u001b[0m     parse_to!(f32)\n> \u001b[1m\u001b[94m618\u001b[0m \u001b[1m\u001b[94m|\u001b[0m \u001b[1m\u001b[94m|\u001b[0m   )\n>     \u001b[1m\u001b[94m|\u001b[0m \u001b[1m\u001b[94m|___-\u001b[0m \u001b[1m\u001b[94min this macro invocation\u001b[0m\n>     \u001b[1m\u001b[94m|\u001b[0m\n>     \u001b[1m\u001b[94m= \u001b[0m\u001b[1mwarning\u001b[0m: this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release!\n>     \u001b[1m\u001b[94m= \u001b[0m\u001b[1mnote\u001b[0m: for more information, see issue #79813 <https://github.com/rust-lang/rust/issues/79813>\n>     \u001b[1m\u001b[94m= \u001b[0m\u001b[1mnote\u001b[0m: macro invocations at the end of a block are treated as expressions\n>     \u001b[1m\u001b[94m= \u001b[0m\u001b[1mnote\u001b[0m: to ignore the value produced by the macro, add a semicolon after the invocation of `opt`\n>     \u001b[1m\u001b[94m= \u001b[0m\u001b[1mnote\u001b[0m: this warning originates in the macro `opt` which comes from the expansion of the macro `flat_map` (in Nightly builds, run with -Z macro-backtrace for more info)\n> \n> \u001b[1m\u001b[33mwarning\u001b[0m\u001b[1m: trailing semicolon in macro used in expression position\u001b[0m\n>    \u001b[1m\u001b[94m--> \u001b[0m/home/yzzhao3/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/nom-2.2.1/src/sequence.rs:508:60\n>     \u001b[1m\u001b[94m|\u001b[0m\n> \u001b[1m\u001b[94m508\u001b[0m \u001b[1m\u001b[94m|\u001b[0m       tuple_parser!($i, $consumed, ($($parsed),*), call!($e));\n>     \u001b[1m\u001b[94m|\u001b[0m                                                              \u001b[1m\u001b[33m^\u001b[0m\n>     \u001b[1m\u001b[94m|\u001b[0m\n>    \u001b[1m\u001b[94m::: \u001b[0m/home/yzzhao3/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/nom-2.2.1/src/nom.rs:601:3\n>     \u001b[1m\u001b[94m|\u001b[0m\n> \u001b[1m\u001b[94m601\u001b[0m \u001b[1m\u001b[94m|\u001b[0m \u001b[1m\u001b[94m/\u001b[0m   flat_map!(input,\n> \u001b[1m\u001b[94m602\u001b[0m \u001b[1m\u001b[94m|\u001b[0m \u001b[1m\u001b[94m|\u001b[0m     recognize!(\n> \u001b[1m\u001b[94m603\u001b[0m \u001b[1m\u001b[94m|\u001b[0m \u001b[1m\u001b[94m|\u001b[0m       tuple!(\n> \u001b[1m\u001b[94m604\u001b[0m \u001b[1m\u001b[94m|\u001b[0m \u001b[1m\u001b[94m|\u001b[0m         opt!(alt!(tag!(\"+\") | tag!(\"-\"))),\n> \u001b[1m\u001b[94m...\u001b[0m   \u001b[1m\u001b[94m|\u001b[0m\n> \u001b[1m\u001b[94m617\u001b[0m \u001b[1m\u001b[94m|\u001b[0m \u001b[1m\u001b[94m|\u001b[0m     parse_to!(f32)\n> \u001b[1m\u001b[94m618\u001b[0m \u001b[1m\u001b[94m|\u001b[0m \u001b[1m\u001b[94m|\u001b[0m   )\n>     \u001b[1m\u001b[94m|\u001b[0m \u001b[1m\u001b[94m|___-\u001b[0m \u001b[1m\u001b[94min this macro invocation\u001b[0m\n>     \u001b[1m\u001b[94m|\u001b[0m\n>     \u001b[1m\u001b[94m= \u001b[0m\u001b[1mwarning\u001b[0m: this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release!\n>     \u001b[1m\u001b[94m= \u001b[0m\u001b[1mnote\u001b[0m: for more information, see issue #79813 <https://github.com/rust-lang/rust/issues/79813>\n>     \u001b[1m\u001b[94m= \u001b[0m\u001b[1mnote\u001b[0m: macro invocations at the end of a block are treated as expressions\n>     \u001b[1m\u001b[94m= \u001b[0m\u001b[1mnote\u001b[0m: to ignore the value produced by the macro, add a semicolon after the invocation of `tuple_parser`\n>     \u001b[1m\u001b[94m= \u001b[0m\u001b[1mnote\u001b[0m: this warning originates in the macro `tuple_parser` which comes from the expansion of the macro `flat_map` (in Nightly builds, run with -Z macro-backtrace for more info)\n> \n> \u001b[1m\u001b[33mwarning\u001b[0m\u001b[1m: trailing semicolon in macro used in expression position\u001b[0m\n>    \u001b[1m\u001b[94m--> \u001b[0m/home/yzzhao3/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/nom-2.2.1/src/sequence.rs:508:60\n>     \u001b[1m\u001b[94m|\u001b[0m\n> \u001b[1m\u001b[94m508\u001b[0m \u001b[1m\u001b[94m|\u001b[0m       tuple_parser!($i, $consumed, ($($parsed),*), call!($e));\n>     \u001b[1m\u001b[94m|\u001b[0m                                                              \u001b[1m\u001b[33m^\u001b[0m\n>     \u001b[1m\u001b[94m|\u001b[0m\n>    \u001b[1m\u001b[94m::: \u001b[0m/home/yzzhao3/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/nom-2.2.1/src/nom.rs:601:3\n>     \u001b[1m\u001b[94m|\u001b[0m\n> \u001b[1m\u001b[94m601\u001b[0m \u001b[1m\u001b[94m|\u001b[0m \u001b[1m\u001b[94m/\u001b[0m   flat_map!(input,\n> \u001b[1m\u001b[94m602\u001b[0m \u001b[1m\u001b[94m|\u001b[0m \u001b[1m\u001b[94m|\u001b[0m     recognize!(\n> \u001b[1m\u001b[94m603\u001b[0m \u001b[1m\u001b[94m|\u001b[0m \u001b[1m\u001b[94m|\u001b[0m       tuple!(\n> \u001b[1m\u001b[94m604\u001b[0m \u001b[1m\u001b[94m|\u001b[0m \u001b[1m\u001b[94m|\u001b[0m         opt!(alt!(tag!(\"+\") | tag!(\"-\"))),\n> \u001b[1m\u001b[94m...\u001b[0m   \u001b[1m\u001b[94m|\u001b[0m\n> \u001b[1m\u001b[94m617\u001b[0m \u001b[1m\u001b[94m|\u001b[0m \u001b[1m\u001b[94m|\u001b[0m     parse_to!(f32)\n> \u001b[1m\u001b[94m618\u001b[0m \u001b[1m\u001b[94m|\u001b[0m \u001b[1m\u001b[94m|\u001b[0m   )\n>     \u001b[1m\u001b[94m|\u001b[0m \u001b[1m\u001b[94m|___-\u001b[0m \u001b[1m\u001b[94min this macro invocation\u001b[0m\n>     \u001b[1m\u001b[94m|\u001b[0m\n>     \u001b[1m\u001b[94m= \u001b[0m\u001b[1mwarning\u001b[0m: this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release!\n>     \u001b[1m\u001b[94m= \u001b[0m\u001b[1mnote\u001b[0m: for more information, see issue #79813 <https://github.com/rust-lang/rust/issues/79813>\n>     \u001b[1m\u001b[94m= \u001b[0m\u001b[1mnote\u001b[0m: macro invocations at the end of a block are treated as expressions\n>     \u001b[1m\u001b[94m= \u001b[0m\u001b[1mnote\u001b[0m: to ignore the value produced by the macro, add a semicolon after the invocation of `tuple_parser`\n>     \u001b[1m\u001b[94m= \u001b[0m\u001b[1mnote\u001b[0m: this warning originates in the macro `tuple_parser` which comes from the expansion of the macro `flat_map` (in Nightly builds, run with -Z macro-backtrace for more info)\n> \n> \u001b[1m\u001b[33mwarning\u001b[0m\u001b[1m: trailing semicolon in macro used in expression position\u001b[0m\n>    \u001b[1m\u001b[94m--> \u001b[0m/home/yzzhao3/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/nom-2.2.1/src/sequence.rs:694:41\n>     \u001b[1m\u001b[94m|\u001b[0m\n> \u001b[1m\u001b[94m694\u001b[0m \u001b[1m\u001b[94m|\u001b[0m       delimited!($i, call!($f), $($rest)*);\n>     \u001b[1m\u001b[94m|\u001b[0m                                           \u001b[1m\u001b[33m^\u001b[0m\n>     \u001b[1m\u001b[94m|\u001b[0m\n>    \u001b[1m\u001b[94m::: \u001b[0m/home/yzzhao3/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/nom-2.2.1/src/nom.rs:624:3\n>     \u001b[1m\u001b[94m|\u001b[0m\n> \u001b[1m\u001b[94m624\u001b[0m \u001b[1m\u001b[94m|\u001b[0m \u001b[1m\u001b[94m/\u001b[0m   flat_map!(input,\n> \u001b[1m\u001b[94m625\u001b[0m \u001b[1m\u001b[94m|\u001b[0m \u001b[1m\u001b[94m|\u001b[0m     recognize!(\n> \u001b[1m\u001b[94m626\u001b[0m \u001b[1m\u001b[94m|\u001b[0m \u001b[1m\u001b[94m|\u001b[0m       tuple!(\n> \u001b[1m\u001b[94m627\u001b[0m \u001b[1m\u001b[94m|\u001b[0m \u001b[1m\u001b[94m|\u001b[0m         opt!(alt!(tag!(\"+\") | tag!(\"-\"))),\n> \u001b[1m\u001b[94m...\u001b[0m   \u001b[1m\u001b[94m|\u001b[0m\n> \u001b[1m\u001b[94m640\u001b[0m \u001b[1m\u001b[94m|\u001b[0m \u001b[1m\u001b[94m|\u001b[0m     parse_to!(f32)\n> \u001b[1m\u001b[94m641\u001b[0m \u001b[1m\u001b[94m|\u001b[0m \u001b[1m\u001b[94m|\u001b[0m   )\n>     \u001b[1m\u001b[94m|\u001b[0m \u001b[1m\u001b[94m|___-\u001b[0m \u001b[1m\u001b[94min this macro invocation\u001b[0m\n>     \u001b[1m\u001b[94m|\u001b[0m\n>     \u001b[1m\u001b[94m= \u001b[0m\u001b[1mwarning\u001b[0m: this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release!\n>     \u001b[1m\u001b[94m= \u001b[0m\u001b[1mnote\u001b[0m: for more information, see issue #79813 <https://github.com/rust-lang/rust/issues/79813>\n>     \u001b[1m\u001b[94m= \u001b[0m\u001b[1mnote\u001b[0m: macro invocations at the end of a block are treated as expressions\n>     \u001b[1m\u001b[94m= \u001b[0m\u001b[1mnote\u001b[0m: to ignore the value produced by the macro, add a semicolon after the invocation of `delimited`\n>     \u001b[1m\u001b[94m= \u001b[0m\u001b[1mnote\u001b[0m: this warning originates in the macro `delimited` which comes from the expansion of the macro `flat_map` (in Nightly builds, run with -Z macro-backtrace for more info)\n> \n> \u001b[1m\u001b[33mwarning\u001b[0m\u001b[1m: trailing semicolon in macro used in expression position\u001b[0m\n>    \u001b[1m\u001b[94m--> \u001b[0m/home/yzzhao3/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/nom-2.2.1/src/macros.rs:776:24\n>     \u001b[1m\u001b[94m|\u001b[0m\n> \u001b[1m\u001b[94m776\u001b[0m \u001b[1m\u001b[94m|\u001b[0m       opt!($i, call!($f));\n>     \u001b[1m\u001b[94m|\u001b[0m                          \u001b[1m\u001b[33m^\u001b[0m\n>     \u001b[1m\u001b[94m|\u001b[0m\n>    \u001b[1m\u001b[94m::: \u001b[0m/home/yzzhao3/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/nom-2.2.1/src/nom.rs:624:3\n>     \u001b[1m\u001b[94m|\u001b[0m\n> \u001b[1m\u001b[94m624\u001b[0m \u001b[1m\u001b[94m|\u001b[0m \u001b[1m\u001b[94m/\u001b[0m   flat_map!(input,\n> \u001b[1m\u001b[94m625\u001b[0m \u001b[1m\u001b[94m|\u001b[0m \u001b[1m\u001b[94m|\u001b[0m     recognize!(\n> \u001b[1m\u001b[94m626\u001b[0m \u001b[1m\u001b[94m|\u001b[0m \u001b[1m\u001b[94m|\u001b[0m       tuple!(\n> \u001b[1m\u001b[94m627\u001b[0m \u001b[1m\u001b[94m|\u001b[0m \u001b[1m\u001b[94m|\u001b[0m         opt!(alt!(tag!(\"+\") | tag!(\"-\"))),\n> \u001b[1m\u001b[94m...\u001b[0m   \u001b[1m\u001b[94m|\u001b[0m\n> \u001b[1m\u001b[94m640\u001b[0m \u001b[1m\u001b[94m|\u001b[0m \u001b[1m\u001b[94m|\u001b[0m     parse_to!(f32)\n> \u001b[1m\u001b[94m641\u001b[0m \u001b[1m\u001b[94m|\u001b[0m \u001b[1m\u001b[94m|\u001b[0m   )\n>     \u001b[1m\u001b[94m|\u001b[0m \u001b[1m\u001b[94m|___-\u001b[0m \u001b[1m\u001b[94min this macro invocation\u001b[0m\n>     \u001b[1m\u001b[94m|\u001b[0m\n>     \u001b[1m\u001b[94m= \u001b[0m\u001b[1mwarning\u001b[0m: this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release!\n>     \u001b[1m\u001b[94m= \u001b[0m\u001b[1mnote\u001b[0m: for more information, see issue #79813 <https://github.com/rust-lang/rust/issues/79813>\n>     \u001b[1m\u001b[94m= \u001b[0m\u001b[1mnote\u001b[0m: macro invocations at the end of a block are treated as expressions\n>     \u001b[1m\u001b[94m= \u001b[0m\u001b[1mnote\u001b[0m: to ignore the value produced by the macro, add a semicolon after the invocation of `opt`\n>     \u001b[1m\u001b[94m= \u001b[0m\u001b[1mnote\u001b[0m: this warning originates in the macro `opt` which comes from the expansion of the macro `flat_map` (in Nightly builds, run with -Z macro-backtrace for more info)\n> \n> \u001b[1m\u001b[33mwarning\u001b[0m\u001b[1m: trailing semicolon in macro used in expression position\u001b[0m\n>    \u001b[1m\u001b[94m--> \u001b[0m/home/yzzhao3/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/nom-2.2.1/src/macros.rs:776:24\n>     \u001b[1m\u001b[94m|\u001b[0m\n> \u001b[1m\u001b[94m776\u001b[0m \u001b[1m\u001b[94m|\u001b[0m       opt!($i, call!($f));\n>     \u001b[1m\u001b[94m|\u001b[0m                          \u001b[1m\u001b[33m^\u001b[0m\n>     \u001b[1m\u001b[94m|\u001b[0m\n>    \u001b[1m\u001b[94m::: \u001b[0m/home/yzzhao3/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/nom-2.2.1/src/nom.rs:624:3\n>     \u001b[1m\u001b[94m|\u001b[0m\n> \u001b[1m\u001b[94m624\u001b[0m \u001b[1m\u001b[94m|\u001b[0m \u001b[1m\u001b[94m/\u001b[0m   flat_map!(input,\n> \u001b[1m\u001b[94m625\u001b[0m \u001b[1m\u001b[94m|\u001b[0m \u001b[1m\u001b[94m|\u001b[0m     recognize!(\n> \u001b[1m\u001b[94m626\u001b[0m \u001b[1m\u001b[94m|\u001b[0m \u001b[1m\u001b[94m|\u001b[0m       tuple!(\n> \u001b[1m\u001b[94m627\u001b[0m \u001b[1m\u001b[94m|\u001b[0m \u001b[1m\u001b[94m|\u001b[0m         opt!(alt!(tag!(\"+\") | tag!(\"-\"))),\n> \u001b[1m\u001b[94m...\u001b[0m   \u001b[1m\u001b[94m|\u001b[0m\n> \u001b[1m\u001b[94m640\u001b[0m \u001b[1m\u001b[94m|\u001b[0m \u001b[1m\u001b[94m|\u001b[0m     parse_to!(f32)\n> \u001b[1m\u001b[94m641\u001b[0m \u001b[1m\u001b[94m|\u001b[0m \u001b[1m\u001b[94m|\u001b[0m   )\n>     \u001b[1m\u001b[94m|\u001b[0m \u001b[1m\u001b[94m|___-\u001b[0m \u001b[1m\u001b[94min this macro invocation\u001b[0m\n>     \u001b[1m\u001b[94m|\u001b[0m\n>     \u001b[1m\u001b[94m= \u001b[0m\u001b[1mwarning\u001b[0m: this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release!\n>     \u001b[1m\u001b[94m= \u001b[0m\u001b[1mnote\u001b[0m: for more information, see issue #79813 <https://github.com/rust-lang/rust/issues/79813>\n>     \u001b[1m\u001b[94m= \u001b[0m\u001b[1mnote\u001b[0m: macro invocations at the end of a block are treated as expressions\n>     \u001b[1m\u001b[94m= \u001b[0m\u001b[1mnote\u001b[0m: to ignore the value produced by the macro, add a semicolon after the invocation of `opt`\n>     \u001b[1m\u001b[94m= \u001b[0m\u001b[1mnote\u001b[0m: this warning originates in the macro `opt` which comes from the expansion of the macro `flat_map` (in Nightly builds, run with -Z macro-backtrace for more info)\n> \n> \u001b[1m\u001b[33mwarning\u001b[0m\u001b[1m: trailing semicolon in macro used in expression position\u001b[0m\n>    \u001b[1m\u001b[94m--> \u001b[0m/home/yzzhao3/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/nom-2.2.1/src/sequence.rs:508:60\n>     \u001b[1m\u001b[94m|\u001b[0m\n> \u001b[1m\u001b[94m508\u001b[0m \u001b[1m\u001b[94m|\u001b[0m       tuple_parser!($i, $consumed, ($($parsed),*), call!($e));\n>     \u001b[1m\u001b[94m|\u001b[0m                                                              \u001b[1m\u001b[33m^\u001b[0m\n>     \u001b[1m\u001b[94m|\u001b[0m\n>    \u001b[1m\u001b[94m::: \u001b[0m/home/yzzhao3/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/nom-2.2.1/src/nom.rs:624:3\n>     \u001b[1m\u001b[94m|\u001b[0m\n> \u001b[1m\u001b[94m624\u001b[0m \u001b[1m\u001b[94m|\u001b[0m \u001b[1m\u001b[94m/\u001b[0m   flat_map!(input,\n> \u001b[1m\u001b[94m625\u001b[0m \u001b[1m\u001b[94m|\u001b[0m \u001b[1m\u001b[94m|\u001b[0m     recognize!(\n> \u001b[1m\u001b[94m626\u001b[0m \u001b[1m\u001b[94m|\u001b[0m \u001b[1m\u001b[94m|\u001b[0m       tuple!(\n> \u001b[1m\u001b[94m627\u001b[0m \u001b[1m\u001b[94m|\u001b[0m \u001b[1m\u001b[94m|\u001b[0m         opt!(alt!(tag!(\"+\") | tag!(\"-\"))),\n> \u001b[1m\u001b[94m...\u001b[0m   \u001b[1m\u001b[94m|\u001b[0m\n> \u001b[1m\u001b[94m640\u001b[0m \u001b[1m\u001b[94m|\u001b[0m \u001b[1m\u001b[94m|\u001b[0m     parse_to!(f32)\n> \u001b[1m\u001b[94m641\u001b[0m \u001b[1m\u001b[94m|\u001b[0m \u001b[1m\u001b[94m|\u001b[0m   )\n>     \u001b[1m\u001b[94m|\u001b[0m \u001b[1m\u001b[94m|___-\u001b[0m \u001b[1m\u001b[94min this macro invocation\u001b[0m\n>     \u001b[1m\u001b[94m|\u001b[0m\n>     \u001b[1m\u001b[94m= \u001b[0m\u001b[1mwarning\u001b[0m: this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release!\n>     \u001b[1m\u001b[94m= \u001b[0m\u001b[1mnote\u001b[0m: for more information, see issue #79813 <https://github.com/rust-lang/rust/issues/79813>\n>     \u001b[1m\u001b[94m= \u001b[0m\u001b[1mnote\u001b[0m: macro invocations at the end of a block are treated as expressions\n>     \u001b[1m\u001b[94m= \u001b[0m\u001b[1mnote\u001b[0m: to ignore the value produced by the macro, add a semicolon after the invocation of `tuple_parser`\n>     \u001b[1m\u001b[94m= \u001b[0m\u001b[1mnote\u001b[0m: this warning originates in the macro `tuple_parser` which comes from the expansion of the macro `flat_map` (in Nightly builds, run with -Z macro-backtrace for more info)\n> \n> \u001b[1m\u001b[33mwarning\u001b[0m\u001b[1m: trailing semicolon in macro used in expression position\u001b[0m\n>    \u001b[1m\u001b[94m--> \u001b[0m/home/yzzhao3/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/nom-2.2.1/src/sequence.rs:508:60\n>     \u001b[1m\u001b[94m|\u001b[0m\n> \u001b[1m\u001b[94m508\u001b[0m \u001b[1m\u001b[94m|\u001b[0m       tuple_parser!($i, $consumed, ($($parsed),*), call!($e));\n>     \u001b[1m\u001b[94m|\u001b[0m                                                              \u001b[1m\u001b[33m^\u001b[0m\n>     \u001b[1m\u001b[94m|\u001b[0m\n>    \u001b[1m\u001b[94m::: \u001b[0m/home/yzzhao3/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/nom-2.2.1/src/nom.rs:624:3\n>     \u001b[1m\u001b[94m|\u001b[0m\n> \u001b[1m\u001b[94m624\u001b[0m \u001b[1m\u001b[94m|\u001b[0m \u001b[1m\u001b[94m/\u001b[0m   flat_map!(input,\n> \u001b[1m\u001b[94m625\u001b[0m \u001b[1m\u001b[94m|\u001b[0m \u001b[1m\u001b[94m|\u001b[0m     recognize!(\n> \u001b[1m\u001b[94m626\u001b[0m \u001b[1m\u001b[94m|\u001b[0m \u001b[1m\u001b[94m|\u001b[0m       tuple!(\n> \u001b[1m\u001b[94m627\u001b[0m \u001b[1m\u001b[94m|\u001b[0m \u001b[1m\u001b[94m|\u001b[0m         opt!(alt!(tag!(\"+\") | tag!(\"-\"))),\n> \u001b[1m\u001b[94m...\u001b[0m   \u001b[1m\u001b[94m|\u001b[0m\n> \u001b[1m\u001b[94m640\u001b[0m \u001b[1m\u001b[94m|\u001b[0m \u001b[1m\u001b[94m|\u001b[0m     parse_to!(f32)\n> \u001b[1m\u001b[94m641\u001b[0m \u001b[1m\u001b[94m|\u001b[0m \u001b[1m\u001b[94m|\u001b[0m   )\n>     \u001b[1m\u001b[94m|\u001b[0m \u001b[1m\u001b[94m|___-\u001b[0m \u001b[1m\u001b[94min this macro invocation\u001b[0m\n>     \u001b[1m\u001b[94m|\u001b[0m\n>     \u001b[1m\u001b[94m= \u001b[0m\u001b[1mwarning\u001b[0m: this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release!\n>     \u001b[1m\u001b[94m= \u001b[0m\u001b[1mnote\u001b[0m: for more information, see issue #79813 <https://github.com/rust-lang/rust/issues/79813>\n>     \u001b[1m\u001b[94m= \u001b[0m\u001b[1mnote\u001b[0m: macro invocations at the end of a block are treated as expressions\n>     \u001b[1m\u001b[94m= \u001b[0m\u001b[1mnote\u001b[0m: to ignore the value produced by the macro, add a semicolon after the invocation of `tuple_parser`\n>     \u001b[1m\u001b[94m= \u001b[0m\u001b[1mnote\u001b[0m: this warning originates in the macro `tuple_parser` which comes from the expansion of the macro `flat_map` (in Nightly builds, run with -Z macro-backtrace for more info)\n> \n> \u001b[1m\u001b[33mwarning\u001b[0m\u001b[1m: trailing semicolon in macro used in expression position\u001b[0m\n>    \u001b[1m\u001b[94m--> \u001b[0m/home/yzzhao3/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/nom-2.2.1/src/sequence.rs:694:41\n>     \u001b[1m\u001b[94m|\u001b[0m\n> \u001b[1m\u001b[94m694\u001b[0m \u001b[1m\u001b[94m|\u001b[0m       delimited!($i, call!($f), $($rest)*);\n>     \u001b[1m\u001b[94m|\u001b[0m                                           \u001b[1m\u001b[33m^\u001b[0m\n>     \u001b[1m\u001b[94m|\u001b[0m\n>    \u001b[1m\u001b[94m::: \u001b[0m/home/yzzhao3/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/nom-2.2.1/src/nom.rs:647:3\n>     \u001b[1m\u001b[94m|\u001b[0m\n> \u001b[1m\u001b[94m647\u001b[0m \u001b[1m\u001b[94m|\u001b[0m \u001b[1m\u001b[94m/\u001b[0m   flat_map!(input,\n> \u001b[1m\u001b[94m648\u001b[0m \u001b[1m\u001b[94m|\u001b[0m \u001b[1m\u001b[94m|\u001b[0m     recognize!(\n> \u001b[1m\u001b[94m649\u001b[0m \u001b[1m\u001b[94m|\u001b[0m \u001b[1m\u001b[94m|\u001b[0m       tuple!(\n> \u001b[1m\u001b[94m650\u001b[0m \u001b[1m\u001b[94m|\u001b[0m \u001b[1m\u001b[94m|\u001b[0m         opt!(alt!(tag!(\"+\") | tag!(\"-\"))),\n> \u001b[1m\u001b[94m...\u001b[0m   \u001b[1m\u001b[94m|\u001b[0m\n> \u001b[1m\u001b[94m663\u001b[0m \u001b[1m\u001b[94m|\u001b[0m \u001b[1m\u001b[94m|\u001b[0m     parse_to!(f64)\n> \u001b[1m\u001b[94m664\u001b[0m \u001b[1m\u001b[94m|\u001b[0m \u001b[1m\u001b[94m|\u001b[0m   )\n>     \u001b[1m\u001b[94m|\u001b[0m \u001b[1m\u001b[94m|___-\u001b[0m \u001b[1m\u001b[94min this macro invocation\u001b[0m\n>     \u001b[1m\u001b[94m|\u001b[0m\n>     \u001b[1m\u001b[94m= \u001b[0m\u001b[1mwarning\u001b[0m: this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release!\n>     \u001b[1m\u001b[94m= \u001b[0m\u001b[1mnote\u001b[0m: for more information, see issue #79813 <https://github.com/rust-lang/rust/issues/79813>\n>     \u001b[1m\u001b[94m= \u001b[0m\u001b[1mnote\u001b[0m: macro invocations at the end of a block are treated as expressions\n>     \u001b[1m\u001b[94m= \u001b[0m\u001b[1mnote\u001b[0m: to ignore the value produced by the macro, add a semicolon after the invocation of `delimited`\n>     \u001b[1m\u001b[94m= \u001b[0m\u001b[1mnote\u001b[0m: this warning originates in the macro `delimited` which comes from the expansion of the macro `flat_map` (in Nightly builds, run with -Z macro-backtrace for more info)\n> \n> \u001b[1m\u001b[33mwarning\u001b[0m\u001b[1m: trailing semicolon in macro used in expression position\u001b[0m\n>    \u001b[1m\u001b[94m--> \u001b[0m/home/yzzhao3/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/nom-2.2.1/src/macros.rs:776:24\n>     \u001b[1m\u001b[94m|\u001b[0m\n> \u001b[1m\u001b[94m776\u001b[0m \u001b[1m\u001b[94m|\u001b[0m       opt!($i, call!($f));\n>     \u001b[1m\u001b[94m|\u001b[0m                          \u001b[1m\u001b[33m^\u001b[0m\n>     \u001b[1m\u001b[94m|\u001b[0m\n>    \u001b[1m\u001b[94m::: \u001b[0m/home/yzzhao3/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/nom-2.2.1/src/nom.rs:647:3\n>     \u001b[1m\u001b[94m|\u001b[0m\n> \u001b[1m\u001b[94m647\u001b[0m \u001b[1m\u001b[94m|\u001b[0m \u001b[1m\u001b[94m/\u001b[0m   flat_map!(input,\n> \u001b[1m\u001b[94m648\u001b[0m \u001b[1m\u001b[94m|\u001b[0m \u001b[1m\u001b[94m|\u001b[0m     recognize!(\n> \u001b[1m\u001b[94m649\u001b[0m \u001b[1m\u001b[94m|\u001b[0m \u001b[1m\u001b[94m|\u001b[0m       tuple!(\n> \u001b[1m\u001b[94m650\u001b[0m \u001b[1m\u001b[94m|\u001b[0m \u001b[1m\u001b[94m|\u001b[0m         opt!(alt!(tag!(\"+\") | tag!(\"-\"))),\n> \u001b[1m\u001b[94m...\u001b[0m   \u001b[1m\u001b[94m|\u001b[0m\n> \u001b[1m\u001b[94m663\u001b[0m \u001b[1m\u001b[94m|\u001b[0m \u001b[1m\u001b[94m|\u001b[0m     parse_to!(f64)\n> \u001b[1m\u001b[94m664\u001b[0m \u001b[1m\u001b[94m|\u001b[0m \u001b[1m\u001b[94m|\u001b[0m   )\n>     \u001b[1m\u001b[94m|\u001b[0m \u001b[1m\u001b[94m|___-\u001b[0m \u001b[1m\u001b[94min this macro invocation\u001b[0m\n>     \u001b[1m\u001b[94m|\u001b[0m\n>     \u001b[1m\u001b[94m= \u001b[0m\u001b[1mwarning\u001b[0m: this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release!\n>     \u001b[1m\u001b[94m= \u001b[0m\u001b[1mnote\u001b[0m: for more information, see issue #79813 <https://github.com/rust-lang/rust/issues/79813>\n>     \u001b[1m\u001b[94m= \u001b[0m\u001b[1mnote\u001b[0m: macro invocations at the end of a block are treated as expressions\n>     \u001b[1m\u001b[94m= \u001b[0m\u001b[1mnote\u001b[0m: to ignore the value produced by the macro, add a semicolon after the invocation of `opt`\n>     \u001b[1m\u001b[94m= \u001b[0m\u001b[1mnote\u001b[0m: this warning originates in the macro `opt` which comes from the expansion of the macro `flat_map` (in Nightly builds, run with -Z macro-backtrace for more info)\n> \n> \u001b[1m\u001b[33mwarning\u001b[0m\u001b[1m: trailing semicolon in macro used in expression position\u001b[0m\n>    \u001b[1m\u001b[94m--> \u001b[0m/home/yzzhao3/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/nom-2.2.1/src/macros.rs:776:24\n>     \u001b[1m\u001b[94m|\u001b[0m\n> \u001b[1m\u001b[94m776\u001b[0m \u001b[1m\u001b[94m|\u001b[0m       opt!($i, call!($f));\n>     \u001b[1m\u001b[94m|\u001b[0m                          \u001b[1m\u001b[33m^\u001b[0m\n>     \u001b[1m\u001b[94m|\u001b[0m\n>    \u001b[1m\u001b[94m::: \u001b[0m/home/yzzhao3/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/nom-2.2.1/src/nom.rs:647:3\n>     \u001b[1m\u001b[94m|\u001b[0m\n> \u001b[1m\u001b[94m647\u001b[0m \u001b[1m\u001b[94m|\u001b[0m \u001b[1m\u001b[94m/\u001b[0m   flat_map!(input,\n> \u001b[1m\u001b[94m648\u001b[0m \u001b[1m\u001b[94m|\u001b[0m \u001b[1m\u001b[94m|\u001b[0m     recognize!(\n> \u001b[1m\u001b[94m649\u001b[0m \u001b[1m\u001b[94m|\u001b[0m \u001b[1m\u001b[94m|\u001b[0m       tuple!(\n> \u001b[1m\u001b[94m650\u001b[0m \u001b[1m\u001b[94m|\u001b[0m \u001b[1m\u001b[94m|\u001b[0m         opt!(alt!(tag!(\"+\") | tag!(\"-\"))),\n> \u001b[1m\u001b[94m...\u001b[0m   \u001b[1m\u001b[94m|\u001b[0m\n> \u001b[1m\u001b[94m663\u001b[0m \u001b[1m\u001b[94m|\u001b[0m \u001b[1m\u001b[94m|\u001b[0m     parse_to!(f64)\n> \u001b[1m\u001b[94m664\u001b[0m \u001b[1m\u001b[94m|\u001b[0m \u001b[1m\u001b[94m|\u001b[0m   )\n>     \u001b[1m\u001b[94m|\u001b[0m \u001b[1m\u001b[94m|___-\u001b[0m \u001b[1m\u001b[94min this macro invocation\u001b[0m\n>     \u001b[1m\u001b[94m|\u001b[0m\n>     \u001b[1m\u001b[94m= \u001b[0m\u001b[1mwarning\u001b[0m: this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release!\n>     \u001b[1m\u001b[94m= \u001b[0m\u001b[1mnote\u001b[0m: for more information, see issue #79813 <https://github.com/rust-lang/rust/issues/79813>\n>     \u001b[1m\u001b[94m= \u001b[0m\u001b[1mnote\u001b[0m: macro invocations at the end of a block are treated as expressions\n>     \u001b[1m\u001b[94m= \u001b[0m\u001b[1mnote\u001b[0m: to ignore the value produced by the macro, add a semicolon after the invocation of `opt`\n>     \u001b[1m\u001b[94m= \u001b[0m\u001b[1mnote\u001b[0m: this warning originates in the macro `opt` which comes from the expansion of the macro `flat_map` (in Nightly builds, run with -Z macro-backtrace for more info)\n> \n> \u001b[1m\u001b[33mwarning\u001b[0m\u001b[1m: trailing semicolon in macro used in expression position\u001b[0m\n>    \u001b[1m\u001b[94m--> \u001b[0m/home/yzzhao3/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/nom-2.2.1/src/sequence.rs:508:60\n>     \u001b[1m\u001b[94m|\u001b[0m\n> \u001b[1m\u001b[94m508\u001b[0m \u001b[1m\u001b[94m|\u001b[0m       tuple_parser!($i, $consumed, ($($parsed),*), call!($e));\n>     \u001b[1m\u001b[94m|\u001b[0m                                                              \u001b[1m\u001b[33m^\u001b[0m\n>     \u001b[1m\u001b[94m|\u001b[0m\n>    \u001b[1m\u001b[94m::: \u001b[0m/home/yzzhao3/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/nom-2.2.1/src/nom.rs:647:3\n>     \u001b[1m\u001b[94m|\u001b[0m\n> \u001b[1m\u001b[94m647\u001b[0m \u001b[1m\u001b[94m|\u001b[0m \u001b[1m\u001b[94m/\u001b[0m   flat_map!(input,\n> \u001b[1m\u001b[94m648\u001b[0m \u001b[1m\u001b[94m|\u001b[0m \u001b[1m\u001b[94m|\u001b[0m     recognize!(\n> \u001b[1m\u001b[94m649\u001b[0m \u001b[1m\u001b[94m|\u001b[0m \u001b[1m\u001b[94m|\u001b[0m       tuple!(\n> \u001b[1m\u001b[94m650\u001b[0m \u001b[1m\u001b[94m|\u001b[0m \u001b[1m\u001b[94m|\u001b[0m         opt!(alt!(tag!(\"+\") | tag!(\"-\"))),\n> \u001b[1m\u001b[94m...\u001b[0m   \u001b[1m\u001b[94m|\u001b[0m\n> \u001b[1m\u001b[94m663\u001b[0m \u001b[1m\u001b[94m|\u001b[0m \u001b[1m\u001b[94m|\u001b[0m     parse_to!(f64)\n> \u001b[1m\u001b[94m664\u001b[0m \u001b[1m\u001b[94m|\u001b[0m \u001b[1m\u001b[94m|\u001b[0m   )\n>     \u001b[1m\u001b[94m|\u001b[0m \u001b[1m\u001b[94m|___-\u001b[0m \u001b[1m\u001b[94min this macro invocation\u001b[0m\n>     \u001b[1m\u001b[94m|\u001b[0m\n>     \u001b[1m\u001b[94m= \u001b[0m\u001b[1mwarning\u001b[0m: this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release!\n>     \u001b[1m\u001b[94m= \u001b[0m\u001b[1mnote\u001b[0m: for more information, see issue #79813 <https://github.com/rust-lang/rust/issues/79813>\n>     \u001b[1m\u001b[94m= \u001b[0m\u001b[1mnote\u001b[0m: macro invocations at the end of a block are treated as expressions\n>     \u001b[1m\u001b[94m= \u001b[0m\u001b[1mnote\u001b[0m: to ignore the value produced by the macro, add a semicolon after the invocation of `tuple_parser`\n>     \u001b[1m\u001b[94m= \u001b[0m\u001b[1mnote\u001b[0m: this warning originates in the macro `tuple_parser` which comes from the expansion of the macro `flat_map` (in Nightly builds, run with -Z macro-backtrace for more info)\n> \n> \u001b[1m\u001b[33mwarning\u001b[0m\u001b[1m: trailing semicolon in macro used in expression position\u001b[0m\n>    \u001b[1m\u001b[94m--> \u001b[0m/home/yzzhao3/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/nom-2.2.1/src/sequence.rs:508:60\n>     \u001b[1m\u001b[94m|\u001b[0m\n> \u001b[1m\u001b[94m508\u001b[0m \u001b[1m\u001b[94m|\u001b[0m       tuple_parser!($i, $consumed, ($($parsed),*), call!($e));\n>     \u001b[1m\u001b[94m|\u001b[0m                                                              \u001b[1m\u001b[33m^\u001b[0m\n>     \u001b[1m\u001b[94m|\u001b[0m\n>    \u001b[1m\u001b[94m::: \u001b[0m/home/yzzhao3/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/nom-2.2.1/src/nom.rs:647:3\n>     \u001b[1m\u001b[94m|\u001b[0m\n> \u001b[1m\u001b[94m647\u001b[0m \u001b[1m\u001b[94m|\u001b[0m \u001b[1m\u001b[94m/\u001b[0m   flat_map!(input,\n> \u001b[1m\u001b[94m648\u001b[0m \u001b[1m\u001b[94m|\u001b[0m \u001b[1m\u001b[94m|\u001b[0m     recognize!(\n> \u001b[1m\u001b[94m649\u001b[0m \u001b[1m\u001b[94m|\u001b[0m \u001b[1m\u001b[94m|\u001b[0m       tuple!(\n> \u001b[1m\u001b[94m650\u001b[0m \u001b[1m\u001b[94m|\u001b[0m \u001b[1m\u001b[94m|\u001b[0m         opt!(alt!(tag!(\"+\") | tag!(\"-\"))),\n> \u001b[1m\u001b[94m...\u001b[0m   \u001b[1m\u001b[94m|\u001b[0m\n> \u001b[1m\u001b[94m663\u001b[0m \u001b[1m\u001b[94m|\u001b[0m \u001b[1m\u001b[94m|\u001b[0m     parse_to!(f64)\n> \u001b[1m\u001b[94m664\u001b[0m \u001b[1m\u001b[94m|\u001b[0m \u001b[1m\u001b[94m|\u001b[0m   )\n>     \u001b[1m\u001b[94m|\u001b[0m \u001b[1m\u001b[94m|___-\u001b[0m \u001b[1m\u001b[94min this macro invocation\u001b[0m\n>     \u001b[1m\u001b[94m|\u001b[0m\n>     \u001b[1m\u001b[94m= \u001b[0m\u001b[1mwarning\u001b[0m: this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release!\n>     \u001b[1m\u001b[94m= \u001b[0m\u001b[1mnote\u001b[0m: for more information, see issue #79813 <https://github.com/rust-lang/rust/issues/79813>\n>     \u001b[1m\u001b[94m= \u001b[0m\u001b[1mnote\u001b[0m: macro invocations at the end of a block are treated as expressions\n>     \u001b[1m\u001b[94m= \u001b[0m\u001b[1mnote\u001b[0m: to ignore the value produced by the macro, add a semicolon after the invocation of `tuple_parser`\n>     \u001b[1m\u001b[94m= \u001b[0m\u001b[1mnote\u001b[0m: this warning originates in the macro `tuple_parser` which comes from the expansion of the macro `flat_map` (in Nightly builds, run with -Z macro-backtrace for more info)\n> \n> \u001b[1m\u001b[33mwarning\u001b[0m\u001b[1m: trailing semicolon in macro used in expression position\u001b[0m\n>    \u001b[1m\u001b[94m--> \u001b[0m/home/yzzhao3/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/nom-2.2.1/src/sequence.rs:694:41\n>     \u001b[1m\u001b[94m|\u001b[0m\n> \u001b[1m\u001b[94m694\u001b[0m \u001b[1m\u001b[94m|\u001b[0m       delimited!($i, call!($f), $($rest)*);\n>     \u001b[1m\u001b[94m|\u001b[0m                                           \u001b[1m\u001b[33m^\u001b[0m\n>     \u001b[1m\u001b[94m|\u001b[0m\n>    \u001b[1m\u001b[94m::: \u001b[0m/home/yzzhao3/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/nom-2.2.1/src/nom.rs:670:3\n>     \u001b[1m\u001b[94m|\u001b[0m\n> \u001b[1m\u001b[94m670\u001b[0m \u001b[1m\u001b[94m|\u001b[0m \u001b[1m\u001b[94m/\u001b[0m   flat_map!(input,\n> \u001b[1m\u001b[94m671\u001b[0m \u001b[1m\u001b[94m|\u001b[0m \u001b[1m\u001b[94m|\u001b[0m     recognize!(\n> \u001b[1m\u001b[94m672\u001b[0m \u001b[1m\u001b[94m|\u001b[0m \u001b[1m\u001b[94m|\u001b[0m       tuple!(\n> \u001b[1m\u001b[94m673\u001b[0m \u001b[1m\u001b[94m|\u001b[0m \u001b[1m\u001b[94m|\u001b[0m         opt!(alt!(tag!(\"+\") | tag!(\"-\"))),\n> \u001b[1m\u001b[94m...\u001b[0m   \u001b[1m\u001b[94m|\u001b[0m\n> \u001b[1m\u001b[94m686\u001b[0m \u001b[1m\u001b[94m|\u001b[0m \u001b[1m\u001b[94m|\u001b[0m     parse_to!(f64)\n> \u001b[1m\u001b[94m687\u001b[0m \u001b[1m\u001b[94m|\u001b[0m \u001b[1m\u001b[94m|\u001b[0m   )\n>     \u001b[1m\u001b[94m|\u001b[0m \u001b[1m\u001b[94m|___-\u001b[0m \u001b[1m\u001b[94min this macro invocation\u001b[0m\n>     \u001b[1m\u001b[94m|\u001b[0m\n>     \u001b[1m\u001b[94m= \u001b[0m\u001b[1mwarning\u001b[0m: this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release!\n>     \u001b[1m\u001b[94m= \u001b[0m\u001b[1mnote\u001b[0m: for more information, see issue #79813 <https://github.com/rust-lang/rust/issues/79813>\n>     \u001b[1m\u001b[94m= \u001b[0m\u001b[1mnote\u001b[0m: macro invocations at the end of a block are treated as expressions\n>     \u001b[1m\u001b[94m= \u001b[0m\u001b[1mnote\u001b[0m: to ignore the value produced by the macro, add a semicolon after the invocation of `delimited`\n>     \u001b[1m\u001b[94m= \u001b[0m\u001b[1mnote\u001b[0m: this warning originates in the macro `delimited` which comes from the expansion of the macro `flat_map` (in Nightly builds, run with -Z macro-backtrace for more info)\n> \n> \u001b[1m\u001b[33mwarning\u001b[0m\u001b[1m: trailing semicolon in macro used in expression position\u001b[0m\n>    \u001b[1m\u001b[94m--> \u001b[0m/home/yzzhao3/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/nom-2.2.1/src/macros.rs:776:24\n>     \u001b[1m\u001b[94m|\u001b[0m\n> \u001b[1m\u001b[94m776\u001b[0m \u001b[1m\u001b[94m|\u001b[0m       opt!($i, call!($f));\n>     \u001b[1m\u001b[94m|\u001b[0m                          \u001b[1m\u001b[33m^\u001b[0m\n>     \u001b[1m\u001b[94m|\u001b[0m\n>    \u001b[1m\u001b[94m::: \u001b[0m/home/yzzhao3/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/nom-2.2.1/src/nom.rs:670:3\n>     \u001b[1m\u001b[94m|\u001b[0m\n> \u001b[1m\u001b[94m670\u001b[0m \u001b[1m\u001b[94m|\u001b[0m \u001b[1m\u001b[94m/\u001b[0m   flat_map!(input,\n> \u001b[1m\u001b[94m671\u001b[0m \u001b[1m\u001b[94m|\u001b[0m \u001b[1m\u001b[94m|\u001b[0m     recognize!(\n> \u001b[1m\u001b[94m672\u001b[0m \u001b[1m\u001b[94m|\u001b[0m \u001b[1m\u001b[94m|\u001b[0m       tuple!(\n> \u001b[1m\u001b[94m673\u001b[0m \u001b[1m\u001b[94m|\u001b[0m \u001b[1m\u001b[94m|\u001b[0m         opt!(alt!(tag!(\"+\") | tag!(\"-\"))),\n> \u001b[1m\u001b[94m...\u001b[0m   \u001b[1m\u001b[94m|\u001b[0m\n> \u001b[1m\u001b[94m686\u001b[0m \u001b[1m\u001b[94m|\u001b[0m \u001b[1m\u001b[94m|\u001b[0m     parse_to!(f64)\n> \u001b[1m\u001b[94m687\u001b[0m \u001b[1m\u001b[94m|\u001b[0m \u001b[1m\u001b[94m|\u001b[0m   )\n>     \u001b[1m\u001b[94m|\u001b[0m \u001b[1m\u001b[94m|___-\u001b[0m \u001b[1m\u001b[94min this macro invocation\u001b[0m\n>     \u001b[1m\u001b[94m|\u001b[0m\n>     \u001b[1m\u001b[94m= \u001b[0m\u001b[1mwarning\u001b[0m: this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release!\n>     \u001b[1m\u001b[94m= \u001b[0m\u001b[1mnote\u001b[0m: for more information, see issue #79813 <https://github.com/rust-lang/rust/issues/79813>\n>     \u001b[1m\u001b[94m= \u001b[0m\u001b[1mnote\u001b[0m: macro invocations at the end of a block are treated as expressions\n>     \u001b[1m\u001b[94m= \u001b[0m\u001b[1mnote\u001b[0m: to ignore the value produced by the macro, add a semicolon after the invocation of `opt`\n>     \u001b[1m\u001b[94m= \u001b[0m\u001b[1mnote\u001b[0m: this warning originates in the macro `opt` which comes from the expansion of the macro `flat_map` (in Nightly builds, run with -Z macro-backtrace for more info)\n> \n> \u001b[1m\u001b[33mwarning\u001b[0m\u001b[1m: trailing semicolon in macro used in expression position\u001b[0m\n>    \u001b[1m\u001b[94m--> \u001b[0m/home/yzzhao3/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/nom-2.2.1/src/macros.rs:776:24\n>     \u001b[1m\u001b[94m|\u001b[0m\n> \u001b[1m\u001b[94m776\u001b[0m \u001b[1m\u001b[94m|\u001b[0m       opt!($i, call!($f));\n>     \u001b[1m\u001b[94m|\u001b[0m                          \u001b[1m\u001b[33m^\u001b[0m\n>     \u001b[1m\u001b[94m|\u001b[0m\n>    \u001b[1m\u001b[94m::: \u001b[0m/home/yzzhao3/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/nom-2.2.1/src/nom.rs:670:3\n>     \u001b[1m\u001b[94m|\u001b[0m\n> \u001b[1m\u001b[94m670\u001b[0m \u001b[1m\u001b[94m|\u001b[0m \u001b[1m\u001b[94m/\u001b[0m   flat_map!(input,\n> \u001b[1m\u001b[94m671\u001b[0m \u001b[1m\u001b[94m|\u001b[0m \u001b[1m\u001b[94m|\u001b[0m     recognize!(\n> \u001b[1m\u001b[94m672\u001b[0m \u001b[1m\u001b[94m|\u001b[0m \u001b[1m\u001b[94m|\u001b[0m       tuple!(\n> \u001b[1m\u001b[94m673\u001b[0m \u001b[1m\u001b[94m|\u001b[0m \u001b[1m\u001b[94m|\u001b[0m         opt!(alt!(tag!(\"+\") | tag!(\"-\"))),\n> \u001b[1m\u001b[94m...\u001b[0m   \u001b[1m\u001b[94m|\u001b[0m\n> \u001b[1m\u001b[94m686\u001b[0m \u001b[1m\u001b[94m|\u001b[0m \u001b[1m\u001b[94m|\u001b[0m     parse_to!(f64)\n> \u001b[1m\u001b[94m687\u001b[0m \u001b[1m\u001b[94m|\u001b[0m \u001b[1m\u001b[94m|\u001b[0m   )\n>     \u001b[1m\u001b[94m|\u001b[0m \u001b[1m\u001b[94m|___-\u001b[0m \u001b[1m\u001b[94min this macro invocation\u001b[0m\n>     \u001b[1m\u001b[94m|\u001b[0m\n>     \u001b[1m\u001b[94m= \u001b[0m\u001b[1mwarning\u001b[0m: this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release!\n>     \u001b[1m\u001b[94m= \u001b[0m\u001b[1mnote\u001b[0m: for more information, see issue #79813 <https://github.com/rust-lang/rust/issues/79813>\n>     \u001b[1m\u001b[94m= \u001b[0m\u001b[1mnote\u001b[0m: macro invocations at the end of a block are treated as expressions\n>     \u001b[1m\u001b[94m= \u001b[0m\u001b[1mnote\u001b[0m: to ignore the value produced by the macro, add a semicolon after the invocation of `opt`\n>     \u001b[1m\u001b[94m= \u001b[0m\u001b[1mnote\u001b[0m: this warning originates in the macro `opt` which comes from the expansion of the macro `flat_map` (in Nightly builds, run with -Z macro-backtrace for more info)\n> \n> \u001b[1m\u001b[33mwarning\u001b[0m\u001b[1m: trailing semicolon in macro used in expression position\u001b[0m\n>    \u001b[1m\u001b[94m--> \u001b[0m/home/yzzhao3/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/nom-2.2.1/src/sequence.rs:508:60\n>     \u001b[1m\u001b[94m|\u001b[0m\n> \u001b[1m\u001b[94m508\u001b[0m \u001b[1m\u001b[94m|\u001b[0m       tuple_parser!($i, $consumed, ($($parsed),*), call!($e));\n>     \u001b[1m\u001b[94m|\u001b[0m                                                              \u001b[1m\u001b[33m^\u001b[0m\n>     \u001b[1m\u001b[94m|\u001b[0m\n>    \u001b[1m\u001b[94m::: \u001b[0m/home/yzzhao3/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/nom-2.2.1/src/nom.rs:670:3\n>     \u001b[1m\u001b[94m|\u001b[0m\n> \u001b[1m\u001b[94m670\u001b[0m \u001b[1m\u001b[94m|\u001b[0m \u001b[1m\u001b[94m/\u001b[0m   flat_map!(input,\n> \u001b[1m\u001b[94m671\u001b[0m \u001b[1m\u001b[94m|\u001b[0m \u001b[1m\u001b[94m|\u001b[0m     recognize!(\n> \u001b[1m\u001b[94m672\u001b[0m \u001b[1m\u001b[94m|\u001b[0m \u001b[1m\u001b[94m|\u001b[0m       tuple!(\n> \u001b[1m\u001b[94m673\u001b[0m \u001b[1m\u001b[94m|\u001b[0m \u001b[1m\u001b[94m|\u001b[0m         opt!(alt!(tag!(\"+\") | tag!(\"-\"))),\n> \u001b[1m\u001b[94m...\u001b[0m   \u001b[1m\u001b[94m|\u001b[0m\n> \u001b[1m\u001b[94m686\u001b[0m \u001b[1m\u001b[94m|\u001b[0m \u001b[1m\u001b[94m|\u001b[0m     parse_to!(f64)\n> \u001b[1m\u001b[94m687\u001b[0m \u001b[1m\u001b[94m|\u001b[0m \u001b[1m\u001b[94m|\u001b[0m   )\n>     \u001b[1m\u001b[94m|\u001b[0m \u001b[1m\u001b[94m|___-\u001b[0m \u001b[1m\u001b[94min this macro invocation\u001b[0m\n>     \u001b[1m\u001b[94m|\u001b[0m\n>     \u001b[1m\u001b[94m= \u001b[0m\u001b[1mwarning\u001b[0m: this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release!\n>     \u001b[1m\u001b[94m= \u001b[0m\u001b[1mnote\u001b[0m: for more information, see issue #79813 <https://github.com/rust-lang/rust/issues/79813>\n>     \u001b[1m\u001b[94m= \u001b[0m\u001b[1mnote\u001b[0m: macro invocations at the end of a block are treated as expressions\n>     \u001b[1m\u001b[94m= \u001b[0m\u001b[1mnote\u001b[0m: to ignore the value produced by the macro, add a semicolon after the invocation of `tuple_parser`\n>     \u001b[1m\u001b[94m= \u001b[0m\u001b[1mnote\u001b[0m: this warning originates in the macro `tuple_parser` which comes from the expansion of the macro `flat_map` (in Nightly builds, run with -Z macro-backtrace for more info)\n> \n> \u001b[1m\u001b[33mwarning\u001b[0m\u001b[1m: trailing semicolon in macro used in expression position\u001b[0m\n>    \u001b[1m\u001b[94m--> \u001b[0m/home/yzzhao3/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/nom-2.2.1/src/sequence.rs:508:60\n>     \u001b[1m\u001b[94m|\u001b[0m\n> \u001b[1m\u001b[94m508\u001b[0m \u001b[1m\u001b[94m|\u001b[0m       tuple_parser!($i, $consumed, ($($parsed),*), call!($e));\n>     \u001b[1m\u001b[94m|\u001b[0m                                                              \u001b[1m\u001b[33m^\u001b[0m\n>     \u001b[1m\u001b[94m|\u001b[0m\n>    \u001b[1m\u001b[94m::: \u001b[0m/home/yzzhao3/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/nom-2.2.1/src/nom.rs:670:3\n>     \u001b[1m\u001b[94m|\u001b[0m\n> \u001b[1m\u001b[94m670\u001b[0m \u001b[1m\u001b[94m|\u001b[0m \u001b[1m\u001b[94m/\u001b[0m   flat_map!(input,\n> \u001b[1m\u001b[94m671\u001b[0m \u001b[1m\u001b[94m|\u001b[0m \u001b[1m\u001b[94m|\u001b[0m     recognize!(\n> \u001b[1m\u001b[94m672\u001b[0m \u001b[1m\u001b[94m|\u001b[0m \u001b[1m\u001b[94m|\u001b[0m       tuple!(\n> \u001b[1m\u001b[94m673\u001b[0m \u001b[1m\u001b[94m|\u001b[0m \u001b[1m\u001b[94m|\u001b[0m         opt!(alt!(tag!(\"+\") | tag!(\"-\"))),\n> \u001b[1m\u001b[94m...\u001b[0m   \u001b[1m\u001b[94m|\u001b[0m\n> \u001b[1m\u001b[94m686\u001b[0m \u001b[1m\u001b[94m|\u001b[0m \u001b[1m\u001b[94m|\u001b[0m     parse_to!(f64)\n> \u001b[1m\u001b[94m687\u001b[0m \u001b[1m\u001b[94m|\u001b[0m \u001b[1m\u001b[94m|\u001b[0m   )\n>     \u001b[1m\u001b[94m|\u001b[0m \u001b[1m\u001b[94m|___-\u001b[0m \u001b[1m\u001b[94min this macro invocation\u001b[0m\n>     \u001b[1m\u001b[94m|\u001b[0m\n>     \u001b[1m\u001b[94m= \u001b[0m\u001b[1mwarning\u001b[0m: this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release!\n>     \u001b[1m\u001b[94m= \u001b[0m\u001b[1mnote\u001b[0m: for more information, see issue #79813 <https://github.com/rust-lang/rust/issues/79813>\n>     \u001b[1m\u001b[94m= \u001b[0m\u001b[1mnote\u001b[0m: macro invocations at the end of a block are treated as expressions\n>     \u001b[1m\u001b[94m= \u001b[0m\u001b[1mnote\u001b[0m: to ignore the value produced by the macro, add a semicolon after the invocation of `tuple_parser`\n>     \u001b[1m\u001b[94m= \u001b[0m\u001b[1mnote\u001b[0m: this warning originates in the macro `tuple_parser` which comes from the expansion of the macro `flat_map` (in Nightly builds, run with -Z macro-backtrace for more info)\n> \n","num-bigint-dig@0.8.4":"The package `num-bigint-dig v0.8.4` currently triggers the following future incompatibility lints:\n> \u001b[1m\u001b[33mwarning\u001b[0m\u001b[1m: macro `vec` is private\u001b[0m\n>    \u001b[1m\u001b[94m--> \u001b[0m/home/yzzhao3/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/num-bigint-dig-0.8.4/src/biguint.rs:490:22\n>     \u001b[1m\u001b[94m|\u001b[0m\n> \u001b[1m\u001b[94m490\u001b[0m \u001b[1m\u001b[94m|\u001b[0m         BigUint::new(vec![1])\n>     \u001b[1m\u001b[94m|\u001b[0m                      \u001b[1m\u001b[33m^^^\u001b[0m\n>     \u001b[1m\u001b[94m|\u001b[0m\n>     \u001b[1m\u001b[94m= \u001b[0m\u001b[1mwarning\u001b[0m: this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release!\n>     \u001b[1m\u001b[94m= \u001b[0m\u001b[1mnote\u001b[0m: for more information, see issue #120192 <https://github.com/rust-lang/rust/issues/120192>\n> \n> \u001b[1m\u001b[33mwarning\u001b[0m\u001b[1m: macro `vec` is private\u001b[0m\n>     \u001b[1m\u001b[94m--> \u001b[0m/home/yzzhao3/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/num-bigint-dig-0.8.4/src/biguint.rs:2005:9\n>      \u001b[1m\u001b[94m|\u001b[0m\n> \u001b[1m\u001b[94m2005\u001b[0m \u001b[1m\u001b[94m|\u001b[0m         vec![0]\n>      \u001b[1m\u001b[94m|\u001b[0m         \u001b[1m\u001b[33m^^^\u001b[0m\n>      \u001b[1m\u001b[94m|\u001b[0m\n>      \u001b[1m\u001b[94m= \u001b[0m\u001b[1mwarning\u001b[0m: this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release!\n>      \u001b[1m\u001b[94m= \u001b[0m\u001b[1mnote\u001b[0m: for more information, see issue #120192 <https://github.com/rust-lang/rust/issues/120192>\n> \n> \u001b[1m\u001b[33mwarning\u001b[0m\u001b[1m: macro `vec` is private\u001b[0m\n>     \u001b[1m\u001b[94m--> \u001b[0m/home/yzzhao3/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/num-bigint-dig-0.8.4/src/biguint.rs:2027:16\n>      \u001b[1m\u001b[94m|\u001b[0m\n> \u001b[1m\u001b[94m2027\u001b[0m \u001b[1m\u001b[94m|\u001b[0m         return vec![b'0'];\n>      \u001b[1m\u001b[94m|\u001b[0m                \u001b[1m\u001b[33m^^^\u001b[0m\n>      \u001b[1m\u001b[94m|\u001b[0m\n>      \u001b[1m\u001b[94m= \u001b[0m\u001b[1mwarning\u001b[0m: this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release!\n>      \u001b[1m\u001b[94m= \u001b[0m\u001b[1mnote\u001b[0m: for more information, see issue #120192 <https://github.com/rust-lang/rust/issues/120192>\n> \n> \u001b[1m\u001b[33mwarning\u001b[0m\u001b[1m: macro `vec` is private\u001b[0m\n>     \u001b[1m\u001b[94m--> \u001b[0m/home/yzzhao3/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/num-bigint-dig-0.8.4/src/biguint.rs:2313:13\n>      \u001b[1m\u001b[94m|\u001b[0m\n> \u001b[1m\u001b[94m2313\u001b[0m \u001b[1m\u001b[94m|\u001b[0m             vec![0]\n>      \u001b[1m\u001b[94m|\u001b[0m             \u001b[1m\u001b[33m^^^\u001b[0m\n>      \u001b[1m\u001b[94m|\u001b[0m\n>      \u001b[1m\u001b[94m= \u001b[0m\u001b[1mwarning\u001b[0m: this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release!\n>      \u001b[1m\u001b[94m= \u001b[0m\u001b[1mnote\u001b[0m: for more information, see issue #120192 <https://github.com/rust-lang/rust/issues/120192>\n> \n> \u001b[1m\u001b[33mwarning\u001b[0m\u001b[1m: macro `vec` is private\u001b[0m\n>     \u001b[1m\u001b[94m--> \u001b[0m/home/yzzhao3/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/num-bigint-dig-0.8.4/src/biguint.rs:2572:21\n>      \u001b[1m\u001b[94m|\u001b[0m\n> \u001b[1m\u001b[94m2572\u001b[0m \u001b[1m\u001b[94m|\u001b[0m                     vec![*n as u32]\n>      \u001b[1m\u001b[94m|\u001b[0m                     \u001b[1m\u001b[33m^^^\u001b[0m\n>      \u001b[1m\u001b[94m|\u001b[0m\n>      \u001b[1m\u001b[94m= \u001b[0m\u001b[1mwarning\u001b[0m: this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release!\n>      \u001b[1m\u001b[94m= \u001b[0m\u001b[1mnote\u001b[0m: for more information, see issue #120192 <https://github.com/rust-lang/rust/issues/120192>\n> \n> \u001b[1m\u001b[33mwarning\u001b[0m\u001b[1m: macro `vec` is private\u001b[0m\n>     \u001b[1m\u001b[94m--> \u001b[0m/home/yzzhao3/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/num-bigint-dig-0.8.4/src/biguint.rs:2574:21\n>      \u001b[1m\u001b[94m|\u001b[0m\n> \u001b[1m\u001b[94m2574\u001b[0m \u001b[1m\u001b[94m|\u001b[0m                     vec![*n as u32, (n >> 32) as u32]\n>      \u001b[1m\u001b[94m|\u001b[0m                     \u001b[1m\u001b[33m^^^\u001b[0m\n>      \u001b[1m\u001b[94m|\u001b[0m\n>      \u001b[1m\u001b[94m= \u001b[0m\u001b[1mwarning\u001b[0m: this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release!\n>      \u001b[1m\u001b[94m= \u001b[0m\u001b[1mnote\u001b[0m: for more information, see issue #120192 <https://github.com/rust-lang/rust/issues/120192>\n> \n> \u001b[1m\u001b[33mwarning\u001b[0m\u001b[1m: macro `vec` is private\u001b[0m\n>    \u001b[1m\u001b[94m--> \u001b[0m/home/yzzhao3/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/num-bigint-dig-0.8.4/src/prime.rs:138:22\n>     \u001b[1m\u001b[94m|\u001b[0m\n> \u001b[1m\u001b[94m138\u001b[0m \u001b[1m\u001b[94m|\u001b[0m     let mut moduli = vec![BigUint::zero(); prime_limit];\n>     \u001b[1m\u001b[94m|\u001b[0m                      \u001b[1m\u001b[33m^^^\u001b[0m\n>     \u001b[1m\u001b[94m|\u001b[0m\n>     \u001b[1m\u001b[94m= \u001b[0m\u001b[1mwarning\u001b[0m: this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release!\n>     \u001b[1m\u001b[94m= \u001b[0m\u001b[1mnote\u001b[0m: for more information, see issue #120192 <https://github.com/rust-lang/rust/issues/120192>\n> \n> \u001b[1m\u001b[33mwarning\u001b[0m\u001b[1m: macro `vec` is private\u001b[0m\n>    \u001b[1m\u001b[94m--> \u001b[0m/home/yzzhao3/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/num-bigint-dig-0.8.4/src/bigrand.rs:319:25\n>     \u001b[1m\u001b[94m|\u001b[0m\n> \u001b[1m\u001b[94m319\u001b[0m \u001b[1m\u001b[94m|\u001b[0m         let mut bytes = vec![0u8; bytes_len];\n>     \u001b[1m\u001b[94m|\u001b[0m                         \u001b[1m\u001b[33m^^^\u001b[0m\n>     \u001b[1m\u001b[94m|\u001b[0m\n>     \u001b[1m\u001b[94m= \u001b[0m\u001b[1mwarning\u001b[0m: this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release!\n>     \u001b[1m\u001b[94m= \u001b[0m\u001b[1mnote\u001b[0m: for more information, see issue #120192 <https://github.com/rust-lang/rust/issues/120192>\n> \n","pdf@0.7.2":"The package `pdf v0.7.2 (https://github.com/pdf-rs/pdf?rev=316168c#316168c9)` currently triggers the following future incompatibility lints:\n> \u001b[1m\u001b[33mwarning\u001b[0m\u001b[1m: `Rect` is ambiguous\u001b[0m\n>  \u001b[1m\u001b[94m--> \u001b[0m/home/yzzhao3/.cargo/git/checkouts/pdf-9563b332f7e1af00/316168c/pdf/src/build.rs:8:27\n>   \u001b[1m\u001b[94m|\u001b[0m\n> \u001b[1m\u001b[94m8\u001b[0m \u001b[1m\u001b[94m|\u001b[0m     pub media_box: Option<Rect>,\n>   \u001b[1m\u001b[94m|\u001b[0m                           \u001b[1m\u001b[33m^^^^\u001b[0m \u001b[1m\u001b[33mambiguous name\u001b[0m\n>   \u001b[1m\u001b[94m|\u001b[0m\n>   \u001b[1m\u001b[94m= \u001b[0m\u001b[1mwarning\u001b[0m: this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release!\n>   \u001b[1m\u001b[94m= \u001b[0m\u001b[1mnote\u001b[0m: for more information, see issue #114095 <https://github.com/rust-lang/rust/issues/114095>\n>   \u001b[1m\u001b[94m= \u001b[0m\u001b[1mnote\u001b[0m: ambiguous because of multiple glob imports of a name in the same module\n> \u001b[1m\u001b[92mnote\u001b[0m: `Rect` could refer to the struct imported here\n>  \u001b[1m\u001b[94m--> \u001b[0m/home/yzzhao3/.cargo/git/checkouts/pdf-9563b332f7e1af00/316168c/pdf/src/build.rs:1:5\n>   \u001b[1m\u001b[94m|\u001b[0m\n> \u001b[1m\u001b[94m1\u001b[0m \u001b[1m\u001b[94m|\u001b[0m use crate::object::*;\n>   \u001b[1m\u001b[94m|\u001b[0m     \u001b[1m\u001b[92m^^^^^^^^^^^^^^^^\u001b[0m\n>   \u001b[1m\u001b[94m= \u001b[0m\u001b[1mhelp\u001b[0m: consider adding an explicit import of `Rect` to disambiguate\n> \u001b[1m\u001b[92mnote\u001b[0m: `Rect` could also refer to the struct imported here\n>  \u001b[1m\u001b[94m--> \u001b[0m/home/yzzhao3/.cargo/git/checkouts/pdf-9563b332f7e1af00/316168c/pdf/src/build.rs:2:5\n>   \u001b[1m\u001b[94m|\u001b[0m\n> \u001b[1m\u001b[94m2\u001b[0m \u001b[1m\u001b[94m|\u001b[0m use crate::content::*;\n>   \u001b[1m\u001b[94m|\u001b[0m     \u001b[1m\u001b[92m^^^^^^^^^^^^^^^^^\u001b[0m\n>   \u001b[1m\u001b[94m= \u001b[0m\u001b[1mhelp\u001b[0m: consider adding an explicit import of `Rect` to disambiguate\n> \n> \u001b[1m\u001b[33mwarning\u001b[0m\u001b[1m: `Rect` is ambiguous\u001b[0m\n>  \u001b[1m\u001b[94m--> \u001b[0m/home/yzzhao3/.cargo/git/checkouts/pdf-9563b332f7e1af00/316168c/pdf/src/build.rs:9:26\n>   \u001b[1m\u001b[94m|\u001b[0m\n> \u001b[1m\u001b[94m9\u001b[0m \u001b[1m\u001b[94m|\u001b[0m     pub crop_box: Option<Rect>,\n>   \u001b[1m\u001b[94m|\u001b[0m                          \u001b[1m\u001b[33m^^^^\u001b[0m \u001b[1m\u001b[33mambiguous name\u001b[0m\n>   \u001b[1m\u001b[94m|\u001b[0m\n>   \u001b[1m\u001b[94m= \u001b[0m\u001b[1mwarning\u001b[0m: this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release!\n>   \u001b[1m\u001b[94m= \u001b[0m\u001b[1mnote\u001b[0m: for more information, see issue #114095 <https://github.com/rust-lang/rust/issues/114095>\n>   \u001b[1m\u001b[94m= \u001b[0m\u001b[1mnote\u001b[0m: ambiguous because of multiple glob imports of a name in the same module\n> \u001b[1m\u001b[92mnote\u001b[0m: `Rect` could refer to the struct imported here\n>  \u001b[1m\u001b[94m--> \u001b[0m/home/yzzhao3/.cargo/git/checkouts/pdf-9563b332f7e1af00/316168c/pdf/src/build.rs:1:5\n>   \u001b[1m\u001b[94m|\u001b[0m\n> \u001b[1m\u001b[94m1\u001b[0m \u001b[1m\u001b[94m|\u001b[0m use crate::object::*;\n>   \u001b[1m\u001b[94m|\u001b[0m     \u001b[1m\u001b[92m^^^^^^^^^^^^^^^^\u001b[0m\n>   \u001b[1m\u001b[94m= \u001b[0m\u001b[1mhelp\u001b[0m: consider adding an explicit import of `Rect` to disambiguate\n> \u001b[1m\u001b[92mnote\u001b[0m: `Rect` could also refer to the struct imported here\n>  \u001b[1m\u001b[94m--> \u001b[0m/home/yzzhao3/.cargo/git/checkouts/pdf-9563b332f7e1af00/316168c/pdf/src/build.rs:2:5\n>   \u001b[1m\u001b[94m|\u001b[0m\n> \u001b[1m\u001b[94m2\u001b[0m \u001b[1m\u001b[94m|\u001b[0m use crate::content::*;\n>   \u001b[1m\u001b[94m|\u001b[0m     \u001b[1m\u001b[92m^^^^^^^^^^^^^^^^^\u001b[0m\n>   \u001b[1m\u001b[94m= \u001b[0m\u001b[1mhelp\u001b[0m: consider adding an explicit import of `Rect` to disambiguate\n> \n> \u001b[1m\u001b[33mwarning\u001b[0m\u001b[1m: `Rect` is ambiguous\u001b[0m\n>   \u001b[1m\u001b[94m--> \u001b[0m/home/yzzhao3/.cargo/git/checkouts/pdf-9563b332f7e1af00/316168c/pdf/src/build.rs:10:26\n>    \u001b[1m\u001b[94m|\u001b[0m\n> \u001b[1m\u001b[94m10\u001b[0m \u001b[1m\u001b[94m|\u001b[0m     pub trim_box: Option<Rect>,\n>    \u001b[1m\u001b[94m|\u001b[0m                          \u001b[1m\u001b[33m^^^^\u001b[0m \u001b[1m\u001b[33mambiguous name\u001b[0m\n>    \u001b[1m\u001b[94m|\u001b[0m\n>    \u001b[1m\u001b[94m= \u001b[0m\u001b[1mwarning\u001b[0m: this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release!\n>    \u001b[1m\u001b[94m= \u001b[0m\u001b[1mnote\u001b[0m: for more information, see issue #114095 <https://github.com/rust-lang/rust/issues/114095>\n>    \u001b[1m\u001b[94m= \u001b[0m\u001b[1mnote\u001b[0m: ambiguous because of multiple glob imports of a name in the same module\n> \u001b[1m\u001b[92mnote\u001b[0m: `Rect` could refer to the struct imported here\n>   \u001b[1m\u001b[94m--> \u001b[0m/home/yzzhao3/.cargo/git/checkouts/pdf-9563b332f7e1af00/316168c/pdf/src/build.rs:1:5\n>    \u001b[1m\u001b[94m|\u001b[0m\n>  \u001b[1m\u001b[94m1\u001b[0m \u001b[1m\u001b[94m|\u001b[0m use crate::object::*;\n>    \u001b[1m\u001b[94m|\u001b[0m     \u001b[1m\u001b[92m^^^^^^^^^^^^^^^^\u001b[0m\n>    \u001b[1m\u001b[94m= \u001b[0m\u001b[1mhelp\u001b[0m: consider adding an explicit import of `Rect` to disambiguate\n> \u001b[1m\u001b[92mnote\u001b[0m: `Rect` could also refer to the struct imported here\n>   \u001b[1m\u001b[94m--> \u001b[0m/home/yzzhao3/.cargo/git/checkouts/pdf-9563b332f7e1af00/316168c/pdf/src/build.rs:2:5\n>    \u001b[1m\u001b[94m|\u001b[0m\n>  \u001b[1m\u001b[94m2\u001b[0m \u001b[1m\u001b[94m|\u001b[0m use crate::content::*;\n>    \u001b[1m\u001b[94m|\u001b[0m     \u001b[1m\u001b[92m^^^^^^^^^^^^^^^^^\u001b[0m\n>    \u001b[1m\u001b[94m= \u001b[0m\u001b[1mhelp\u001b[0m: consider adding an explicit import of `Rect` to disambiguate\n> \n> \u001b[1m\u001b[33mwarning\u001b[0m\u001b[1m: `Rect` is ambiguous\u001b[0m\n>   \u001b[1m\u001b[94m--> \u001b[0m/home/yzzhao3/.cargo/git/checkouts/pdf-9563b332f7e1af00/316168c/pdf/src/build.rs:30:31\n>    \u001b[1m\u001b[94m|\u001b[0m\n> \u001b[1m\u001b[94m30\u001b[0m \u001b[1m\u001b[94m|\u001b[0m         self.media_box = Some(Rect {\n>    \u001b[1m\u001b[94m|\u001b[0m                               \u001b[1m\u001b[33m^^^^\u001b[0m \u001b[1m\u001b[33mambiguous name\u001b[0m\n>    \u001b[1m\u001b[94m|\u001b[0m\n>    \u001b[1m\u001b[94m= \u001b[0m\u001b[1mwarning\u001b[0m: this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release!\n>    \u001b[1m\u001b[94m= \u001b[0m\u001b[1mnote\u001b[0m: for more information, see issue #114095 <https://github.com/rust-lang/rust/issues/114095>\n>    \u001b[1m\u001b[94m= \u001b[0m\u001b[1mnote\u001b[0m: ambiguous because of multiple glob imports of a name in the same module\n> \u001b[1m\u001b[92mnote\u001b[0m: `Rect` could refer to the struct imported here\n>   \u001b[1m\u001b[94m--> \u001b[0m/home/yzzhao3/.cargo/git/checkouts/pdf-9563b332f7e1af00/316168c/pdf/src/build.rs:1:5\n>    \u001b[1m\u001b[94m|\u001b[0m\n>  \u001b[1m\u001b[94m1\u001b[0m \u001b[1m\u001b[94m|\u001b[0m use crate::object::*;\n>    \u001b[1m\u001b[94m|\u001b[0m     \u001b[1m\u001b[92m^^^^^^^^^^^^^^^^\u001b[0m\n>    \u001b[1m\u001b[94m= \u001b[0m\u001b[1mhelp\u001b[0m: consider adding an explicit import of `Rect` to disambiguate\n> \u001b[1m\u001b[92mnote\u001b[0m: `Rect` could also refer to the struct imported here\n>   \u001b[1m\u001b[94m--> \u001b[0m/home/yzzhao3/.cargo/git/checkouts/pdf-9563b332f7e1af00/316168c/pdf/src/build.rs:2:5\n>    \u001b[1m\u001b[94m|\u001b[0m\n>  \u001b[1m\u001b[94m2\u001b[0m \u001b[1m\u001b[94m|\u001b[0m use crate::content::*;\n>    \u001b[1m\u001b[94m|\u001b[0m     \u001b[1m\u001b[92m^^^^^^^^^^^^^^^^^\u001b[0m\n>    \u001b[1m\u001b[94m= \u001b[0m\u001b[1mhelp\u001b[0m: consider adding an explicit import of `Rect` to disambiguate\n> \nThe package `pdf v0.7.2 (https://github.com/pdf-rs/pdf?rev=99e70cd#99e70cd0)` currently triggers the following future incompatibility lints:\n> \u001b[1m\u001b[33mwarning\u001b[0m\u001b[1m: `Rect` is ambiguous\u001b[0m\n>  \u001b[1m\u001b[94m--> \u001b[0m/home/yzzhao3/.cargo/git/checkouts/pdf-9563b332f7e1af00/99e70cd/pdf/src/build.rs:8:27\n>   \u001b[1m\u001b[94m|\u001b[0m\n> \u001b[1m\u001b[94m8\u001b[0m \u001b[1m\u001b[94m|\u001b[0m     pub media_box: Option<Rect>,\n>   \u001b[1m\u001b[94m|\u001b[0m                           \u001b[1m\u001b[33m^^^^\u001b[0m \u001b[1m\u001b[33mambiguous name\u001b[0m\n>   \u001b[1m\u001b[94m|\u001b[0m\n>   \u001b[1m\u001b[94m= \u001b[0m\u001b[1mwarning\u001b[0m: this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release!\n>   \u001b[1m\u001b[94m= \u001b[0m\u001b[1mnote\u001b[0m: for more information, see issue #114095 <https://github.com/rust-lang/rust/issues/114095>\n>   \u001b[1m\u001b[94m= \u001b[0m\u001b[1mnote\u001b[0m: ambiguous because of multiple glob imports of a name in the same module\n> \u001b[1m\u001b[92mnote\u001b[0m: `Rect` could refer to the struct imported here\n>  \u001b[1m\u001b[94m--> \u001b[0m/home/yzzhao3/.cargo/git/checkouts/pdf-9563b332f7e1af00/99e70cd/pdf/src/build.rs:1:5\n>   \u001b[1m\u001b[94m|\u001b[0m\n> \u001b[1m\u001b[94m1\u001b[0m \u001b[1m\u001b[94m|\u001b[0m use crate::object::*;\n>   \u001b[1m\u001b[94m|\u001b[0m     \u001b[1m\u001b[92m^^^^^^^^^^^^^^^^\u001b[0m\n>   \u001b[1m\u001b[94m= \u001b[0m\u001b[1mhelp\u001b[0m: consider adding an explicit import of `Rect` to disambiguate\n> \u001b[1m\u001b[92mnote\u001b[0m: `Rect` could also refer to the struct imported here\n>  \u001b[1m\u001b[94m--> \u001b[0m/home/yzzhao3/.cargo/git/checkouts/pdf-9563b332f7e1af00/99e70cd/pdf/src/build.rs:2:5\n>   \u001b[1m\u001b[94m|\u001b[0m\n> \u001b[1m\u001b[94m2\u001b[0m \u001b[1m\u001b[94m|\u001b[0m use crate::content::*;\n>   \u001b[1m\u001b[94m|\u001b[0m     \u001b[1m\u001b[92m^^^^^^^^^^^^^^^^^\u001b[0m\n>   \u001b[1m\u001b[94m= \u001b[0m\u001b[1mhelp\u001b[0m: consider adding an explicit import of `Rect` to disambiguate\n> \n> \u001b[1m\u001b[33mwarning\u001b[0m\u001b[1m: `Rect` is ambiguous\u001b[0m\n>  \u001b[1m\u001b[94m--> \u001b[0m/home/yzzhao3/.cargo/git/checkouts/pdf-9563b332f7e1af00/99e70cd/pdf/src/build.rs:9:26\n>   \u001b[1m\u001b[94m|\u001b[0m\n> \u001b[1m\u001b[94m9\u001b[0m \u001b[1m\u001b[94m|\u001b[0m     pub crop_box: Option<Rect>,\n>   \u001b[1m\u001b[94m|\u001b[0m                          \u001b[1m\u001b[33m^^^^\u001b[0m \u001b[1m\u001b[33mambiguous name\u001b[0m\n>   \u001b[1m\u001b[94m|\u001b[0m\n>   \u001b[1m\u001b[94m= \u001b[0m\u001b[1mwarning\u001b[0m: this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release!\n>   \u001b[1m\u001b[94m= \u001b[0m\u001b[1mnote\u001b[0m: for more information, see issue #114095 <https://github.com/rust-lang/rust/issues/114095>\n>   \u001b[1m\u001b[94m= \u001b[0m\u001b[1mnote\u001b[0m: ambiguous because of multiple glob imports of a name in the same module\n> \u001b[1m\u001b[92mnote\u001b[0m: `Rect` could refer to the struct imported here\n>  \u001b[1m\u001b[94m--> \u001b[0m/home/yzzhao3/.cargo/git/checkouts/pdf-9563b332f7e1af00/99e70cd/pdf/src/build.rs:1:5\n>   \u001b[1m\u001b[94m|\u001b[0m\n> \u001b[1m\u001b[94m1\u001b[0m \u001b[1m\u001b[94m|\u001b[0m use crate::object::*;\n>   \u001b[1m\u001b[94m|\u001b[0m     \u001b[1m\u001b[92m^^^^^^^^^^^^^^^^\u001b[0m\n>   \u001b[1m\u001b[94m= \u001b[0m\u001b[1mhelp\u001b[0m: consider adding an explicit import of `Rect` to disambiguate\n> \u001b[1m\u001b[92mnote\u001b[0m: `Rect` could also refer to the struct imported here\n>  \u001b[1m\u001b[94m--> \u001b[0m/home/yzzhao3/.cargo/git/checkouts/pdf-9563b332f7e1af00/99e70cd/pdf/src/build.rs:2:5\n>   \u001b[1m\u001b[94m|\u001b[0m\n> \u001b[1m\u001b[94m2\u001b[0m \u001b[1m\u001b[94m|\u001b[0m use crate::content::*;\n>   \u001b[1m\u001b[94m|\u001b[0m     \u001b[1m\u001b[92m^^^^^^^^^^^^^^^^^\u001b[0m\n>   \u001b[1m\u001b[94m= \u001b[0m\u001b[1mhelp\u001b[0m: consider adding an explicit import of `Rect` to disambiguate\n> \n> \u001b[1m\u001b[33mwarning\u001b[0m\u001b[1m: `Rect` is ambiguous\u001b[0m\n>   \u001b[1m\u001b[94m--> \u001b[0m/home/yzzhao3/.cargo/git/checkouts/pdf-9563b332f7e1af00/99e70cd/pdf/src/build.rs:10:26\n>    \u001b[1m\u001b[94m|\u001b[0m\n> \u001b[1m\u001b[94m10\u001b[0m \u001b[1m\u001b[94m|\u001b[0m     pub trim_box: Option<Rect>,\n>    \u001b[1m\u001b[94m|\u001b[0m                          \u001b[1m\u001b[33m^^^^\u001b[0m \u001b[1m\u001b[33mambiguous name\u001b[0m\n>    \u001b[1m\u001b[94m|\u001b[0m\n>    \u001b[1m\u001b[94m= \u001b[0m\u001b[1mwarning\u001b[0m: this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release!\n>    \u001b[1m\u001b[94m= \u001b[0m\u001b[1mnote\u001b[0m: for more information, see issue #114095 <https://github.com/rust-lang/rust/issues/114095>\n>    \u001b[1m\u001b[94m= \u001b[0m\u001b[1mnote\u001b[0m: ambiguous because of multiple glob imports of a name in the same module\n> \u001b[1m\u001b[92mnote\u001b[0m: `Rect` could refer to the struct imported here\n>   \u001b[1m\u001b[94m--> \u001b[0m/home/yzzhao3/.cargo/git/checkouts/pdf-9563b332f7e1af00/99e70cd/pdf/src/build.rs:1:5\n>    \u001b[1m\u001b[94m|\u001b[0m\n>  \u001b[1m\u001b[94m1\u001b[0m \u001b[1m\u001b[94m|\u001b[0m use crate::object::*;\n>    \u001b[1m\u001b[94m|\u001b[0m     \u001b[1m\u001b[92m^^^^^^^^^^^^^^^^\u001b[0m\n>    \u001b[1m\u001b[94m= \u001b[0m\u001b[1mhelp\u001b[0m: consider adding an explicit import of `Rect` to disambiguate\n> \u001b[1m\u001b[92mnote\u001b[0m: `Rect` could also refer to the struct imported here\n>   \u001b[1m\u001b[94m--> \u001b[0m/home/yzzhao3/.cargo/git/checkouts/pdf-9563b332f7e1af00/99e70cd/pdf/src/build.rs:2:5\n>    \u001b[1m\u001b[94m|\u001b[0m\n>  \u001b[1m\u001b[94m2\u001b[0m \u001b[1m\u001b[94m|\u001b[0m use crate::content::*;\n>    \u001b[1m\u001b[94m|\u001b[0m     \u001b[1m\u001b[92m^^^^^^^^^^^^^^^^^\u001b[0m\n>    \u001b[1m\u001b[94m= \u001b[0m\u001b[1mhelp\u001b[0m: consider adding an explicit import of `Rect` to disambiguate\n> \n> \u001b[1m\u001b[33mwarning\u001b[0m\u001b[1m: `Rect` is ambiguous\u001b[0m\n>   \u001b[1m\u001b[94m--> \u001b[0m/home/yzzhao3/.cargo/git/checkouts/pdf-9563b332f7e1af00/99e70cd/pdf/src/build.rs:30:31\n>    \u001b[1m\u001b[94m|\u001b[0m\n> \u001b[1m\u001b[94m30\u001b[0m \u001b[1m\u001b[94m|\u001b[0m         self.media_box = Some(Rect {\n>    \u001b[1m\u001b[94m|\u001b[0m                               \u001b[1m\u001b[33m^^^^\u001b[0m \u001b[1m\u001b[33mambiguous name\u001b[0m\n>    \u001b[1m\u001b[94m|\u001b[0m\n>    \u001b[1m\u001b[94m= \u001b[0m\u001b[1mwarning\u001b[0m: this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release!\n>    \u001b[1m\u001b[94m= \u001b[0m\u001b[1mnote\u001b[0m: for more information, see issue #114095 <https://github.com/rust-lang/rust/issues/114095>\n>    \u001b[1m\u001b[94m= \u001b[0m\u001b[1mnote\u001b[0m: ambiguous because of multiple glob imports of a name in the same module\n> \u001b[1m\u001b[92mnote\u001b[0m: `Rect` could refer to the struct imported here\n>   \u001b[1m\u001b[94m--> \u001b[0m/home/yzzhao3/.cargo/git/checkouts/pdf-9563b332f7e1af00/99e70cd/pdf/src/build.rs:1:5\n>    \u001b[1m\u001b[94m|\u001b[0m\n>  \u001b[1m\u001b[94m1\u001b[0m \u001b[1m\u001b[94m|\u001b[0m use crate::object::*;\n>    \u001b[1m\u001b[94m|\u001b[0m     \u001b[1m\u001b[92m^^^^^^^^^^^^^^^^\u001b[0m\n>    \u001b[1m\u001b[94m= \u001b[0m\u001b[1mhelp\u001b[0m: consider adding an explicit import of `Rect` to disambiguate\n> \u001b[1m\u001b[92mnote\u001b[0m: `Rect` could also refer to the struct imported here\n>   \u001b[1m\u001b[94m--> \u001b[0m/home/yzzhao3/.cargo/git/checkouts/pdf-9563b332f7e1af00/99e70cd/pdf/src/build.rs:2:5\n>    \u001b[1m\u001b[94m|\u001b[0m\n>  \u001b[1m\u001b[94m2\u001b[0m \u001b[1m\u001b[94m|\u001b[0m use crate::content::*;\n>    \u001b[1m\u001b[94m|\u001b[0m     \u001b[1m\u001b[92m^^^^^^^^^^^^^^^^^\u001b[0m\n>    \u001b[1m\u001b[94m= \u001b[0m\u001b[1mhelp\u001b[0m: consider adding an explicit import of `Rect` to disambiguate\n> \n"}},{"id":2,"suggestion_message":"to solve this problem, you can try the following approaches:\n\n- update to a newer version to see if the issue has been fixed\n  - nom v2.2.1 has the following newer versions available: 3.0.0, 3.1.0, 3.2.0, 3.2.1, 4.0.0-alpha1, 4.0.0-alpha2, 4.0.0-beta1, 4.0.0-beta2, 4.0.0-beta3, 4.0.0, 4.1.0, 4.1.1, 4.2.0, 4.2.1, 4.2.2, 4.2.3, 5.0.0-alpha1, 5.0.0-alpha2, 5.0.0-beta1, 5.0.0-beta2, 5.0.0-beta3, 5.0.0, 5.0.1, 5.1.0, 5.1.1, 5.1.2, 5.1.3, 6.0.0-alpha1, 6.0.0-alpha2, 6.0.0-alpha3, 6.0.0-beta1, 6.0.0-beta2, 6.0.0-beta3, 6.0.0-beta4, 6.0.0-beta5, 6.0.0, 6.0.1, 6.1.0, 6.1.1, 6.1.2, 6.2.0, 6.2.1, 6.2.2, 7.0.0-alpha1, 7.0.0-alpha2, 7.0.0-alpha3, 7.0.0, 7.1.0, 7.1.1, 7.1.2, 7.1.3, 8.0.0-alpha1, 8.0.0-alpha2, 8.0.0-beta.1, 8.0.0\n\n- ensure the maintainers know of this problem (e.g. creating a bug report if needed)\nor even helping with a fix (e.g. by creating a pull request)\n  - nom@2.2.1\n  - repository: https://github.com/Geal/nom\n  - detailed warning command: `cargo report future-incompatibilities --id 2 --package nom@2.2.1`\n\n  - num-bigint-dig@0.8.4\n  - repository: https://github.com/dignifiedquire/num-bigint\n  - detailed warning command: `cargo report future-incompatibilities --id 2 --package num-bigint-dig@0.8.4`\n\n  - pdf@0.7.2\n  - repository: https://github.com/pdf-rs\n  - detailed warning command: `cargo report future-incompatibilities --id 2 --package pdf@0.7.2`\n\n  - pdf@0.7.2\n  - repository: https://github.com/pdf-rs/pdf\n  - detailed warning command: `cargo report future-incompatibilities --id 2 --package pdf@0.7.2`\n\n- use your own version of the dependency with the `[patch]` section in `Cargo.toml`\nFor more information, see:\nhttps://doc.rust-lang.org/cargo/reference/overriding-dependencies.html#the-patch-section\n","per_package":{"nom@2.2.1":"The package `nom v2.2.1` currently triggers the following future incompatibility lints:\n> \u001b[1m\u001b[33mwarning\u001b[0m\u001b[1m: trailing semicolon in macro used in expression position\u001b[0m\n>    \u001b[1m\u001b[94m--> \u001b[0m/home/yzzhao3/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/nom-2.2.1/src/macros.rs:514:42\n>     \u001b[1m\u001b[94m|\u001b[0m\n> \u001b[1m\u001b[94m514\u001b[0m \u001b[1m\u001b[94m|\u001b[0m     map!(__impl $i, call!($f), call!($g));\n>     \u001b[1m\u001b[94m|\u001b[0m                                          \u001b[1m\u001b[33m^\u001b[0m\n>     \u001b[1m\u001b[94m|\u001b[0m\n>    \u001b[1m\u001b[94m::: \u001b[0m/home/yzzhao3/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/nom-2.2.1/src/nom.rs:369:3\n>     \u001b[1m\u001b[94m|\u001b[0m\n> \u001b[1m\u001b[94m369\u001b[0m \u001b[1m\u001b[94m|\u001b[0m   map!(i, be_u8, | x | { x as i8 })\n>     \u001b[1m\u001b[94m|\u001b[0m   \u001b[1m\u001b[94m---------------------------------\u001b[0m \u001b[1m\u001b[94min this macro invocation\u001b[0m\n>     \u001b[1m\u001b[94m|\u001b[0m\n>     \u001b[1m\u001b[94m= \u001b[0m\u001b[1mwarning\u001b[0m: this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release!\n>     \u001b[1m\u001b[94m= \u001b[0m\u001b[1mnote\u001b[0m: for more information, see issue #79813 <https://github.com/rust-lang/rust/issues/79813>\n>     \u001b[1m\u001b[94m= \u001b[0m\u001b[1mnote\u001b[0m: macro invocations at the end of a block are treated as expressions\n>     \u001b[1m\u001b[94m= \u001b[0m\u001b[1mnote\u001b[0m: to ignore the value produced by the macro, add a semicolon after the invocation of `map`\n>     \u001b[1m\u001b[94m= \u001b[0m\u001b[1mnote\u001b[0m: this warning originates in the macro `map` (in Nightly builds, run with -Z macro-backtrace for more info)\n> \n> \u001b[1m\u001b[33mwarning\u001b[0m\u001b[1m: trailing semicolon in macro used in expression position\u001b[0m\n>    \u001b[1m\u001b[94m--> \u001b[0m/home/yzzhao3/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/nom-2.2.1/src/macros.rs:514:42\n>     \u001b[1m\u001b[94m|\u001b[0m\n> \u001b[1m\u001b[94m514\u001b[0m \u001b[1m\u001b[94m|\u001b[0m     map!(__impl $i, call!($f), call!($g));\n>     \u001b[1m\u001b[94m|\u001b[0m                                          \u001b[1m\u001b[33m^\u001b[0m\n>     \u001b[1m\u001b[94m|\u001b[0m\n>    \u001b[1m\u001b[94m::: \u001b[0m/home/yzzhao3/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/nom-2.2.1/src/nom.rs:375:3\n>     \u001b[1m\u001b[94m|\u001b[0m\n> \u001b[1m\u001b[94m375\u001b[0m \u001b[1m\u001b[94m|\u001b[0m   map!(i, be_u16, | x | { x as i16 })\n>     \u001b[1m\u001b[94m|\u001b[0m   \u001b[1m\u001b[94m-----------------------------------\u001b[0m \u001b[1m\u001b[94min this macro invocation\u001b[0m\n>     \u001b[1m\u001b[94m|\u001b[0m\n>     \u001b[1m\u001b[94m= \u001b[0m\u001b[1mwarning\u001b[0m: this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release!\n>     \u001b[1m\u001b[94m= \u001b[0m\u001b[1mnote\u001b[0m: for more information, see issue #79813 <https://github.com/rust-lang/rust/issues/79813>\n>     \u001b[1m\u001b[94m= \u001b[0m\u001b[1mnote\u001b[0m: macro invocations at the end of a block are treated as expressions\n>     \u001b[1m\u001b[94m= \u001b[0m\u001b[1mnote\u001b[0m: to ignore the value produced by the macro, add a semicolon after the invocation of `map`\n>     \u001b[1m\u001b[94m= \u001b[0m\u001b[1mnote\u001b[0m: this warning originates in the macro `map` (in Nightly builds, run with -Z macro-backtrace for more info)\n> \n> \u001b[1m\u001b[33mwarning\u001b[0m\u001b[1m: trailing semicolon in macro used in expression position\u001b[0m\n>    \u001b[1m\u001b[94m--> \u001b[0m/home/yzzhao3/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/nom-2.2.1/src/macros.rs:514:42\n>     \u001b[1m\u001b[94m|\u001b[0m\n> \u001b[1m\u001b[94m514\u001b[0m \u001b[1m\u001b[94m|\u001b[0m     map!(__impl $i, call!($f), call!($g));\n>     \u001b[1m\u001b[94m|\u001b[0m                                          \u001b[1m\u001b[33m^\u001b[0m\n>     \u001b[1m\u001b[94m|\u001b[0m\n>    \u001b[1m\u001b[94m::: \u001b[0m/home/yzzhao3/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/nom-2.2.1/src/nom.rs:381:3\n>     \u001b[1m\u001b[94m|\u001b[0m\n> \u001b[1m\u001b[94m381\u001b[0m \u001b[1m\u001b[94m|\u001b[0m   map!(i, be_u32, | x | { x as i32 })\n>     \u001b[1m\u001b[94m|\u001b[0m   \u001b[1m\u001b[94m-----------------------------------\u001b[0m \u001b[1m\u001b[94min this macro invocation\u001b[0m\n>     \u001b[1m\u001b[94m|\u001b[0m\n>     \u001b[1m\u001b[94m= \u001b[0m\u001b[1mwarning\u001b[0m: this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release!\n>     \u001b[1m\u001b[94m= \u001b[0m\u001b[1mnote\u001b[0m: for more information, see issue #79813 <https://github.com/rust-lang/rust/issues/79813>\n>     \u001b[1m\u001b[94m= \u001b[0m\u001b[1mnote\u001b[0m: macro invocations at the end of a block are treated as expressions\n>     \u001b[1m\u001b[94m= \u001b[0m\u001b[1mnote\u001b[0m: to ignore the value produced by the macro, add a semicolon after the invocation of `map`\n>     \u001b[1m\u001b[94m= \u001b[0m\u001b[1mnote\u001b[0m: this warning originates in the macro `map` (in Nightly builds, run with -Z macro-backtrace for more info)\n> \n> \u001b[1m\u001b[33mwarning\u001b[0m\u001b[1m: trailing semicolon in macro used in expression position\u001b[0m\n>    \u001b[1m\u001b[94m--> \u001b[0m/home/yzzhao3/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/nom-2.2.1/src/macros.rs:514:42\n>     \u001b[1m\u001b[94m|\u001b[0m\n> \u001b[1m\u001b[94m514\u001b[0m \u001b[1m\u001b[94m|\u001b[0m     map!(__impl $i, call!($f), call!($g));\n>     \u001b[1m\u001b[94m|\u001b[0m                                          \u001b[1m\u001b[33m^\u001b[0m\n>     \u001b[1m\u001b[94m|\u001b[0m\n>    \u001b[1m\u001b[94m::: \u001b[0m/home/yzzhao3/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/nom-2.2.1/src/nom.rs:387:3\n>     \u001b[1m\u001b[94m|\u001b[0m\n> \u001b[1m\u001b[94m387\u001b[0m \u001b[1m\u001b[94m|\u001b[0m   map!(i, be_u64, | x | { x as i64 })\n>     \u001b[1m\u001b[94m|\u001b[0m   \u001b[1m\u001b[94m-----------------------------------\u001b[0m \u001b[1m\u001b[94min this macro invocation\u001b[0m\n>     \u001b[1m\u001b[94m|\u001b[0m\n>     \u001b[1m\u001b[94m= \u001b[0m\u001b[1mwarning\u001b[0m: this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release!\n>     \u001b[1m\u001b[94m= \u001b[0m\u001b[1mnote\u001b[0m: for more information, see issue #79813 <https://github.com/rust-lang/rust/issues/79813>\n>     \u001b[1m\u001b[94m= \u001b[0m\u001b[1mnote\u001b[0m: macro invocations at the end of a block are treated as expressions\n>     \u001b[1m\u001b[94m= \u001b[0m\u001b[1mnote\u001b[0m: to ignore the value produced by the macro, add a semicolon after the invocation of `map`\n>     \u001b[1m\u001b[94m= \u001b[0m\u001b[1mnote\u001b[0m: this warning originates in the macro `map` (in Nightly builds, run with -Z macro-backtrace for more info)\n> \n> \u001b[1m\u001b[33mwarning\u001b[0m\u001b[1m: trailing semicolon in macro used in expression position\u001b[0m\n>    \u001b[1m\u001b[94m--> \u001b[0m/home/yzzhao3/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/nom-2.2.1/src/macros.rs:514:42\n>     \u001b[1m\u001b[94m|\u001b[0m\n> \u001b[1m\u001b[94m514\u001b[0m \u001b[1m\u001b[94m|\u001b[0m     map!(__impl $i, call!($f), call!($g));\n>     \u001b[1m\u001b[94m|\u001b[0m                                          \u001b[1m\u001b[33m^\u001b[0m\n>     \u001b[1m\u001b[94m|\u001b[0m\n>    \u001b[1m\u001b[94m::: \u001b[0m/home/yzzhao3/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/nom-2.2.1/src/nom.rs:437:3\n>     \u001b[1m\u001b[94m|\u001b[0m\n> \u001b[1m\u001b[94m437\u001b[0m \u001b[1m\u001b[94m|\u001b[0m   map!(i, le_u8, | x | { x as i8 })\n>     \u001b[1m\u001b[94m|\u001b[0m   \u001b[1m\u001b[94m---------------------------------\u001b[0m \u001b[1m\u001b[94min this macro invocation\u001b[0m\n>     \u001b[1m\u001b[94m|\u001b[0m\n>     \u001b[1m\u001b[94m= \u001b[0m\u001b[1mwarning\u001b[0m: this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release!\n>     \u001b[1m\u001b[94m= \u001b[0m\u001b[1mnote\u001b[0m: for more information, see issue #79813 <https://github.com/rust-lang/rust/issues/79813>\n>     \u001b[1m\u001b[94m= \u001b[0m\u001b[1mnote\u001b[0m: macro invocations at the end of a block are treated as expressions\n>     \u001b[1m\u001b[94m= \u001b[0m\u001b[1mnote\u001b[0m: to ignore the value produced by the macro, add a semicolon after the invocation of `map`\n>     \u001b[1m\u001b[94m= \u001b[0m\u001b[1mnote\u001b[0m: this warning originates in the macro `map` (in Nightly builds, run with -Z macro-backtrace for more info)\n> \n> \u001b[1m\u001b[33mwarning\u001b[0m\u001b[1m: trailing semicolon in macro used in expression position\u001b[0m\n>    \u001b[1m\u001b[94m--> \u001b[0m/home/yzzhao3/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/nom-2.2.1/src/macros.rs:514:42\n>     \u001b[1m\u001b[94m|\u001b[0m\n> \u001b[1m\u001b[94m514\u001b[0m \u001b[1m\u001b[94m|\u001b[0m     map!(__impl $i, call!($f), call!($g));\n>     \u001b[1m\u001b[94m|\u001b[0m                                          \u001b[1m\u001b[33m^\u001b[0m\n>     \u001b[1m\u001b[94m|\u001b[0m\n>    \u001b[1m\u001b[94m::: \u001b[0m/home/yzzhao3/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/nom-2.2.1/src/nom.rs:443:3\n>     \u001b[1m\u001b[94m|\u001b[0m\n> \u001b[1m\u001b[94m443\u001b[0m \u001b[1m\u001b[94m|\u001b[0m   map!(i, le_u16, | x | { x as i16 })\n>     \u001b[1m\u001b[94m|\u001b[0m   \u001b[1m\u001b[94m-----------------------------------\u001b[0m \u001b[1m\u001b[94min this macro invocation\u001b[0m\n>     \u001b[1m\u001b[94m|\u001b[0m\n>     \u001b[1m\u001b[94m= \u001b[0m\u001b[1mwarning\u001b[0m: this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release!\n>     \u001b[1m\u001b[94m= \u001b[0m\u001b[1mnote\u001b[0m: for more information, see issue #79813 <https://github.com/rust-lang/rust/issues/79813>\n>     \u001b[1m\u001b[94m= \u001b[0m\u001b[1mnote\u001b[0m: macro invocations at the end of a block are treated as expressions\n>     \u001b[1m\u001b[94m= \u001b[0m\u001b[1mnote\u001b[0m: to ignore the value produced by the macro, add a semicolon after the invocation of `map`\n>     \u001b[1m\u001b[94m= \u001b[0m\u001b[1mnote\u001b[0m: this warning originates in the macro `map` (in Nightly builds, run with -Z macro-backtrace for more info)\n> \n> \u001b[1m\u001b[33mwarning\u001b[0m\u001b[1m: trailing semicolon in macro used in expression position\u001b[0m\n>    \u001b[1m\u001b[94m--> \u001b[0m/home/yzzhao3/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/nom-2.2.1/src/macros.rs:514:42\n>     \u001b[1m\u001b[94m|\u001b[0m\n> \u001b[1m\u001b[94m514\u001b[0m \u001b[1m\u001b[94m|\u001b[0m     map!(__impl $i, call!($f), call!($g));\n>     \u001b[1m\u001b[94m|\u001b[0m                                          \u001b[1m\u001b[33m^\u001b[0m\n>     \u001b[1m\u001b[94m|\u001b[0m\n>    \u001b[1m\u001b[94m::: \u001b[0m/home/yzzhao3/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/nom-2.2.1/src/nom.rs:449:3\n>     \u001b[1m\u001b[94m|\u001b[0m\n> \u001b[1m\u001b[94m449\u001b[0m \u001b[1m\u001b[94m|\u001b[0m   map!(i, le_u32, | x | { x as i32 })\n>     \u001b[1m\u001b[94m|\u001b[0m   \u001b[1m\u001b[94m-----------------------------------\u001b[0m \u001b[1m\u001b[94min this macro invocation\u001b[0m\n>     \u001b[1m\u001b[94m|\u001b[0m\n>     \u001b[1m\u001b[94m= \u001b[0m\u001b[1mwarning\u001b[0m: this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release!\n>     \u001b[1m\u001b[94m= \u001b[0m\u001b[1mnote\u001b[0m: for more information, see issue #79813 <https://github.com/rust-lang/rust/issues/79813>\n>     \u001b[1m\u001b[94m= \u001b[0m\u001b[1mnote\u001b[0m: macro invocations at the end of a block are treated as expressions\n>     \u001b[1m\u001b[94m= \u001b[0m\u001b[1mnote\u001b[0m: to ignore the value produced by the macro, add a semicolon after the invocation of `map`\n>     \u001b[1m\u001b[94m= \u001b[0m\u001b[1mnote\u001b[0m: this warning originates in the macro `map` (in Nightly builds, run with -Z macro-backtrace for more info)\n> \n> \u001b[1m\u001b[33mwarning\u001b[0m\u001b[1m: trailing semicolon in macro used in expression position\u001b[0m\n>    \u001b[1m\u001b[94m--> \u001b[0m/home/yzzhao3/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/nom-2.2.1/src/macros.rs:514:42\n>     \u001b[1m\u001b[94m|\u001b[0m\n> \u001b[1m\u001b[94m514\u001b[0m \u001b[1m\u001b[94m|\u001b[0m     map!(__impl $i, call!($f), call!($g));\n>     \u001b[1m\u001b[94m|\u001b[0m                                          \u001b[1m\u001b[33m^\u001b[0m\n>     \u001b[1m\u001b[94m|\u001b[0m\n>    \u001b[1m\u001b[94m::: \u001b[0m/home/yzzhao3/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/nom-2.2.1/src/nom.rs:455:3\n>     \u001b[1m\u001b[94m|\u001b[0m\n> \u001b[1m\u001b[94m455\u001b[0m \u001b[1m\u001b[94m|\u001b[0m   map!(i, le_u64, | x | { x as i64 })\n>     \u001b[1m\u001b[94m|\u001b[0m   \u001b[1m\u001b[94m-----------------------------------\u001b[0m \u001b[1m\u001b[94min this macro invocation\u001b[0m\n>     \u001b[1m\u001b[94m|\u001b[0m\n>     \u001b[1m\u001b[94m= \u001b[0m\u001b[1mwarning\u001b[0m: this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release!\n>     \u001b[1m\u001b[94m= \u001b[0m\u001b[1mnote\u001b[0m: for more information, see issue #79813 <https://github.com/rust-lang/rust/issues/79813>\n>     \u001b[1m\u001b[94m= \u001b[0m\u001b[1mnote\u001b[0m: macro invocations at the end of a block are treated as expressions\n>     \u001b[1m\u001b[94m= \u001b[0m\u001b[1mnote\u001b[0m: to ignore the value produced by the macro, add a semicolon after the invocation of `map`\n>     \u001b[1m\u001b[94m= \u001b[0m\u001b[1mnote\u001b[0m: this warning originates in the macro `map` (in Nightly builds, run with -Z macro-backtrace for more info)\n> \n> \u001b[1m\u001b[33mwarning\u001b[0m\u001b[1m: trailing semicolon in macro used in expression position\u001b[0m\n>    \u001b[1m\u001b[94m--> \u001b[0m/home/yzzhao3/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/nom-2.2.1/src/sequence.rs:694:41\n>     \u001b[1m\u001b[94m|\u001b[0m\n> \u001b[1m\u001b[94m694\u001b[0m \u001b[1m\u001b[94m|\u001b[0m       delimited!($i, call!($f), $($rest)*);\n>     \u001b[1m\u001b[94m|\u001b[0m                                           \u001b[1m\u001b[33m^\u001b[0m\n>     \u001b[1m\u001b[94m|\u001b[0m\n>    \u001b[1m\u001b[94m::: \u001b[0m/home/yzzhao3/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/nom-2.2.1/src/nom.rs:601:3\n>     \u001b[1m\u001b[94m|\u001b[0m\n> \u001b[1m\u001b[94m601\u001b[0m \u001b[1m\u001b[94m|\u001b[0m \u001b[1m\u001b[94m/\u001b[0m   flat_map!(input,\n> \u001b[1m\u001b[94m602\u001b[0m \u001b[1m\u001b[94m|\u001b[0m \u001b[1m\u001b[94m|\u001b[0m     recognize!(\n> \u001b[1m\u001b[94m603\u001b[0m \u001b[1m\u001b[94m|\u001b[0m \u001b[1m\u001b[94m|\u001b[0m       tuple!(\n> \u001b[1m\u001b[94m604\u001b[0m \u001b[1m\u001b[94m|\u001b[0m \u001b[1m\u001b[94m|\u001b[0m         opt!(alt!(tag!(\"+\") | tag!(\"-\"))),\n> \u001b[1m\u001b[94m...\u001b[0m   \u001b[1m\u001b[94m|\u001b[0m\n> \u001b[1m\u001b[94m617\u001b[0m \u001b[1m\u001b[94m|\u001b[0m \u001b[1m\u001b[94m|\u001b[0m     parse_to!(f32)\n> \u001b[1m\u001b[94m618\u001b[0m \u001b[1m\u001b[94m|\u001b[0m \u001b[1m\u001b[94m|\u001b[0m   )\n>     \u001b[1m\u001b[94m|\u001b[0m \u001b[1m\u001b[94m|___-\u001b[0m \u001b[1m\u001b[94min this macro invocation\u001b[0m\n>     \u001b[1m\u001b[94m|\u001b[0m\n>     \u001b[1m\u001b[94m= \u001b[0m\u001b[1mwarning\u001b[0m: this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release!\n>     \u001b[1m\u001b[94m= \u001b[0m\u001b[1mnote\u001b[0m: for more information, see issue #79813 <https://github.com/rust-lang/rust/issues/79813>\n>     \u001b[1m\u001b[94m= \u001b[0m\u001b[1mnote\u001b[0m: macro invocations at the end of a block are treated as expressions\n>     \u001b[1m\u001b[94m= \u001b[0m\u001b[1mnote\u001b[0m: to ignore the value produced by the macro, add a semicolon after the invocation of `delimited`\n>     \u001b[1m\u001b[94m= \u001b[0m\u001b[1mnote\u001b[0m: this warning originates in the macro `delimited` which comes from the expansion of the macro `flat_map` (in Nightly builds, run with -Z macro-backtrace for more info)\n> \n> \u001b[1m\u001b[33mwarning\u001b[0m\u001b[1m: trailing semicolon in macro used in expression position\u001b[0m\n>    \u001b[1m\u001b[94m--> \u001b[0m/home/yzzhao3/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/nom-2.2.1/src/macros.rs:776:24\n>     \u001b[1m\u001b[94m|\u001b[0m\n> \u001b[1m\u001b[94m776\u001b[0m \u001b[1m\u001b[94m|\u001b[0m       opt!($i, call!($f));\n>     \u001b[1m\u001b[94m|\u001b[0m                          \u001b[1m\u001b[33m^\u001b[0m\n>     \u001b[1m\u001b[94m|\u001b[0m\n>    \u001b[1m\u001b[94m::: \u001b[0m/home/yzzhao3/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/nom-2.2.1/src/nom.rs:601:3\n>     \u001b[1m\u001b[94m|\u001b[0m\n> \u001b[1m\u001b[94m601\u001b[0m \u001b[1m\u001b[94m|\u001b[0m \u001b[1m\u001b[94m/\u001b[0m   flat_map!(input,\n> \u001b[1m\u001b[94m602\u001b[0m \u001b[1m\u001b[94m|\u001b[0m \u001b[1m\u001b[94m|\u001b[0m     recognize!(\n> \u001b[1m\u001b[94m603\u001b[0m \u001b[1m\u001b[94m|\u001b[0m \u001b[1m\u001b[94m|\u001b[0m       tuple!(\n> \u001b[1m\u001b[94m604\u001b[0m \u001b[1m\u001b[94m|\u001b[0m \u001b[1m\u001b[94m|\u001b[0m         opt!(alt!(tag!(\"+\") | tag!(\"-\"))),\n> \u001b[1m\u001b[94m...\u001b[0m   \u001b[1m\u001b[94m|\u001b[0m\n> \u001b[1m\u001b[94m617\u001b[0m \u001b[1m\u001b[94m|\u001b[0m \u001b[1m\u001b[94m|\u001b[0m     parse_to!(f32)\n> \u001b[1m\u001b[94m618\u001b[0m \u001b[1m\u001b[94m|\u001b[0m \u001b[1m\u001b[94m|\u001b[0m   )\n>     \u001b[1m\u001b[94m|\u001b[0m \u001b[1m\u001b[94m|___-\u001b[0m \u001b[1m\u001b[94min this macro invocation\u001b[0m\n>     \u001b[1m\u001b[94m|\u001b[0m\n>     \u001b[1m\u001b[94m= \u001b[0m\u001b[1mwarning\u001b[0m: this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release!\n>     \u001b[1m\u001b[94m= \u001b[0m\u001b[1mnote\u001b[0m: for more information, see issue #79813 <https://github.com/rust-lang/rust/issues/79813>\n>     \u001b[1m\u001b[94m= \u001b[0m\u001b[1mnote\u001b[0m: macro invocations at the end of a block are treated as expressions\n>     \u001b[1m\u001b[94m= \u001b[0m\u001b[1mnote\u001b[0m: to ignore the value produced by the macro, add a semicolon after the invocation of `opt`\n>     \u001b[1m\u001b[94m= \u001b[0m\u001b[1mnote\u001b[0m: this warning originates in the macro `opt` which comes from the expansion of the macro `flat_map` (in Nightly builds, run with -Z macro-backtrace for more info)\n> \n> \u001b[1m\u001b[33mwarning\u001b[0m\u001b[1m: trailing semicolon in macro used in expression position\u001b[0m\n>    \u001b[1m\u001b[94m--> \u001b[0m/home/yzzhao3/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/nom-2.2.1/src/macros.rs:776:24\n>     \u001b[1m\u001b[94m|\u001b[0m\n> \u001b[1m\u001b[94m776\u001b[0m \u001b[1m\u001b[94m|\u001b[0m       opt!($i, call!($f));\n>     \u001b[1m\u001b[94m|\u001b[0m                          \u001b[1m\u001b[33m^\u001b[0m\n>     \u001b[1m\u001b[94m|\u001b[0m\n>    \u001b[1m\u001b[94m::: \u001b[0m/home/yzzhao3/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/nom-2.2.1/src/nom.rs:601:3\n>     \u001b[1m\u001b[94m|\u001b[0m\n> \u001b[1m\u001b[94m601\u001b[0m \u001b[1m\u001b[94m|\u001b[0m \u001b[1m\u001b[94m/\u001b[0m   flat_map!(input,\n> \u001b[1m\u001b[94m602\u001b[0m \u001b[1m\u001b[94m|\u001b[0m \u001b[1m\u001b[94m|\u001b[0m     recognize!(\n> \u001b[1m\u001b[94m603\u001b[0m \u001b[1m\u001b[94m|\u001b[0m \u001b[1m\u001b[94m|\u001b[0m       tuple!(\n> \u001b[1m\u001b[94m604\u001b[0m \u001b[1m\u001b[94m|\u001b[0m \u001b[1m\u001b[94m|\u001b[0m         opt!(alt!(tag!(\"+\") | tag!(\"-\"))),\n> \u001b[1m\u001b[94m...\u001b[0m   \u001b[1m\u001b[94m|\u001b[0m\n> \u001b[1m\u001b[94m617\u001b[0m \u001b[1m\u001b[94m|\u001b[0m \u001b[1m\u001b[94m|\u001b[0m     parse_to!(f32)\n> \u001b[1m\u001b[94m618\u001b[0m \u001b[1m\u001b[94m|\u001b[0m \u001b[1m\u001b[94m|\u001b[0m   )\n>     \u001b[1m\u001b[94m|\u001b[0m \u001b[1m\u001b[94m|___-\u001b[0m \u001b[1m\u001b[94min this macro invocation\u001b[0m\n>     \u001b[1m\u001b[94m|\u001b[0m\n>     \u001b[1m\u001b[94m= \u001b[0m\u001b[1mwarning\u001b[0m: this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release!\n>     \u001b[1m\u001b[94m= \u001b[0m\u001b[1mnote\u001b[0m: for more information, see issue #79813 <https://github.com/rust-lang/rust/issues/79813>\n>     \u001b[1m\u001b[94m= \u001b[0m\u001b[1mnote\u001b[0m: macro invocations at the end of a block are treated as expressions\n>     \u001b[1m\u001b[94m= \u001b[0m\u001b[1mnote\u001b[0m: to ignore the value produced by the macro, add a semicolon after the invocation of `opt`\n>     \u001b[1m\u001b[94m= \u001b[0m\u001b[1mnote\u001b[0m: this warning originates in the macro `opt` which comes from the expansion of the macro `flat_map` (in Nightly builds, run with -Z macro-backtrace for more info)\n> \n> \u001b[1m\u001b[33mwarning\u001b[0m\u001b[1m: trailing semicolon in macro used in expression position\u001b[0m\n>    \u001b[1m\u001b[94m--> \u001b[0m/home/yzzhao3/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/nom-2.2.1/src/sequence.rs:508:60\n>     \u001b[1m\u001b[94m|\u001b[0m\n> \u001b[1m\u001b[94m508\u001b[0m \u001b[1m\u001b[94m|\u001b[0m       tuple_parser!($i, $consumed, ($($parsed),*), call!($e));\n>     \u001b[1m\u001b[94m|\u001b[0m                                                              \u001b[1m\u001b[33m^\u001b[0m\n>     \u001b[1m\u001b[94m|\u001b[0m\n>    \u001b[1m\u001b[94m::: \u001b[0m/home/yzzhao3/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/nom-2.2.1/src/nom.rs:601:3\n>     \u001b[1m\u001b[94m|\u001b[0m\n> \u001b[1m\u001b[94m601\u001b[0m \u001b[1m\u001b[94m|\u001b[0m \u001b[1m\u001b[94m/\u001b[0m   flat_map!(input,\n> \u001b[1m\u001b[94m602\u001b[0m \u001b[1m\u001b[94m|\u001b[0m \u001b[1m\u001b[94m|\u001b[0m     recognize!(\n> \u001b[1m\u001b[94m603\u001b[0m \u001b[1m\u001b[94m|\u001b[0m \u001b[1m\u001b[94m|\u001b[0m       tuple!(\n> \u001b[1m\u001b[94m604\u001b[0m \u001b[1m\u001b[94m|\u001b[0m \u001b[1m\u001b[94m|\u001b[0m         opt!(alt!(tag!(\"+\") | tag!(\"-\"))),\n> \u001b[1m\u001b[94m...\u001b[0m   \u001b[1m\u001b[94m|\u001b[0m\n> \u001b[1m\u001b[94m617\u001b[0m \u001b[1m\u001b[94m|\u001b[0m \u001b[1m\u001b[94m|\u001b[0m     parse_to!(f32)\n> \u001b[1m\u001b[94m618\u001b[0m \u001b[1m\u001b[94m|\u001b[0m \u001b[1m\u001b[94m|\u001b[0m   )\n>     \u001b[1m\u001b[94m|\u001b[0m \u001b[1m\u001b[94m|___-\u001b[0m \u001b[1m\u001b[94min this macro invocation\u001b[0m\n>     \u001b[1m\u001b[94m|\u001b[0m\n>     \u001b[1m\u001b[94m= \u001b[0m\u001b[1mwarning\u001b[0m: this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release!\n>     \u001b[1m\u001b[94m= \u001b[0m\u001b[1mnote\u001b[0m: for more information, see issue #79813 <https://github.com/rust-lang/rust/issues/79813>\n>     \u001b[1m\u001b[94m= \u001b[0m\u001b[1mnote\u001b[0m: macro invocations at the end of a block are treated as expressions\n>     \u001b[1m\u001b[94m= \u001b[0m\u001b[1mnote\u001b[0m: to ignore the value produced by the macro, add a semicolon after the invocation of `tuple_parser`\n>     \u001b[1m\u001b[94m= \u001b[0m\u001b[1mnote\u001b[0m: this warning originates in the macro `tuple_parser` which comes from the expansion of the macro `flat_map` (in Nightly builds, run with -Z macro-backtrace for more info)\n> \n> \u001b[1m\u001b[33mwarning\u001b[0m\u001b[1m: trailing semicolon in macro used in expression position\u001b[0m\n>    \u001b[1m\u001b[94m--> \u001b[0m/home/yzzhao3/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/nom-2.2.1/src/sequence.rs:508:60\n>     \u001b[1m\u001b[94m|\u001b[0m\n> \u001b[1m\u001b[94m508\u001b[0m \u001b[1m\u001b[94m|\u001b[0m       tuple_parser!($i, $consumed, ($($parsed),*), call!($e));\n>     \u001b[1m\u001b[94m|\u001b[0m                                                              \u001b[1m\u001b[33m^\u001b[0m\n>     \u001b[1m\u001b[94m|\u001b[0m\n>    \u001b[1m\u001b[94m::: \u001b[0m/home/yzzhao3/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/nom-2.2.1/src/nom.rs:601:3\n>     \u001b[1m\u001b[94m|\u001b[0m\n> \u001b[1m\u001b[94m601\u001b[0m \u001b[1m\u001b[94m|\u001b[0m \u001b[1m\u001b[94m/\u001b[0m   flat_map!(input,\n> \u001b[1m\u001b[94m602\u001b[0m \u001b[1m\u001b[94m|\u001b[0m \u001b[1m\u001b[94m|\u001b[0m     recognize!(\n> \u001b[1m\u001b[94m603\u001b[0m \u001b[1m\u001b[94m|\u001b[0m \u001b[1m\u001b[94m|\u001b[0m       tuple!(\n> \u001b[1m\u001b[94m604\u001b[0m \u001b[1m\u001b[94m|\u001b[0m \u001b[1m\u001b[94m|\u001b[0m         opt!(alt!(tag!(\"+\") | tag!(\"-\"))),\n> \u001b[1m\u001b[94m...\u001b[0m   \u001b[1m\u001b[94m|\u001b[0m\n> \u001b[1m\u001b[94m617\u001b[0m \u001b[1m\u001b[94m|\u001b[0m \u001b[1m\u001b[94m|\u001b[0m     parse_to!(f32)\n> \u001b[1m\u001b[94m618\u001b[0m \u001b[1m\u001b[94m|\u001b[0m \u001b[1m\u001b[94m|\u001b[0m   )\n>     \u001b[1m\u001b[94m|\u001b[0m \u001b[1m\u001b[94m|___-\u001b[0m \u001b[1m\u001b[94min this macro invocation\u001b[0m\n>     \u001b[1m\u001b[94m|\u001b[0m\n>     \u001b[1m\u001b[94m= \u001b[0m\u001b[1mwarning\u001b[0m: this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release!\n>     \u001b[1m\u001b[94m= \u001b[0m\u001b[1mnote\u001b[0m: for more information, see issue #79813 <https://github.com/rust-lang/rust/issues/79813>\n>     \u001b[1m\u001b[94m= \u001b[0m\u001b[1mnote\u001b[0m: macro invocations at the end of a block are treated as expressions\n>     \u001b[1m\u001b[94m= \u001b[0m\u001b[1mnote\u001b[0m: to ignore the value produced by the macro, add a semicolon after the invocation of `tuple_parser`\n>     \u001b[1m\u001b[94m= \u001b[0m\u001b[1mnote\u001b[0m: this warning originates in the macro `tuple_parser` which comes from the expansion of the macro `flat_map` (in Nightly builds, run with -Z macro-backtrace for more info)\n> \n> \u001b[1m\u001b[33mwarning\u001b[0m\u001b[1m: trailing semicolon in macro used in expression position\u001b[0m\n>    \u001b[1m\u001b[94m--> \u001b[0m/home/yzzhao3/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/nom-2.2.1/src/sequence.rs:694:41\n>     \u001b[1m\u001b[94m|\u001b[0m\n> \u001b[1m\u001b[94m694\u001b[0m \u001b[1m\u001b[94m|\u001b[0m       delimited!($i, call!($f), $($rest)*);\n>     \u001b[1m\u001b[94m|\u001b[0m                                           \u001b[1m\u001b[33m^\u001b[0m\n>     \u001b[1m\u001b[94m|\u001b[0m\n>    \u001b[1m\u001b[94m::: \u001b[0m/home/yzzhao3/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/nom-2.2.1/src/nom.rs:624:3\n>     \u001b[1m\u001b[94m|\u001b[0m\n> \u001b[1m\u001b[94m624\u001b[0m \u001b[1m\u001b[94m|\u001b[0m \u001b[1m\u001b[94m/\u001b[0m   flat_map!(input,\n> \u001b[1m\u001b[94m625\u001b[0m \u001b[1m\u001b[94m|\u001b[0m \u001b[1m\u001b[94m|\u001b[0m     recognize!(\n> \u001b[1m\u001b[94m626\u001b[0m \u001b[1m\u001b[94m|\u001b[0m \u001b[1m\u001b[94m|\u001b[0m       tuple!(\n> \u001b[1m\u001b[94m627\u001b[0m \u001b[1m\u001b[94m|\u001b[0m \u001b[1m\u001b[94m|\u001b[0m         opt!(alt!(tag!(\"+\") | tag!(\"-\"))),\n> \u001b[1m\u001b[94m...\u001b[0m   \u001b[1m\u001b[94m|\u001b[0m\n> \u001b[1m\u001b[94m640\u001b[0m \u001b[1m\u001b[94m|\u001b[0m \u001b[1m\u001b[94m|\u001b[0m     parse_to!(f32)\n> \u001b[1m\u001b[94m641\u001b[0m \u001b[1m\u001b[94m|\u001b[0m \u001b[1m\u001b[94m|\u001b[0m   )\n>     \u001b[1m\u001b[94m|\u001b[0m \u001b[1m\u001b[94m|___-\u001b[0m \u001b[1m\u001b[94min this macro invocation\u001b[0m\n>     \u001b[1m\u001b[94m|\u001b[0m\n>     \u001b[1m\u001b[94m= \u001b[0m\u001b[1mwarning\u001b[0m: this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release!\n>     \u001b[1m\u001b[94m= \u001b[0m\u001b[1mnote\u001b[0m: for more information, see issue #79813 <https://github.com/rust-lang/rust/issues/79813>\n>     \u001b[1m\u001b[94m= \u001b[0m\u001b[1mnote\u001b[0m: macro invocations at the end of a block are treated as expressions\n>     \u001b[1m\u001b[94m= \u001b[0m\u001b[1mnote\u001b[0m: to ignore the value produced by the macro, add a semicolon after the invocation of `delimited`\n>     \u001b[1m\u001b[94m= \u001b[0m\u001b[1mnote\u001b[0m: this warning originates in the macro `delimited` which comes from the expansion of the macro `flat_map` (in Nightly builds, run with -Z macro-backtrace for more info)\n> \n> \u001b[1m\u001b[33mwarning\u001b[0m\u001b[1m: trailing semicolon in macro used in expression position\u001b[0m\n>    \u001b[1m\u001b[94m--> \u001b[0m/home/yzzhao3/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/nom-2.2.1/src/macros.rs:776:24\n>     \u001b[1m\u001b[94m|\u001b[0m\n> \u001b[1m\u001b[94m776\u001b[0m \u001b[1m\u001b[94m|\u001b[0m       opt!($i, call!($f));\n>     \u001b[1m\u001b[94m|\u001b[0m                          \u001b[1m\u001b[33m^\u001b[0m\n>     \u001b[1m\u001b[94m|\u001b[0m\n>    \u001b[1m\u001b[94m::: \u001b[0m/home/yzzhao3/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/nom-2.2.1/src/nom.rs:624:3\n>     \u001b[1m\u001b[94m|\u001b[0m\n> \u001b[1m\u001b[94m624\u001b[0m \u001b[1m\u001b[94m|\u001b[0m \u001b[1m\u001b[94m/\u001b[0m   flat_map!(input,\n> \u001b[1m\u001b[94m625\u001b[0m \u001b[1m\u001b[94m|\u001b[0m \u001b[1m\u001b[94m|\u001b[0m     recognize!(\n> \u001b[1m\u001b[94m626\u001b[0m \u001b[1m\u001b[94m|\u001b[0m \u001b[1m\u001b[94m|\u001b[0m       tuple!(\n> \u001b[1m\u001b[94m627\u001b[0m \u001b[1m\u001b[94m|\u001b[0m \u001b[1m\u001b[94m|\u001b[0m         opt!(alt!(tag!(\"+\") | tag!(\"-\"))),\n> \u001b[1m\u001b[94m...\u001b[0m   \u001b[1m\u001b[94m|\u001b[0m\n> \u001b[1m\u001b[94m640\u001b[0m \u001b[1m\u001b[94m|\u001b[0m \u001b[1m\u001b[94m|\u001b[0m     parse_to!(f32)\n> \u001b[1m\u001b[94m641\u001b[0m \u001b[1m\u001b[94m|\u001b[0m \u001b[1m\u001b[94m|\u001b[0m   )\n>     \u001b[1m\u001b[94m|\u001b[0m \u001b[1m\u001b[94m|___-\u001b[0m \u001b[1m\u001b[94min this macro invocation\u001b[0m\n>     \u001b[1m\u001b[94m|\u001b[0m\n>     \u001b[1m\u001b[94m= \u001b[0m\u001b[1mwarning\u001b[0m: this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release!\n>     \u001b[1m\u001b[94m= \u001b[0m\u001b[1mnote\u001b[0m: for more information, see issue #79813 <https://github.com/rust-lang/rust/issues/79813>\n>     \u001b[1m\u001b[94m= \u001b[0m\u001b[1mnote\u001b[0m: macro invocations at the end of a block are treated as expressions\n>     \u001b[1m\u001b[94m= \u001b[0m\u001b[1mnote\u001b[0m: to ignore the value produced by the macro, add a semicolon after the invocation of `opt`\n>     \u001b[1m\u001b[94m= \u001b[0m\u001b[1mnote\u001b[0m: this warning originates in the macro `opt` which comes from the expansion of the macro `flat_map` (in Nightly builds, run with -Z macro-backtrace for more info)\n> \n> \u001b[1m\u001b[33mwarning\u001b[0m\u001b[1m: trailing semicolon in macro used in expression position\u001b[0m\n>    \u001b[1m\u001b[94m--> \u001b[0m/home/yzzhao3/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/nom-2.2.1/src/macros.rs:776:24\n>     \u001b[1m\u001b[94m|\u001b[0m\n> \u001b[1m\u001b[94m776\u001b[0m \u001b[1m\u001b[94m|\u001b[0m       opt!($i, call!($f));\n>     \u001b[1m\u001b[94m|\u001b[0m                          \u001b[1m\u001b[33m^\u001b[0m\n>     \u001b[1m\u001b[94m|\u001b[0m\n>    \u001b[1m\u001b[94m::: \u001b[0m/home/yzzhao3/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/nom-2.2.1/src/nom.rs:624:3\n>     \u001b[1m\u001b[94m|\u001b[0m\n> \u001b[1m\u001b[94m624\u001b[0m \u001b[1m\u001b[94m|\u001b[0m \u001b[1m\u001b[94m/\u001b[0m   flat_map!(input,\n> \u001b[1m\u001b[94m625\u001b[0m \u001b[1m\u001b[94m|\u001b[0m \u001b[1m\u001b[94m|\u001b[0m     recognize!(\n> \u001b[1m\u001b[94m626\u001b[0m \u001b[1m\u001b[94m|\u001b[0m \u001b[1m\u001b[94m|\u001b[0m       tuple!(\n> \u001b[1m\u001b[94m627\u001b[0m \u001b[1m\u001b[94m|\u001b[0m \u001b[1m\u001b[94m|\u001b[0m         opt!(alt!(tag!(\"+\") | tag!(\"-\"))),\n> \u001b[1m\u001b[94m...\u001b[0m   \u001b[1m\u001b[94m|\u001b[0m\n> \u001b[1m\u001b[94m640\u001b[0m \u001b[1m\u001b[94m|\u001b[0m \u001b[1m\u001b[94m|\u001b[0m     parse_to!(f32)\n> \u001b[1m\u001b[94m641\u001b[0m \u001b[1m\u001b[94m|\u001b[0m \u001b[1m\u001b[94m|\u001b[0m   )\n>     \u001b[1m\u001b[94m|\u001b[0m \u001b[1m\u001b[94m|___-\u001b[0m \u001b[1m\u001b[94min this macro invocation\u001b[0m\n>     \u001b[1m\u001b[94m|\u001b[0m\n>     \u001b[1m\u001b[94m= \u001b[0m\u001b[1mwarning\u001b[0m: this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release!\n>     \u001b[1m\u001b[94m= \u001b[0m\u001b[1mnote\u001b[0m: for more information, see issue #79813 <https://github.com/rust-lang/rust/issues/79813>\n>     \u001b[1m\u001b[94m= \u001b[0m\u001b[1mnote\u001b[0m: macro invocations at the end of a block are treated as expressions\n>     \u001b[1m\u001b[94m= \u001b[0m\u001b[1mnote\u001b[0m: to ignore the value produced by the macro, add a semicolon after the invocation of `opt`\n>     \u001b[1m\u001b[94m= \u001b[0m\u001b[1mnote\u001b[0m: this warning originates in the macro `opt` which comes from the expansion of the macro `flat_map` (in Nightly builds, run with -Z macro-backtrace for more info)\n> \n> \u001b[1m\u001b[33mwarning\u001b[0m\u001b[1m: trailing semicolon in macro used in expression position\u001b[0m\n>    \u001b[1m\u001b[94m--> \u001b[0m/home/yzzhao3/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/nom-2.2.1/src/sequence.rs:508:60\n>     \u001b[1m\u001b[94m|\u001b[0m\n> \u001b[1m\u001b[94m508\u001b[0m \u001b[1m\u001b[94m|\u001b[0m       tuple_parser!($i, $consumed, ($($parsed),*), call!($e));\n>     \u001b[1m\u001b[94m|\u001b[0m                                                              \u001b[1m\u001b[33m^\u001b[0m\n>     \u001b[1m\u001b[94m|\u001b[0m\n>    \u001b[1m\u001b[94m::: \u001b[0m/home/yzzhao3/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/nom-2.2.1/src/nom.rs:624:3\n>     \u001b[1m\u001b[94m|\u001b[0m\n> \u001b[1m\u001b[94m624\u001b[0m \u001b[1m\u001b[94m|\u001b[0m \u001b[1m\u001b[94m/\u001b[0m   flat_map!(input,\n> \u001b[1m\u001b[94m625\u001b[0m \u001b[1m\u001b[94m|\u001b[0m \u001b[1m\u001b[94m|\u001b[0m     recognize!(\n> \u001b[1m\u001b[94m626\u001b[0m \u001b[1m\u001b[94m|\u001b[0m \u001b[1m\u001b[94m|\u001b[0m       tuple!(\n> \u001b[1m\u001b[94m627\u001b[0m \u001b[1m\u001b[94m|\u001b[0m \u001b[1m\u001b[94m|\u001b[0m         opt!(alt!(tag!(\"+\") | tag!(\"-\"))),\n> \u001b[1m\u001b[94m...\u001b[0m   \u001b[1m\u001b[94m|\u001b[0m\n> \u001b[1m\u001b[94m640\u001b[0m \u001b[1m\u001b[94m|\u001b[0m \u001b[1m\u001b[94m|\u001b[0m     parse_to!(f32)\n> \u001b[1m\u001b[94m641\u001b[0m \u001b[1m\u001b[94m|\u001b[0m \u001b[1m\u001b[94m|\u001b[0m   )\n>     \u001b[1m\u001b[94m|\u001b[0m \u001b[1m\u001b[94m|___-\u001b[0m \u001b[1m\u001b[94min this macro invocation\u001b[0m\n>     \u001b[1m\u001b[94m|\u001b[0m\n>     \u001b[1m\u001b[94m= \u001b[0m\u001b[1mwarning\u001b[0m: this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release!\n>     \u001b[1m\u001b[94m= \u001b[0m\u001b[1mnote\u001b[0m: for more information, see issue #79813 <https://github.com/rust-lang/rust/issues/79813>\n>     \u001b[1m\u001b[94m= \u001b[0m\u001b[1mnote\u001b[0m: macro invocations at the end of a block are treated as expressions\n>     \u001b[1m\u001b[94m= \u001b[0m\u001b[1mnote\u001b[0m: to ignore the value produced by the macro, add a semicolon after the invocation of `tuple_parser`\n>     \u001b[1m\u001b[94m= \u001b[0m\u001b[1mnote\u001b[0m: this warning originates in the macro `tuple_parser` which comes from the expansion of the macro `flat_map` (in Nightly builds, run with -Z macro-backtrace for more info)\n> \n> \u001b[1m\u001b[33mwarning\u001b[0m\u001b[1m: trailing semicolon in macro used in expression position\u001b[0m\n>    \u001b[1m\u001b[94m--> \u001b[0m/home/yzzhao3/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/nom-2.2.1/src/sequence.rs:508:60\n>     \u001b[1m\u001b[94m|\u001b[0m\n> \u001b[1m\u001b[94m508\u001b[0m \u001b[1m\u001b[94m|\u001b[0m       tuple_parser!($i, $consumed, ($($parsed),*), call!($e));\n>     \u001b[1m\u001b[94m|\u001b[0m                                                              \u001b[1m\u001b[33m^\u001b[0m\n>     \u001b[1m\u001b[94m|\u001b[0m\n>    \u001b[1m\u001b[94m::: \u001b[0m/home/yzzhao3/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/nom-2.2.1/src/nom.rs:624:3\n>     \u001b[1m\u001b[94m|\u001b[0m\n> \u001b[1m\u001b[94m624\u001b[0m \u001b[1m\u001b[94m|\u001b[0m \u001b[1m\u001b[94m/\u001b[0m   flat_map!(input,\n> \u001b[1m\u001b[94m625\u001b[0m \u001b[1m\u001b[94m|\u001b[0m \u001b[1m\u001b[94m|\u001b[0m     recognize!(\n> \u001b[1m\u001b[94m626\u001b[0m \u001b[1m\u001b[94m|\u001b[0m \u001b[1m\u001b[94m|\u001b[0m       tuple!(\n> \u001b[1m\u001b[94m627\u001b[0m \u001b[1m\u001b[94m|\u001b[0m \u001b[1m\u001b[94m|\u001b[0m         opt!(alt!(tag!(\"+\") | tag!(\"-\"))),\n> \u001b[1m\u001b[94m...\u001b[0m   \u001b[1m\u001b[94m|\u001b[0m\n> \u001b[1m\u001b[94m640\u001b[0m \u001b[1m\u001b[94m|\u001b[0m \u001b[1m\u001b[94m|\u001b[0m     parse_to!(f32)\n> \u001b[1m\u001b[94m641\u001b[0m \u001b[1m\u001b[94m|\u001b[0m \u001b[1m\u001b[94m|\u001b[0m   )\n>     \u001b[1m\u001b[94m|\u001b[0m \u001b[1m\u001b[94m|___-\u001b[0m \u001b[1m\u001b[94min this macro invocation\u001b[0m\n>     \u001b[1m\u001b[94m|\u001b[0m\n>     \u001b[1m\u001b[94m= \u001b[0m\u001b[1mwarning\u001b[0m: this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release!\n>     \u001b[1m\u001b[94m= \u001b[0m\u001b[1mnote\u001b[0m: for more information, see issue #79813 <https://github.com/rust-lang/rust/issues/79813>\n>     \u001b[1m\u001b[94m= \u001b[0m\u001b[1mnote\u001b[0m: macro invocations at the end of a block are treated as expressions\n>     \u001b[1m\u001b[94m= \u001b[0m\u001b[1mnote\u001b[0m: to ignore the value produced by the macro, add a semicolon after the invocation of `tuple_parser`\n>     \u001b[1m\u001b[94m= \u001b[0m\u001b[1mnote\u001b[0m: this warning originates in the macro `tuple_parser` which comes from the expansion of the macro `flat_map` (in Nightly builds, run with -Z macro-backtrace for more info)\n> \n> \u001b[1m\u001b[33mwarning\u001b[0m\u001b[1m: trailing semicolon in macro used in expression position\u001b[0m\n>    \u001b[1m\u001b[94m--> \u001b[0m/home/yzzhao3/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/nom-2.2.1/src/sequence.rs:694:41\n>     \u001b[1m\u001b[94m|\u001b[0m\n> \u001b[1m\u001b[94m694\u001b[0m \u001b[1m\u001b[94m|\u001b[0m       delimited!($i, call!($f), $($rest)*);\n>     \u001b[1m\u001b[94m|\u001b[0m                                           \u001b[1m\u001b[33m^\u001b[0m\n>     \u001b[1m\u001b[94m|\u001b[0m\n>    \u001b[1m\u001b[94m::: \u001b[0m/home/yzzhao3/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/nom-2.2.1/src/nom.rs:647:3\n>     \u001b[1m\u001b[94m|\u001b[0m\n> \u001b[1m\u001b[94m647\u001b[0m \u001b[1m\u001b[94m|\u001b[0m \u001b[1m\u001b[94m/\u001b[0m   flat_map!(input,\n> \u001b[1m\u001b[94m648\u001b[0m \u001b[1m\u001b[94m|\u001b[0m \u001b[1m\u001b[94m|\u001b[0m     recognize!(\n> \u001b[1m\u001b[94m649\u001b[0m \u001b[1m\u001b[94m|\u001b[0m \u001b[1m\u001b[94m|\u001b[0m       tuple!(\n> \u001b[1m\u001b[94m650\u001b[0m \u001b[1m\u001b[94m|\u001b[0m \u001b[1m\u001b[94m|\u001b[0m         opt!(alt!(tag!(\"+\") | tag!(\"-\"))),\n> \u001b[1m\u001b[94m...\u001b[0m   \u001b[1m\u001b[94m|\u001b[0m\n> \u001b[1m\u001b[94m663\u001b[0m \u001b[1m\u001b[94m|\u001b[0m \u001b[1m\u001b[94m|\u001b[0m     parse_to!(f64)\n> \u001b[1m\u001b[94m664\u001b[0m \u001b[1m\u001b[94m|\u001b[0m \u001b[1m\u001b[94m|\u001b[0m   )\n>     \u001b[1m\u001b[94m|\u001b[0m \u001b[1m\u001b[94m|___-\u001b[0m \u001b[1m\u001b[94min this macro invocation\u001b[0m\n>     \u001b[1m\u001b[94m|\u001b[0m\n>     \u001b[1m\u001b[94m= \u001b[0m\u001b[1mwarning\u001b[0m: this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release!\n>     \u001b[1m\u001b[94m= \u001b[0m\u001b[1mnote\u001b[0m: for more information, see issue #79813 <https://github.com/rust-lang/rust/issues/79813>\n>     \u001b[1m\u001b[94m= \u001b[0m\u001b[1mnote\u001b[0m: macro invocations at the end of a block are treated as expressions\n>     \u001b[1m\u001b[94m= \u001b[0m\u001b[1mnote\u001b[0m: to ignore the value produced by the macro, add a semicolon after the invocation of `delimited`\n>     \u001b[1m\u001b[94m= \u001b[0m\u001b[1mnote\u001b[0m: this warning originates in the macro `delimited` which comes from the expansion of the macro `flat_map` (in Nightly builds, run with -Z macro-backtrace for more info)\n> \n> \u001b[1m\u001b[33mwarning\u001b[0m\u001b[1m: trailing semicolon in macro used in expression position\u001b[0m\n>    \u001b[1m\u001b[94m--> \u001b[0m/home/yzzhao3/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/nom-2.2.1/src/macros.rs:776:24\n>     \u001b[1m\u001b[94m|\u001b[0m\n> \u001b[1m\u001b[94m776\u001b[0m \u001b[1m\u001b[94m|\u001b[0m       opt!($i, call!($f));\n>     \u001b[1m\u001b[94m|\u001b[0m                          \u001b[1m\u001b[33m^\u001b[0m\n>     \u001b[1m\u001b[94m|\u001b[0m\n>    \u001b[1m\u001b[94m::: \u001b[0m/home/yzzhao3/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/nom-2.2.1/src/nom.rs:647:3\n>     \u001b[1m\u001b[94m|\u001b[0m\n> \u001b[1m\u001b[94m647\u001b[0m \u001b[1m\u001b[94m|\u001b[0m \u001b[1m\u001b[94m/\u001b[0m   flat_map!(input,\n> \u001b[1m\u001b[94m648\u001b[0m \u001b[1m\u001b[94m|\u001b[0m \u001b[1m\u001b[94m|\u001b[0m     recognize!(\n> \u001b[1m\u001b[94m649\u001b[0m \u001b[1m\u001b[94m|\u001b[0m \u001b[1m\u001b[94m|\u001b[0m       tuple!(\n> \u001b[1m\u001b[94m650\u001b[0m \u001b[1m\u001b[94m|\u001b[0m \u001b[1m\u001b[94m|\u001b[0m         opt!(alt!(tag!(\"+\") | tag!(\"-\"))),\n> \u001b[1m\u001b[94m...\u001b[0m   \u001b[1m\u001b[94m|\u001b[0m\n> \u001b[1m\u001b[94m663\u001b[0m \u001b[1m\u001b[94m|\u001b[0m \u001b[1m\u001b[94m|\u001b[0m     parse_to!(f64)\n> \u001b[1m\u001b[94m664\u001b[0m \u001b[1m\u001b[94m|\u001b[0m \u001b[1m\u001b[94m|\u001b[0m   )\n>     \u001b[1m\u001b[94m|\u001b[0m \u001b[1m\u001b[94m|___-\u001b[0m \u001b[1m\u001b[94min this macro invocation\u001b[0m\n>     \u001b[1m\u001b[94m|\u001b[0m\n>     \u001b[1m\u001b[94m= \u001b[0m\u001b[1mwarning\u001b[0m: this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release!\n>     \u001b[1m\u001b[94m= \u001b[0m\u001b[1mnote\u001b[0m: for more information, see issue #79813 <https://github.com/rust-lang/rust/issues/79813>\n>     \u001b[1m\u001b[94m= \u001b[0m\u001b[1mnote\u001b[0m: macro invocations at the end of a block are treated as expressions\n>     \u001b[1m\u001b[94m= \u001b[0m\u001b[1mnote\u001b[0m: to ignore the value produced by the macro, add a semicolon after the invocation of `opt`\n>     \u001b[1m\u001b[94m= \u001b[0m\u001b[1mnote\u001b[0m: this warning originates in the macro `opt` which comes from the expansion of the macro `flat_map` (in Nightly builds, run with -Z macro-backtrace for more info)\n> \n> \u001b[1m\u001b[33mwarning\u001b[0m\u001b[1m: trailing semicolon in macro used in expression position\u001b[0m\n>    \u001b[1m\u001b[94m--> \u001b[0m/home/yzzhao3/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/nom-2.2.1/src/macros.rs:776:24\n>     \u001b[1m\u001b[94m|\u001b[0m\n> \u001b[1m\u001b[94m776\u001b[0m \u001b[1m\u001b[94m|\u001b[0m       opt!($i, call!($f));\n>     \u001b[1m\u001b[94m|\u001b[0m                          \u001b[1m\u001b[33m^\u001b[0m\n>     \u001b[1m\u001b[94m|\u001b[0m\n>    \u001b[1m\u001b[94m::: \u001b[0m/home/yzzhao3/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/nom-2.2.1/src/nom.rs:647:3\n>     \u001b[1m\u001b[94m|\u001b[0m\n> \u001b[1m\u001b[94m647\u001b[0m \u001b[1m\u001b[94m|\u001b[0m \u001b[1m\u001b[94m/\u001b[0m   flat_map!(input,\n> \u001b[1m\u001b[94m648\u001b[0m \u001b[1m\u001b[94m|\u001b[0m \u001b[1m\u001b[94m|\u001b[0m     recognize!(\n> \u001b[1m\u001b[94m649\u001b[0m \u001b[1m\u001b[94m|\u001b[0m \u001b[1m\u001b[94m|\u001b[0m       tuple!(\n> \u001b[1m\u001b[94m650\u001b[0m \u001b[1m\u001b[94m|\u001b[0m \u001b[1m\u001b[94m|\u001b[0m         opt!(alt!(tag!(\"+\") | tag!(\"-\"))),\n> \u001b[1m\u001b[94m...\u001b[0m   \u001b[1m\u001b[94m|\u001b[0m\n> \u001b[1m\u001b[94m663\u001b[0m \u001b[1m\u001b[94m|\u001b[0m \u001b[1m\u001b[94m|\u001b[0m     parse_to!(f64)\n> \u001b[1m\u001b[94m664\u001b[0m \u001b[1m\u001b[94m|\u001b[0m \u001b[1m\u001b[94m|\u001b[0m   )\n>     \u001b[1m\u001b[94m|\u001b[0m \u001b[1m\u001b[94m|___-\u001b[0m \u001b[1m\u001b[94min this macro invocation\u001b[0m\n>     \u001b[1m\u001b[94m|\u001b[0m\n>     \u001b[1m\u001b[94m= \u001b[0m\u001b[1mwarning\u001b[0m: this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release!\n>     \u001b[1m\u001b[94m= \u001b[0m\u001b[1mnote\u001b[0m: for more information, see issue #79813 <https://github.com/rust-lang/rust/issues/79813>\n>     \u001b[1m\u001b[94m= \u001b[0m\u001b[1mnote\u001b[0m: macro invocations at the end of a block are treated as expressions\n>     \u001b[1m\u001b[94m= \u001b[0m\u001b[1mnote\u001b[0m: to ignore the value produced by the macro, add a semicolon after the invocation of `opt`\n>     \u001b[1m\u001b[94m= \u001b[0m\u001b[1mnote\u001b[0m: this warning originates in the macro `opt` which comes from the expansion of the macro `flat_map` (in Nightly builds, run with -Z macro-backtrace for more info)\n> \n> \u001b[1m\u001b[33mwarning\u001b[0m\u001b[1m: trailing semicolon in macro used in expression position\u001b[0m\n>    \u001b[1m\u001b[94m--> \u001b[0m/home/yzzhao3/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/nom-2.2.1/src/sequence.rs:508:60\n>     \u001b[1m\u001b[94m|\u001b[0m\n> \u001b[1m\u001b[94m508\u001b[0m \u001b[1m\u001b[94m|\u001b[0m       tuple_parser!($i, $consumed, ($($parsed),*), call!($e));\n>     \u001b[1m\u001b[94m|\u001b[0m                                                              \u001b[1m\u001b[33m^\u001b[0m\n>     \u001b[1m\u001b[94m|\u001b[0m\n>    \u001b[1m\u001b[94m::: \u001b[0m/home/yzzhao3/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/nom-2.2.1/src/nom.rs:647:3\n>     \u001b[1m\u001b[94m|\u001b[0m\n> \u001b[1m\u001b[94m647\u001b[0m \u001b[1m\u001b[94m|\u001b[0m \u001b[1m\u001b[94m/\u001b[0m   flat_map!(input,\n> \u001b[1m\u001b[94m648\u001b[0m \u001b[1m\u001b[94m|\u001b[0m \u001b[1m\u001b[94m|\u001b[0m     recognize!(\n> \u001b[1m\u001b[94m649\u001b[0m \u001b[1m\u001b[94m|\u001b[0m \u001b[1m\u001b[94m|\u001b[0m       tuple!(\n> \u001b[1m\u001b[94m650\u001b[0m \u001b[1m\u001b[94m|\u001b[0m \u001b[1m\u001b[94m|\u001b[0m         opt!(alt!(tag!(\"+\") | tag!(\"-\"))),\n> \u001b[1m\u001b[94m...\u001b[0m   \u001b[1m\u001b[94m|\u001b[0m\n> \u001b[1m\u001b[94m663\u001b[0m \u001b[1m\u001b[94m|\u001b[0m \u001b[1m\u001b[94m|\u001b[0m     parse_to!(f64)\n> \u001b[1m\u001b[94m664\u001b[0m \u001b[1m\u001b[94m|\u001b[0m \u001b[1m\u001b[94m|\u001b[0m   )\n>     \u001b[1m\u001b[94m|\u001b[0m \u001b[1m\u001b[94m|___-\u001b[0m \u001b[1m\u001b[94min this macro invocation\u001b[0m\n>     \u001b[1m\u001b[94m|\u001b[0m\n>     \u001b[1m\u001b[94m= \u001b[0m\u001b[1mwarning\u001b[0m: this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release!\n>     \u001b[1m\u001b[94m= \u001b[0m\u001b[1mnote\u001b[0m: for more information, see issue #79813 <https://github.com/rust-lang/rust/issues/79813>\n>     \u001b[1m\u001b[94m= \u001b[0m\u001b[1mnote\u001b[0m: macro invocations at the end of a block are treated as expressions\n>     \u001b[1m\u001b[94m= \u001b[0m\u001b[1mnote\u001b[0m: to ignore the value produced by the macro, add a semicolon after the invocation of `tuple_parser`\n>     \u001b[1m\u001b[94m= \u001b[0m\u001b[1mnote\u001b[0m: this warning originates in the macro `tuple_parser` which comes from the expansion of the macro `flat_map` (in Nightly builds, run with -Z macro-backtrace for more info)\n> \n> \u001b[1m\u001b[33mwarning\u001b[0m\u001b[1m: trailing semicolon in macro used in expression position\u001b[0m\n>    \u001b[1m\u001b[94m--> \u001b[0m/home/yzzhao3/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/nom-2.2.1/src/sequence.rs:508:60\n>     \u001b[1m\u001b[94m|\u001b[0m\n> \u001b[1m\u001b[94m508\u001b[0m \u001b[1m\u001b[94m|\u001b[0m       tuple_parser!($i, $consumed, ($($parsed),*), call!($e));\n>     \u001b[1m\u001b[94m|\u001b[0m                                                              \u001b[1m\u001b[33m^\u001b[0m\n>     \u001b[1m\u001b[94m|\u001b[0m\n>    \u001b[1m\u001b[94m::: \u001b[0m/home/yzzhao3/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/nom-2.2.1/src/nom.rs:647:3\n>     \u001b[1m\u001b[94m|\u001b[0m\n> \u001b[1m\u001b[94m647\u001b[0m \u001b[1m\u001b[94m|\u001b[0m \u001b[1m\u001b[94m/\u001b[0m   flat_map!(input,\n> \u001b[1m\u001b[94m648\u001b[0m \u001b[1m\u001b[94m|\u001b[0m \u001b[1m\u001b[94m|\u001b[0m     recognize!(\n> \u001b[1m\u001b[94m649\u001b[0m \u001b[1m\u001b[94m|\u001b[0m \u001b[1m\u001b[94m|\u001b[0m       tuple!(\n> \u001b[1m\u001b[94m650\u001b[0m \u001b[1m\u001b[94m|\u001b[0m \u001b[1m\u001b[94m|\u001b[0m         opt!(alt!(tag!(\"+\") | tag!(\"-\"))),\n> \u001b[1m\u001b[94m...\u001b[0m   \u001b[1m\u001b[94m|\u001b[0m\n> \u001b[1m\u001b[94m663\u001b[0m \u001b[1m\u001b[94m|\u001b[0m \u001b[1m\u001b[94m|\u001b[0m     parse_to!(f64)\n> \u001b[1m\u001b[94m664\u001b[0m \u001b[1m\u001b[94m|\u001b[0m \u001b[1m\u001b[94m|\u001b[0m   )\n>     \u001b[1m\u001b[94m|\u001b[0m \u001b[1m\u001b[94m|___-\u001b[0m \u001b[1m\u001b[94min this macro invocation\u001b[0m\n>     \u001b[1m\u001b[94m|\u001b[0m\n>     \u001b[1m\u001b[94m= \u001b[0m\u001b[1mwarning\u001b[0m: this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release!\n>     \u001b[1m\u001b[94m= \u001b[0m\u001b[1mnote\u001b[0m: for more information, see issue #79813 <https://github.com/rust-lang/rust/issues/79813>\n>     \u001b[1m\u001b[94m= \u001b[0m\u001b[1mnote\u001b[0m: macro invocations at the end of a block are treated as expressions\n>     \u001b[1m\u001b[94m= \u001b[0m\u001b[1mnote\u001b[0m: to ignore the value produced by the macro, add a semicolon after the invocation of `tuple_parser`\n>     \u001b[1m\u001b[94m= \u001b[0m\u001b[1mnote\u001b[0m: this warning originates in the macro `tuple_parser` which comes from the expansion of the macro `flat_map` (in Nightly builds, run with -Z macro-backtrace for more info)\n> \n> \u001b[1m\u001b[33mwarning\u001b[0m\u001b[1m: trailing semicolon in macro used in expression position\u001b[0m\n>    \u001b[1m\u001b[94m--> \u001b[0m/home/yzzhao3/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/nom-2.2.1/src/sequence.rs:694:41\n>     \u001b[1m\u001b[94m|\u001b[0m\n> \u001b[1m\u001b[94m694\u001b[0m \u001b[1m\u001b[94m|\u001b[0m       delimited!($i, call!($f), $($rest)*);\n>     \u001b[1m\u001b[94m|\u001b[0m                                           \u001b[1m\u001b[33m^\u001b[0m\n>     \u001b[1m\u001b[94m|\u001b[0m\n>    \u001b[1m\u001b[94m::: \u001b[0m/home/yzzhao3/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/nom-2.2.1/src/nom.rs:670:3\n>     \u001b[1m\u001b[94m|\u001b[0m\n> \u001b[1m\u001b[94m670\u001b[0m \u001b[1m\u001b[94m|\u001b[0m \u001b[1m\u001b[94m/\u001b[0m   flat_map!(input,\n> \u001b[1m\u001b[94m671\u001b[0m \u001b[1m\u001b[94m|\u001b[0m \u001b[1m\u001b[94m|\u001b[0m     recognize!(\n> \u001b[1m\u001b[94m672\u001b[0m \u001b[1m\u001b[94m|\u001b[0m \u001b[1m\u001b[94m|\u001b[0m       tuple!(\n> \u001b[1m\u001b[94m673\u001b[0m \u001b[1m\u001b[94m|\u001b[0m \u001b[1m\u001b[94m|\u001b[0m         opt!(alt!(tag!(\"+\") | tag!(\"-\"))),\n> \u001b[1m\u001b[94m...\u001b[0m   \u001b[1m\u001b[94m|\u001b[0m\n> \u001b[1m\u001b[94m686\u001b[0m \u001b[1m\u001b[94m|\u001b[0m \u001b[1m\u001b[94m|\u001b[0m     parse_to!(f64)\n> \u001b[1m\u001b[94m687\u001b[0m \u001b[1m\u001b[94m|\u001b[0m \u001b[1m\u001b[94m|\u001b[0m   )\n>     \u001b[1m\u001b[94m|\u001b[0m \u001b[1m\u001b[94m|___-\u001b[0m \u001b[1m\u001b[94min this macro invocation\u001b[0m\n>     \u001b[1m\u001b[94m|\u001b[0m\n>     \u001b[1m\u001b[94m= \u001b[0m\u001b[1mwarning\u001b[0m: this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release!\n>     \u001b[1m\u001b[94m= \u001b[0m\u001b[1mnote\u001b[0m: for more information, see issue #79813 <https://github.com/rust-lang/rust/issues/79813>\n>     \u001b[1m\u001b[94m= \u001b[0m\u001b[1mnote\u001b[0m: macro invocations at the end of a block are treated as expressions\n>     \u001b[1m\u001b[94m= \u001b[0m\u001b[1mnote\u001b[0m: to ignore the value produced by the macro, add a semicolon after the invocation of `delimited`\n>     \u001b[1m\u001b[94m= \u001b[0m\u001b[1mnote\u001b[0m: this warning originates in the macro `delimited` which comes from the expansion of the macro `flat_map` (in Nightly builds, run with -Z macro-backtrace for more info)\n> \n> \u001b[1m\u001b[33mwarning\u001b[0m\u001b[1m: trailing semicolon in macro used in expression position\u001b[0m\n>    \u001b[1m\u001b[94m--> \u001b[0m/home/yzzhao3/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/nom-2.2.1/src/macros.rs:776:24\n>     \u001b[1m\u001b[94m|\u001b[0m\n> \u001b[1m\u001b[94m776\u001b[0m \u001b[1m\u001b[94m|\u001b[0m       opt!($i, call!($f));\n>     \u001b[1m\u001b[94m|\u001b[0m                          \u001b[1m\u001b[33m^\u001b[0m\n>     \u001b[1m\u001b[94m|\u001b[0m\n>    \u001b[1m\u001b[94m::: \u001b[0m/home/yzzhao3/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/nom-2.2.1/src/nom.rs:670:3\n>     \u001b[1m\u001b[94m|\u001b[0m\n> \u001b[1m\u001b[94m670\u001b[0m \u001b[1m\u001b[94m|\u001b[0m \u001b[1m\u001b[94m/\u001b[0m   flat_map!(input,\n> \u001b[1m\u001b[94m671\u001b[0m \u001b[1m\u001b[94m|\u001b[0m \u001b[1m\u001b[94m|\u001b[0m     recognize!(\n> \u001b[1m\u001b[94m672\u001b[0m \u001b[1m\u001b[94m|\u001b[0m \u001b[1m\u001b[94m|\u001b[0m       tuple!(\n> \u001b[1m\u001b[94m673\u001b[0m \u001b[1m\u001b[94m|\u001b[0m \u001b[1m\u001b[94m|\u001b[0m         opt!(alt!(tag!(\"+\") | tag!(\"-\"))),\n> \u001b[1m\u001b[94m...\u001b[0m   \u001b[1m\u001b[94m|\u001b[0m\n> \u001b[1m\u001b[94m686\u001b[0m \u001b[1m\u001b[94m|\u001b[0m \u001b[1m\u001b[94m|\u001b[0m     parse_to!(f64)\n> \u001b[1m\u001b[94m687\u001b[0m \u001b[1m\u001b[94m|\u001b[0m \u001b[1m\u001b[94m|\u001b[0m   )\n>     \u001b[1m\u001b[94m|\u001b[0m \u001b[1m\u001b[94m|___-\u001b[0m \u001b[1m\u001b[94min this macro invocation\u001b[0m\n>     \u001b[1m\u001b[94m|\u001b[0m\n>     \u001b[1m\u001b[94m= \u001b[0m\u001b[1mwarning\u001b[0m: this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release!\n>     \u001b[1m\u001b[94m= \u001b[0m\u001b[1mnote\u001b[0m: for more information, see issue #79813 <https://github.com/rust-lang/rust/issues/79813>\n>     \u001b[1m\u001b[94m= \u001b[0m\u001b[1mnote\u001b[0m: macro invocations at the end of a block are treated as expressions\n>     \u001b[1m\u001b[94m= \u001b[0m\u001b[1mnote\u001b[0m: to ignore the value produced by the macro, add a semicolon after the invocation of `opt`\n>     \u001b[1m\u001b[94m= \u001b[0m\u001b[1mnote\u001b[0m: this warning originates in the macro `opt` which comes from the expansion of the macro `flat_map` (in Nightly builds, run with -Z macro-backtrace for more info)\n> \n> \u001b[1m\u001b[33mwarning\u001b[0m\u001b[1m: trailing semicolon in macro used in expression position\u001b[0m\n>    \u001b[1m\u001b[94m--> \u001b[0m/home/yzzhao3/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/nom-2.2.1/src/macros.rs:776:24\n>     \u001b[1m\u001b[94m|\u001b[0m\n> \u001b[1m\u001b[94m776\u001b[0m \u001b[1m\u001b[94m|\u001b[0m       opt!($i, call!($f));\n>     \u001b[1m\u001b[94m|\u001b[0m                          \u001b[1m\u001b[33m^\u001b[0m\n>     \u001b[1m\u001b[94m|\u001b[0m\n>    \u001b[1m\u001b[94m::: \u001b[0m/home/yzzhao3/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/nom-2.2.1/src/nom.rs:670:3\n>     \u001b[1m\u001b[94m|\u001b[0m\n> \u001b[1m\u001b[94m670\u001b[0m \u001b[1m\u001b[94m|\u001b[0m \u001b[1m\u001b[94m/\u001b[0m   flat_map!(input,\n> \u001b[1m\u001b[94m671\u001b[0m \u001b[1m\u001b[94m|\u001b[0m \u001b[1m\u001b[94m|\u001b[0m     recognize!(\n> \u001b[1m\u001b[94m672\u001b[0m \u001b[1m\u001b[94m|\u001b[0m \u001b[1m\u001b[94m|\u001b[0m       tuple!(\n> \u001b[1m\u001b[94m673\u001b[0m \u001b[1m\u001b[94m|\u001b[0m \u001b[1m\u001b[94m|\u001b[0m         opt!(alt!(tag!(\"+\") | tag!(\"-\"))),\n> \u001b[1m\u001b[94m...\u001b[0m   \u001b[1m\u001b[94m|\u001b[0m\n> \u001b[1m\u001b[94m686\u001b[0m \u001b[1m\u001b[94m|\u001b[0m \u001b[1m\u001b[94m|\u001b[0m     parse_to!(f64)\n> \u001b[1m\u001b[94m687\u001b[0m \u001b[1m\u001b[94m|\u001b[0m \u001b[1m\u001b[94m|\u001b[0m   )\n>     \u001b[1m\u001b[94m|\u001b[0m \u001b[1m\u001b[94m|___-\u001b[0m \u001b[1m\u001b[94min this macro invocation\u001b[0m\n>     \u001b[1m\u001b[94m|\u001b[0m\n>     \u001b[1m\u001b[94m= \u001b[0m\u001b[1mwarning\u001b[0m: this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release!\n>     \u001b[1m\u001b[94m= \u001b[0m\u001b[1mnote\u001b[0m: for more information, see issue #79813 <https://github.com/rust-lang/rust/issues/79813>\n>     \u001b[1m\u001b[94m= \u001b[0m\u001b[1mnote\u001b[0m: macro invocations at the end of a block are treated as expressions\n>     \u001b[1m\u001b[94m= \u001b[0m\u001b[1mnote\u001b[0m: to ignore the value produced by the macro, add a semicolon after the invocation of `opt`\n>     \u001b[1m\u001b[94m= \u001b[0m\u001b[1mnote\u001b[0m: this warning originates in the macro `opt` which comes from the expansion of the macro `flat_map` (in Nightly builds, run with -Z macro-backtrace for more info)\n> \n> \u001b[1m\u001b[33mwarning\u001b[0m\u001b[1m: trailing semicolon in macro used in expression position\u001b[0m\n>    \u001b[1m\u001b[94m--> \u001b[0m/home/yzzhao3/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/nom-2.2.1/src/sequence.rs:508:60\n>     \u001b[1m\u001b[94m|\u001b[0m\n> \u001b[1m\u001b[94m508\u001b[0m \u001b[1m\u001b[94m|\u001b[0m       tuple_parser!($i, $consumed, ($($parsed),*), call!($e));\n>     \u001b[1m\u001b[94m|\u001b[0m                                                              \u001b[1m\u001b[33m^\u001b[0m\n>     \u001b[1m\u001b[94m|\u001b[0m\n>    \u001b[1m\u001b[94m::: \u001b[0m/home/yzzhao3/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/nom-2.2.1/src/nom.rs:670:3\n>     \u001b[1m\u001b[94m|\u001b[0m\n> \u001b[1m\u001b[94m670\u001b[0m \u001b[1m\u001b[94m|\u001b[0m \u001b[1m\u001b[94m/\u001b[0m   flat_map!(input,\n> \u001b[1m\u001b[94m671\u001b[0m \u001b[1m\u001b[94m|\u001b[0m \u001b[1m\u001b[94m|\u001b[0m     recognize!(\n> \u001b[1m\u001b[94m672\u001b[0m \u001b[1m\u001b[94m|\u001b[0m \u001b[1m\u001b[94m|\u001b[0m       tuple!(\n> \u001b[1m\u001b[94m673\u001b[0m \u001b[1m\u001b[94m|\u001b[0m \u001b[1m\u001b[94m|\u001b[0m         opt!(alt!(tag!(\"+\") | tag!(\"-\"))),\n> \u001b[1m\u001b[94m...\u001b[0m   \u001b[1m\u001b[94m|\u001b[0m\n> \u001b[1m\u001b[94m686\u001b[0m \u001b[1m\u001b[94m|\u001b[0m \u001b[1m\u001b[94m|\u001b[0m     parse_to!(f64)\n> \u001b[1m\u001b[94m687\u001b[0m \u001b[1m\u001b[94m|\u001b[0m \u001b[1m\u001b[94m|\u001b[0m   )\n>     \u001b[1m\u001b[94m|\u001b[0m \u001b[1m\u001b[94m|___-\u001b[0m \u001b[1m\u001b[94min this macro invocation\u001b[0m\n>     \u001b[1m\u001b[94m|\u001b[0m\n>     \u001b[1m\u001b[94m= \u001b[0m\u001b[1mwarning\u001b[0m: this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release!\n>     \u001b[1m\u001b[94m= \u001b[0m\u001b[1mnote\u001b[0m: for more information, see issue #79813 <https://github.com/rust-lang/rust/issues/79813>\n>     \u001b[1m\u001b[94m= \u001b[0m\u001b[1mnote\u001b[0m: macro invocations at the end of a block are treated as expressions\n>     \u001b[1m\u001b[94m= \u001b[0m\u001b[1mnote\u001b[0m: to ignore the value produced by the macro, add a semicolon after the invocation of `tuple_parser`\n>     \u001b[1m\u001b[94m= \u001b[0m\u001b[1mnote\u001b[0m: this warning originates in the macro `tuple_parser` which comes from the expansion of the macro `flat_map` (in Nightly builds, run with -Z macro-backtrace for more info)\n> \n> \u001b[1m\u001b[33mwarning\u001b[0m\u001b[1m: trailing semicolon in macro used in expression position\u001b[0m\n>    \u001b[1m\u001b[94m--> \u001b[0m/home/yzzhao3/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/nom-2.2.1/src/sequence.rs:508:60\n>     \u001b[1m\u001b[94m|\u001b[0m\n> \u001b[1m\u001b[94m508\u001b[0m \u001b[1m\u001b[94m|\u001b[0m       tuple_parser!($i, $consumed, ($($parsed),*), call!($e));\n>     \u001b[1m\u001b[94m|\u001b[0m                                                              \u001b[1m\u001b[33m^\u001b[0m\n>     \u001b[1m\u001b[94m|\u001b[0m\n>    \u001b[1m\u001b[94m::: \u001b[0m/home/yzzhao3/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/nom-2.2.1/src/nom.rs:670:3\n>     \u001b[1m\u001b[94m|\u001b[0m\n> \u001b[1m\u001b[94m670\u001b[0m \u001b[1m\u001b[94m|\u001b[0m \u001b[1m\u001b[94m/\u001b[0m   flat_map!(input,\n> \u001b[1m\u001b[94m671\u001b[0m \u001b[1m\u001b[94m|\u001b[0m \u001b[1m\u001b[94m|\u001b[0m     recognize!(\n> \u001b[1m\u001b[94m672\u001b[0m \u001b[1m\u001b[94m|\u001b[0m \u001b[1m\u001b[94m|\u001b[0m       tuple!(\n> \u001b[1m\u001b[94m673\u001b[0m \u001b[1m\u001b[94m|\u001b[0m \u001b[1m\u001b[94m|\u001b[0m         opt!(alt!(tag!(\"+\") | tag!(\"-\"))),\n> \u001b[1m\u001b[94m...\u001b[0m   \u001b[1m\u001b[94m|\u001b[0m\n> \u001b[1m\u001b[94m686\u001b[0m \u001b[1m\u001b[94m|\u001b[0m \u001b[1m\u001b[94m|\u001b[0m     parse_to!(f64)\n> \u001b[1m\u001b[94m687\u001b[0m \u001b[1m\u001b[94m|\u001b[0m \u001b[1m\u001b[94m|\u001b[0m   )\n>     \u001b[1m\u001b[94m|\u001b[0m \u001b[1m\u001b[94m|___-\u001b[0m \u001b[1m\u001b[94min this macro invocation\u001b[0m\n>     \u001b[1m\u001b[94m|\u001b[0m\n>     \u001b[1m\u001b[94m= \u001b[0m\u001b[1mwarning\u001b[0m: this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release!\n>     \u001b[1m\u001b[94m= \u001b[0m\u001b[1mnote\u001b[0m: for more information, see issue #79813 <https://github.com/rust-lang/rust/issues/79813>\n>     \u001b[1m\u001b[94m= \u001b[0m\u001b[1mnote\u001b[0m: macro invocations at the end of a block are treated as expressions\n>     \u001b[1m\u001b[94m= \u001b[0m\u001b[1mnote\u001b[0m: to ignore the value produced by the macro, add a semicolon after the invocation of `tuple_parser`\n>     \u001b[1m\u001b[94m= \u001b[0m\u001b[1mnote\u001b[0m: this warning originates in the macro `tuple_parser` which comes from the expansion of the macro `flat_map` (in Nightly builds, run with -Z macro-backtrace for more info)\n> \n","num-bigint-dig@0.8.4":"The package `num-bigint-dig v0.8.4` currently triggers the following future incompatibility lints:\n> \u001b[1m\u001b[33mwarning\u001b[0m\u001b[1m: macro `vec` is private\u001b[0m\n>    \u001b[1m\u001b[94m--> \u001b[0m/home/yzzhao3/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/num-bigint-dig-0.8.4/src/biguint.rs:490:22\n>     \u001b[1m\u001b[94m|\u001b[0m\n> \u001b[1m\u001b[94m490\u001b[0m \u001b[1m\u001b[94m|\u001b[0m         BigUint::new(vec![1])\n>     \u001b[1m\u001b[94m|\u001b[0m                      \u001b[1m\u001b[33m^^^\u001b[0m\n>     \u001b[1m\u001b[94m|\u001b[0m\n>     \u001b[1m\u001b[94m= \u001b[0m\u001b[1mwarning\u001b[0m: this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release!\n>     \u001b[1m\u001b[94m= \u001b[0m\u001b[1mnote\u001b[0m: for more information, see issue #120192 <https://github.com/rust-lang/rust/issues/120192>\n> \n> \u001b[1m\u001b[33mwarning\u001b[0m\u001b[1m: macro `vec` is private\u001b[0m\n>     \u001b[1m\u001b[94m--> \u001b[0m/home/yzzhao3/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/num-bigint-dig-0.8.4/src/biguint.rs:2005:9\n>      \u001b[1m\u001b[94m|\u001b[0m\n> \u001b[1m\u001b[94m2005\u001b[0m \u001b[1m\u001b[94m|\u001b[0m         vec![0]\n>      \u001b[1m\u001b[94m|\u001b[0m         \u001b[1m\u001b[33m^^^\u001b[0m\n>      \u001b[1m\u001b[94m|\u001b[0m\n>      \u001b[1m\u001b[94m= \u001b[0m\u001b[1mwarning\u001b[0m: this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release!\n>      \u001b[1m\u001b[94m= \u001b[0m\u001b[1mnote\u001b[0m: for more information, see issue #120192 <https://github.com/rust-lang/rust/issues/120192>\n> \n> \u001b[1m\u001b[33mwarning\u001b[0m\u001b[1m: macro `vec` is private\u001b[0m\n>     \u001b[1m\u001b[94m--> \u001b[0m/home/yzzhao3/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/num-bigint-dig-0.8.4/src/biguint.rs:2027:16\n>      \u001b[1m\u001b[94m|\u001b[0m\n> \u001b[1m\u001b[94m2027\u001b[0m \u001b[1m\u001b[94m|\u001b[0m         return vec![b'0'];\n>      \u001b[1m\u001b[94m|\u001b[0m                \u001b[1m\u001b[33m^^^\u001b[0m\n>      \u001b[1m\u001b[94m|\u001b[0m\n>      \u001b[1m\u001b[94m= \u001b[0m\u001b[1mwarning\u001b[0m: this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release!\n>      \u001b[1m\u001b[94m= \u001b[0m\u001b[1mnote\u001b[0m: for more information, see issue #120192 <https://github.com/rust-lang/rust/issues/120192>\n> \n> \u001b[1m\u001b[33mwarning\u001b[0m\u001b[1m: macro `vec` is private\u001b[0m\n>     \u001b[1m\u001b[94m--> \u001b[0m/home/yzzhao3/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/num-bigint-dig-0.8.4/src/biguint.rs:2313:13\n>      \u001b[1m\u001b[94m|\u001b[0m\n> \u001b[1m\u001b[94m2313\u001b[0m \u001b[1m\u001b[94m|\u001b[0m             vec![0]\n>      \u001b[1m\u001b[94m|\u001b[0m             \u001b[1m\u001b[33m^^^\u001b[0m\n>      \u001b[1m\u001b[94m|\u001b[0m\n>      \u001b[1m\u001b[94m= \u001b[0m\u001b[1mwarning\u001b[0m: this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release!\n>      \u001b[1m\u001b[94m= \u001b[0m\u001b[1mnote\u001b[0m: for more information, see issue #120192 <https://github.com/rust-lang/rust/issues/120192>\n> \n> \u001b[1m\u001b[33mwarning\u001b[0m\u001b[1m: macro `vec` is private\u001b[0m\n>     \u001b[1m\u001b[94m--> \u001b[0m/home/yzzhao3/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/num-bigint-dig-0.8.4/src/biguint.rs:2572:21\n>      \u001b[1m\u001b[94m|\u001b[0m\n> \u001b[1m\u001b[94m2572\u001b[0m \u001b[1m\u001b[94m|\u001b[0m                     vec![*n as u32]\n>      \u001b[1m\u001b[94m|\u001b[0m                     \u001b[1m\u001b[33m^^^\u001b[0m\n>      \u001b[1m\u001b[94m|\u001b[0m\n>      \u001b[1m\u001b[94m= \u001b[0m\u001b[1mwarning\u001b[0m: this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release!\n>      \u001b[1m\u001b[94m= \u001b[0m\u001b[1mnote\u001b[0m: for more information, see issue #120192 <https://github.com/rust-lang/rust/issues/120192>\n> \n> \u001b[1m\u001b[33mwarning\u001b[0m\u001b[1m: macro `vec` is private\u001b[0m\n>     \u001b[1m\u001b[94m--> \u001b[0m/home/yzzhao3/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/num-bigint-dig-0.8.4/src/biguint.rs:2574:21\n>      \u001b[1m\u001b[94m|\u001b[0m\n> \u001b[1m\u001b[94m2574\u001b[0m \u001b[1m\u001b[94m|\u001b[0m                     vec![*n as u32, (n >> 32) as u32]\n>      \u001b[1m\u001b[94m|\u001b[0m                     \u001b[1m\u001b[33m^^^\u001b[0m\n>      \u001b[1m\u001b[94m|\u001b[0m\n>      \u001b[1m\u001b[94m= \u001b[0m\u001b[1mwarning\u001b[0m: this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release!\n>      \u001b[1m\u001b[94m= \u001b[0m\u001b[1mnote\u001b[0m: for more information, see issue #120192 <https://github.com/rust-lang/rust/issues/120192>\n> \n> \u001b[1m\u001b[33mwarning\u001b[0m\u001b[1m: macro `vec` is private\u001b[0m\n>    \u001b[1m\u001b[94m--> \u001b[0m/home/yzzhao3/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/num-bigint-dig-0.8.4/src/prime.rs:138:22\n>     \u001b[1m\u001b[94m|\u001b[0m\n> \u001b[1m\u001b[94m138\u001b[0m \u001b[1m\u001b[94m|\u001b[0m     let mut moduli = vec![BigUint::zero(); prime_limit];\n>     \u001b[1m\u001b[94m|\u001b[0m                      \u001b[1m\u001b[33m^^^\u001b[0m\n>     \u001b[1m\u001b[94m|\u001b[0m\n>     \u001b[1m\u001b[94m= \u001b[0m\u001b[1mwarning\u001b[0m: this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release!\n>     \u001b[1m\u001b[94m= \u001b[0m\u001b[1mnote\u001b[0m: for more information, see issue #120192 <https://github.com/rust-lang/rust/issues/120192>\n> \n> \u001b[1m\u001b[33mwarning\u001b[0m\u001b[1m: macro `vec` is private\u001b[0m\n>    \u001b[1m\u001b[94m--> \u001b[0m/home/yzzhao3/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/num-bigint-dig-0.8.4/src/bigrand.rs:319:25\n>     \u001b[1m\u001b[94m|\u001b[0m\n> \u001b[1m\u001b[94m319\u001b[0m \u001b[1m\u001b[94m|\u001b[0m         let mut bytes = vec![0u8; bytes_len];\n>     \u001b[1m\u001b[94m|\u001b[0m                         \u001b[1m\u001b[33m^^^\u001b[0m\n>     \u001b[1m\u001b[94m|\u001b[0m\n>     \u001b[1m\u001b[94m= \u001b[0m\u001b[1mwarning\u001b[0m: this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release!\n>     \u001b[1m\u001b[94m= \u001b[0m\u001b[1mnote\u001b[0m: for more information, see issue #120192 <https://github.com/rust-lang/rust/issues/120192>\n> \n","pdf@0.7.2":"The package `pdf v0.7.2 (https://github.com/pdf-rs/pdf?rev=99e70cd#99e70cd0)` currently triggers the following future incompatibility lints:\n> \u001b[1m\u001b[33mwarning\u001b[0m\u001b[1m: `Rect` is ambiguous\u001b[0m\n>  \u001b[1m\u001b[94m--> \u001b[0m/home/yzzhao3/.cargo/git/checkouts/pdf-9563b332f7e1af00/99e70cd/pdf/src/build.rs:8:27\n>   \u001b[1m\u001b[94m|\u001b[0m\n> \u001b[1m\u001b[94m8\u001b[0m \u001b[1m\u001b[94m|\u001b[0m     pub media_box: Option<Rect>,\n>   \u001b[1m\u001b[94m|\u001b[0m                           \u001b[1m\u001b[33m^^^^\u001b[0m \u001b[1m\u001b[33mambiguous name\u001b[0m\n>   \u001b[1m\u001b[94m|\u001b[0m\n>   \u001b[1m\u001b[94m= \u001b[0m\u001b[1mwarning\u001b[0m: this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release!\n>   \u001b[1m\u001b[94m= \u001b[0m\u001b[1mnote\u001b[0m: for more information, see issue #114095 <https://github.com/rust-lang/rust/issues/114095>\n>   \u001b[1m\u001b[94m= \u001b[0m\u001b[1mnote\u001b[0m: ambiguous because of multiple glob imports of a name in the same module\n> \u001b[1m\u001b[92mnote\u001b[0m: `Rect` could refer to the struct imported here\n>  \u001b[1m\u001b[94m--> \u001b[0m/home/yzzhao3/.cargo/git/checkouts/pdf-9563b332f7e1af00/99e70cd/pdf/src/build.rs:1:5\n>   \u001b[1m\u001b[94m|\u001b[0m\n> \u001b[1m\u001b[94m1\u001b[0m \u001b[1m\u001b[94m|\u001b[0m use crate::object::*;\n>   \u001b[1m\u001b[94m|\u001b[0m     \u001b[1m\u001b[92m^^^^^^^^^^^^^^^^\u001b[0m\n>   \u001b[1m\u001b[94m= \u001b[0m\u001b[1mhelp\u001b[0m: consider adding an explicit import of `Rect` to disambiguate\n> \u001b[1m\u001b[92mnote\u001b[0m: `Rect` could also refer to the struct imported here\n>  \u001b[1m\u001b[94m--> \u001b[0m/home/yzzhao3/.cargo/git/checkouts/pdf-9563b332f7e1af00/99e70cd/pdf/src/build.rs:2:5\n>   \u001b[1m\u001b[94m|\u001b[0m\n> \u001b[1m\u001b[94m2\u001b[0m \u001b[1m\u001b[94m|\u001b[0m use crate::content::*;\n>   \u001b[1m\u001b[94m|\u001b[0m     \u001b[1m\u001b[92m^^^^^^^^^^^^^^^^^\u001b[0m\n>   \u001b[1m\u001b[94m= \u001b[0m\u001b[1mhelp\u001b[0m: consider adding an explicit import of `Rect` to disambiguate\n> \n> \u001b[1m\u001b[33mwarning\u001b[0m\u001b[1m: `Rect` is ambiguous\u001b[0m\n>  \u001b[1m\u001b[94m--> \u001b[0m/home/yzzhao3/.cargo/git/checkouts/pdf-9563b332f7e1af00/99e70cd/pdf/src/build.rs:9:26\n>   \u001b[1m\u001b[94m|\u001b[0m\n> \u001b[1m\u001b[94m9\u001b[0m \u001b[1m\u001b[94m|\u001b[0m     pub crop_box: Option<Rect>,\n>   \u001b[1m\u001b[94m|\u001b[0m                          \u001b[1m\u001b[33m^^^^\u001b[0m \u001b[1m\u001b[33mambiguous name\u001b[0m\n>   \u001b[1m\u001b[94m|\u001b[0m\n>   \u001b[1m\u001b[94m= \u001b[0m\u001b[1mwarning\u001b[0m: this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release!\n>   \u001b[1m\u001b[94m= \u001b[0m\u001b[1mnote\u001b[0m: for more information, see issue #114095 <https://github.com/rust-lang/rust/issues/114095>\n>   \u001b[1m\u001b[94m= \u001b[0m\u001b[1mnote\u001b[0m: ambiguous because of multiple glob imports of a name in the same module\n> \u001b[1m\u001b[92mnote\u001b[0m: `Rect` could refer to the struct imported here\n>  \u001b[1m\u001b[94m--> \u001b[0m/home/yzzhao3/.cargo/git/checkouts/pdf-9563b332f7e1af00/99e70cd/pdf/src/build.rs:1:5\n>   \u001b[1m\u001b[94m|\u001b[0m\n> \u001b[1m\u001b[94m1\u001b[0m \u001b[1m\u001b[94m|\u001b[0m use crate::object::*;\n>   \u001b[1m\u001b[94m|\u001b[0m     \u001b[1m\u001b[92m^^^^^^^^^^^^^^^^\u001b[0m\n>   \u001b[1m\u001b[94m= \u001b[0m\u001b[1mhelp\u001b[0m: consider adding an explicit import of `Rect` to disambiguate\n> \u001b[1m\u001b[92mnote\u001b[0m: `Rect` could also refer to the struct imported here\n>  \u001b[1m\u001b[94m--> \u001b[0m/home/yzzhao3/.cargo/git/checkouts/pdf-9563b332f7e1af00/99e70cd/pdf/src/build.rs:2:5\n>   \u001b[1m\u001b[94m|\u001b[0m\n> \u001b[1m\u001b[94m2\u001b[0m \u001b[1m\u001b[94m|\u001b[0m use crate::content::*;\n>   \u001b[1m\u001b[94m|\u001b[0m     \u001b[1m\u001b[92m^^^^^^^^^^^^^^^^^\u001b[0m\n>   \u001b[1m\u001b[94m= \u001b[0m\u001b[1mhelp\u001b[0m: consider adding an explicit import of `Rect` to disambiguate\n> \n> \u001b[1m\u001b[33mwarning\u001b[0m\u001b[1m: `Rect` is ambiguous\u001b[0m\n>   \u001b[1m\u001b[94m--> \u001b[0m/home/yzzhao3/.cargo/git/checkouts/pdf-9563b332f7e1af00/99e70cd/pdf/src/build.rs:10:26\n>    \u001b[1m\u001b[94m|\u001b[0m\n> \u001b[1m\u001b[94m10\u001b[0m \u001b[1m\u001b[94m|\u001b[0m     pub trim_box: Option<Rect>,\n>    \u001b[1m\u001b[94m|\u001b[0m                          \u001b[1m\u001b[33m^^^^\u001b[0m \u001b[1m\u001b[33mambiguous name\u001b[0m\n>    \u001b[1m\u001b[94m|\u001b[0m\n>    \u001b[1m\u001b[94m= \u001b[0m\u001b[1mwarning\u001b[0m: this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release!\n>    \u001b[1m\u001b[94m= \u001b[0m\u001b[1mnote\u001b[0m: for more information, see issue #114095 <https://github.com/rust-lang/rust/issues/114095>\n>    \u001b[1m\u001b[94m= \u001b[0m\u001b[1mnote\u001b[0m: ambiguous because of multiple glob imports of a name in the same module\n> \u001b[1m\u001b[92mnote\u001b[0m: `Rect` could refer to the struct imported here\n>   \u001b[1m\u001b[94m--> \u001b[0m/home/yzzhao3/.cargo/git/checkouts/pdf-9563b332f7e1af00/99e70cd/pdf/src/build.rs:1:5\n>    \u001b[1m\u001b[94m|\u001b[0m\n>  \u001b[1m\u001b[94m1\u001b[0m \u001b[1m\u001b[94m|\u001b[0m use crate::object::*;\n>    \u001b[1m\u001b[94m|\u001b[0m     \u001b[1m\u001b[92m^^^^^^^^^^^^^^^^\u001b[0m\n>    \u001b[1m\u001b[94m= \u001b[0m\u001b[1mhelp\u001b[0m: consider adding an explicit import of `Rect` to disambiguate\n> \u001b[1m\u001b[92mnote\u001b[0m: `Rect` could also refer to the struct imported here\n>   \u001b[1m\u001b[94m--> \u001b[0m/home/yzzhao3/.cargo/git/checkouts/pdf-9563b332f7e1af00/99e70cd/pdf/src/build.rs:2:5\n>    \u001b[1m\u001b[94m|\u001b[0m\n>  \u001b[1m\u001b[94m2\u001b[0m \u001b[1m\u001b[94m|\u001b[0m use crate::content::*;\n>    \u001b[1m\u001b[94m|\u001b[0m     \u001b[1m\u001b[92m^^^^^^^^^^^^^^^^^\u001b[0m\n>    \u001b[1m\u001b[94m= \u001b[0m\u001b[1mhelp\u001b[0m: consider adding an explicit import of `Rect` to disambiguate\n> \n> \u001b[1m\u001b[33mwarning\u001b[0m\u001b[1m: `Rect` is ambiguous\u001b[0m\n>   \u001b[1m\u001b[94m--> \u001b[0m/home/yzzhao3/.cargo/git/checkouts/pdf-9563b332f7e1af00/99e70cd/pdf/src/build.rs:30:31\n>    \u001b[1m\u001b[94m|\u001b[0m\n> \u001b[1m\u001b[94m30\u001b[0m \u001b[1m\u001b[94m|\u001b[0m         self.media_box = Some(Rect {\n>    \u001b[1m\u001b[94m|\u001b[0m                               \u001b[1m\u001b[33m^^^^\u001b[0m \u001b[1m\u001b[33mambiguous name\u001b[0m\n>    \u001b[1m\u001b[94m|\u001b[0m\n>    \u001b[1m\u001b[94m= \u001b[0m\u001b[1mwarning\u001b[0m: this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release!\n>    \u001b[1m\u001b[94m= \u001b[0m\u001b[1mnote\u001b[0m: for more information, see issue #114095 <https://github.com/rust-lang/rust/issues/114095>\n>    \u001b[1m\u001b[94m= \u001b[0m\u001b[1mnote\u001b[0m: ambiguous because of multiple glob imports of a name in the same module\n> \u001b[1m\u001b[92mnote\u001b[0m: `Rect` could refer to the struct imported here\n>   \u001b[1m\u001b[94m--> \u001b[0m/home/yzzhao3/.cargo/git/checkouts/pdf-9563b332f7e1af00/99e70cd/pdf/src/build.rs:1:5\n>    \u001b[1m\u001b[94m|\u001b[0m\n>  \u001b[1m\u001b[94m1\u001b[0m \u001b[1m\u001b[94m|\u001b[0m use crate::object::*;\n>    \u001b[1m\u001b[94m|\u001b[0m     \u001b[1m\u001b[92m^^^^^^^^^^^^^^^^\u001b[0m\n>    \u001b[1m\u001b[94m= \u001b[0m\u001b[1mhelp\u001b[0m: consider adding an explicit import of `Rect` to disambiguate\n> \u001b[1m\u001b[92mnote\u001b[0m: `Rect` could also refer to the struct imported here\n>   \u001b[1m\u001b[94m--> \u001b[0m/home/yzzhao3/.cargo/git/checkouts/pdf-9563b332f7e1af00/99e70cd/pdf/src/build.rs:2:5\n>    \u001b[1m\u001b[94m|\u001b[0m\n>  \u001b[1m\u001b[94m2\u001b[0m \u001b[1m\u001b[94m|\u001b[0m use crate::content::*;\n>    \u001b[1m\u001b[94m|\u001b[0m     \u001b[1m\u001b[92m^^^^^^^^^^^^^^^^^\u001b[0m\n>    \u001b[1m\u001b[94m= \u001b[0m\u001b[1mhelp\u001b[0m: consider adding an explicit import of `Rect` to disambiguate\n> \nThe package `pdf v0.7.2 (https://github.com/pdf-rs/pdf?rev=316168c#316168c9)` currently triggers the following future incompatibility lints:\n> \u001b[1m\u001b[33mwarning\u001b[0m\u001b[1m: `Rect` is ambiguous\u001b[0m\n>  \u001b[1m\u001b[94m--> \u001b[0m/home/yzzhao3/.cargo/git/checkouts/pdf-9563b332f7e1af00/316168c/pdf/src/build.rs:8:27\n>   \u001b[1m\u001b[94m|\u001b[0m\n> \u001b[1m\u001b[94m8\u001b[0m \u001b[1m\u001b[94m|\u001b[0m     pub media_box: Option<Rect>,\n>   \u001b[1m\u001b[94m|\u001b[0m                           \u001b[1m\u001b[33m^^^^\u001b[0m \u001b[1m\u001b[33mambiguous name\u001b[0m\n>   \u001b[1m\u001b[94m|\u001b[0m\n>   \u001b[1m\u001b[94m= \u001b[0m\u001b[1mwarning\u001b[0m: this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release!\n>   \u001b[1m\u001b[94m= \u001b[0m\u001b[1mnote\u001b[0m: for more information, see issue #114095 <https://github.com/rust-lang/rust/issues/114095>\n>   \u001b[1m\u001b[94m= \u001b[0m\u001b[1mnote\u001b[0m: ambiguous because of multiple glob imports of a name in the same module\n> \u001b[1m\u001b[92mnote\u001b[0m: `Rect` could refer to the struct imported here\n>  \u001b[1m\u001b[94m--> \u001b[0m/home/yzzhao3/.cargo/git/checkouts/pdf-9563b332f7e1af00/316168c/pdf/src/build.rs:1:5\n>   \u001b[1m\u001b[94m|\u001b[0m\n> \u001b[1m\u001b[94m1\u001b[0m \u001b[1m\u001b[94m|\u001b[0m use crate::object::*;\n>   \u001b[1m\u001b[94m|\u001b[0m     \u001b[1m\u001b[92m^^^^^^^^^^^^^^^^\u001b[0m\n>   \u001b[1m\u001b[94m= \u001b[0m\u001b[1mhelp\u001b[0m: consider adding an explicit import of `Rect` to disambiguate\n> \u001b[1m\u001b[92mnote\u001b[0m: `Rect` could also refer to the struct imported here\n>  \u001b[1m\u001b[94m--> \u001b[0m/home/yzzhao3/.cargo/git/checkouts/pdf-9563b332f7e1af00/316168c/pdf/src/build.rs:2:5\n>   \u001b[1m\u001b[94m|\u001b[0m\n> \u001b[1m\u001b[94m2\u001b[0m \u001b[1m\u001b[94m|\u001b[0m use crate::content::*;\n>   \u001b[1m\u001b[94m|\u001b[0m     \u001b[1m\u001b[92m^^^^^^^^^^^^^^^^^\u001b[0m\n>   \u001b[1m\u001b[94m= \u001b[0m\u001b[1mhelp\u001b[0m: consider adding an explicit import of `Rect` to disambiguate\n> \n> \u001b[1m\u001b[33mwarning\u001b[0m\u001b[1m: `Rect` is ambiguous\u001b[0m\n>  \u001b[1m\u001b[94m--> \u001b[0m/home/yzzhao3/.cargo/git/checkouts/pdf-9563b332f7e1af00/316168c/pdf/src/build.rs:9:26\n>   \u001b[1m\u001b[94m|\u001b[0m\n> \u001b[1m\u001b[94m9\u001b[0m \u001b[1m\u001b[94m|\u001b[0m     pub crop_box: Option<Rect>,\n>   \u001b[1m\u001b[94m|\u001b[0m                          \u001b[1m\u001b[33m^^^^\u001b[0m \u001b[1m\u001b[33mambiguous name\u001b[0m\n>   \u001b[1m\u001b[94m|\u001b[0m\n>   \u001b[1m\u001b[94m= \u001b[0m\u001b[1mwarning\u001b[0m: this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release!\n>   \u001b[1m\u001b[94m= \u001b[0m\u001b[1mnote\u001b[0m: for more information, see issue #114095 <https://github.com/rust-lang/rust/issues/114095>\n>   \u001b[1m\u001b[94m= \u001b[0m\u001b[1mnote\u001b[0m: ambiguous because of multiple glob imports of a name in the same module\n> \u001b[1m\u001b[92mnote\u001b[0m: `Rect` could refer to the struct imported here\n>  \u001b[1m\u001b[94m--> \u001b[0m/home/yzzhao3/.cargo/git/checkouts/pdf-9563b332f7e1af00/316168c/pdf/src/build.rs:1:5\n>   \u001b[1m\u001b[94m|\u001b[0m\n> \u001b[1m\u001b[94m1\u001b[0m \u001b[1m\u001b[94m|\u001b[0m use crate::object::*;\n>   \u001b[1m\u001b[94m|\u001b[0m     \u001b[1m\u001b[92m^^^^^^^^^^^^^^^^\u001b[0m\n>   \u001b[1m\u001b[94m= \u001b[0m\u001b[1mhelp\u001b[0m: consider adding an explicit import of `Rect` to disambiguate\n> \u001b[1m\u001b[92mnote\u001b[0m: `Rect` could also refer to the struct imported here\n>  \u001b[1m\u001b[94m--> \u001b[0m/home/yzzhao3/.cargo/git/checkouts/pdf-9563b332f7e1af00/316168c/pdf/src/build.rs:2:5\n>   \u001b[1m\u001b[94m|\u001b[0m\n> \u001b[1m\u001b[94m2\u001b[0m \u001b[1m\u001b[94m|\u001b[0m use crate::content::*;\n>   \u001b[1m\u001b[94m|\u001b[0m     \u001b[1m\u001b[92m^^^^^^^^^^^^^^^^^\u001b[0m\n>   \u001b[1m\u001b[94m= \u001b[0m\u001b[1mhelp\u001b[0m: consider adding an explicit import of `Rect` to disambiguate\n> \n> \u001b[1m\u001b[33mwarning\u001b[0m\u001b[1m: `Rect` is ambiguous\u001b[0m\n>   \u001b[1m\u001b[94m--> \u001b[0m/home/yzzhao3/.cargo/git/checkouts/pdf-9563b332f7e1af00/316168c/pdf/src/build.rs:10:26\n>    \u001b[1m\u001b[94m|\u001b[0m\n> \u001b[1m\u001b[94m10\u001b[0m \u001b[1m\u001b[94m|\u001b[0m     pub trim_box: Option<Rect>,\n>    \u001b[1m\u001b[94m|\u001b[0m                          \u001b[1m\u001b[33m^^^^\u001b[0m \u001b[1m\u001b[33mambiguous name\u001b[0m\n>    \u001b[1m\u001b[94m|\u001b[0m\n>    \u001b[1m\u001b[94m= \u001b[0m\u001b[1mwarning\u001b[0m: this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release!\n>    \u001b[1m\u001b[94m= \u001b[0m\u001b[1mnote\u001b[0m: for more information, see issue #114095 <https://github.com/rust-lang/rust/issues/114095>\n>    \u001b[1m\u001b[94m= \u001b[0m\u001b[1mnote\u001b[0m: ambiguous because of multiple glob imports of a name in the same module\n> \u001b[1m\u001b[92mnote\u001b[0m: `Rect` could refer to the struct imported here\n>   \u001b[1m\u001b[94m--> \u001b[0m/home/yzzhao3/.cargo/git/checkouts/pdf-9563b332f7e1af00/316168c/pdf/src/build.rs:1:5\n>    \u001b[1m\u001b[94m|\u001b[0m\n>  \u001b[1m\u001b[94m1\u001b[0m \u001b[1m\u001b[94m|\u001b[0m use crate::object::*;\n>    \u001b[1m\u001b[94m|\u001b[0m     \u001b[1m\u001b[92m^^^^^^^^^^^^^^^^\u001b[0m\n>    \u001b[1m\u001b[94m= \u001b[0m\u001b[1mhelp\u001b[0m: consider adding an explicit import of `Rect` to disambiguate\n> \u001b[1m\u001b[92mnote\u001b[0m: `Rect` could also refer to the struct imported here\n>   \u001b[1m\u001b[94m--> \u001b[0m/home/yzzhao3/.cargo/git/checkouts/pdf-9563b332f7e1af00/316168c/pdf/src/build.rs:2:5\n>    \u001b[1m\u001b[94m|\u001b[0m\n>  \u001b[1m\u001b[94m2\u001b[0m \u001b[1m\u001b[94m|\u001b[0m use crate::content::*;\n>    \u001b[1m\u001b[94m|\u001b[0m     \u001b[1m\u001b[92m^^^^^^^^^^^^^^^^^\u001b[0m\n>    \u001b[1m\u001b[94m= \u001b[0m\u001b[1mhelp\u001b[0m: consider adding an explicit import of `Rect` to disambiguate\n> \n> \u001b[1m\u001b[33mwarning\u001b[0m\u001b[1m: `Rect` is ambiguous\u001b[0m\n>   \u001b[1m\u001b[94m--> \u001b[0m/home/yzzhao3/.cargo/git/checkouts/pdf-9563b332f7e1af00/316168c/pdf/src/build.rs:30:31\n>    \u001b[1m\u001b[94m|\u001b[0m\n> \u001b[1m\u001b[94m30\u001b[0m \u001b[1m\u001b[94m|\u001b[0m         self.media_box = Some(Rect {\n>    \u001b[1m\u001b[94m|\u001b[0m                               \u001b[1m\u001b[33m^^^^\u001b[0m \u001b[1m\u001b[33mambiguous name\u001b[0m\n>    \u001b[1m\u001b[94m|\u001b[0m\n>    \u001b[1m\u001b[94m= \u001b[0m\u001b[1mwarning\u001b[0m: this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release!\n>    \u001b[1m\u001b[94m= \u001b[0m\u001b[1mnote\u001b[0m: for more information, see issue #114095 <https://github.com/rust-lang/rust/issues/114095>\n>    \u001b[1m\u001b[94m= \u001b[0m\u001b[1mnote\u001b[0m: ambiguous because of multiple glob imports of a name in the same module\n> \u001b[1m\u001b[92mnote\u001b[0m: `Rect` could refer to the struct imported here\n>   \u001b[1m\u001b[94m--> \u001b[0m/home/yzzhao3/.cargo/git/checkouts/pdf-9563b332f7e1af00/316168c/pdf/src/build.rs:1:5\n>    \u001b[1m\u001b[94m|\u001b[0m\n>  \u001b[1m\u001b[94m1\u001b[0m \u001b[1m\u001b[94m|\u001b[0m use crate::object::*;\n>    \u001b[1m\u001b[94m|\u001b[0m     \u001b[1m\u001b[92m^^^^^^^^^^^^^^^^\u001b[0m\n>    \u001b[1m\u001b[94m= \u001b[0m\u001b[1mhelp\u001b[0m: consider adding an explicit import of `Rect` to disambiguate\n> \u001b[1m\u001b[92mnote\u001b[0m: `Rect` could also refer to the struct imported here\n>   \u001b[1m\u001b[94m--> \u001b[0m/home/yzzhao3/.cargo/git/checkouts/pdf-9563b332f7e1af00/316168c/pdf/src/build.rs:2:5\n>    \u001b[1m\u001b[94m|\u001b[0m\n>  \u001b[1m\u001b[94m2\u001b[0m \u001b[1m\u001b[94m|\u001b[0m use crate::content::*;\n>    \u001b[1m\u001b[94m|\u001b[0m     \u001b[1m\u001b[92m^^^^^^^^^^^^^^^^^\u001b[0m\n>    \u001b[1m\u001b[94m= \u001b[0m\u001b[1mhelp\u001b[0m: consider adding an explicit import of `Rect` to disambiguate\n> \n"}}]}